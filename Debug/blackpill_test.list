
blackpill_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e8c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08009024  08009024  00019024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009078  08009078  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08009078  08009078  00019078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009080  08009080  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009080  08009080  00019080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009084  08009084  00019084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08009088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e38  20000100  08009188  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f38  08009188  00021f38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001404f  00000000  00000000  00020173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e91  00000000  00000000  000341c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  00038058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c7e  00000000  00000000  00039158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ba13  00000000  00000000  00039dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017a64  00000000  00000000  000557e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093546  00000000  00000000  0006d24d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000043c0  00000000  00000000  00100794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00104b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000100 	.word	0x20000100
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800900c 	.word	0x0800900c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000104 	.word	0x20000104
 80001d4:	0800900c 	.word	0x0800900c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295
 80009d8:	f000 b970 	b.w	8000cbc <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9e08      	ldr	r6, [sp, #32]
 80009fa:	460d      	mov	r5, r1
 80009fc:	4604      	mov	r4, r0
 80009fe:	460f      	mov	r7, r1
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d14a      	bne.n	8000a9a <__udivmoddi4+0xa6>
 8000a04:	428a      	cmp	r2, r1
 8000a06:	4694      	mov	ip, r2
 8000a08:	d965      	bls.n	8000ad6 <__udivmoddi4+0xe2>
 8000a0a:	fab2 f382 	clz	r3, r2
 8000a0e:	b143      	cbz	r3, 8000a22 <__udivmoddi4+0x2e>
 8000a10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a14:	f1c3 0220 	rsb	r2, r3, #32
 8000a18:	409f      	lsls	r7, r3
 8000a1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a1e:	4317      	orrs	r7, r2
 8000a20:	409c      	lsls	r4, r3
 8000a22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a26:	fa1f f58c 	uxth.w	r5, ip
 8000a2a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a2e:	0c22      	lsrs	r2, r4, #16
 8000a30:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a38:	fb01 f005 	mul.w	r0, r1, r5
 8000a3c:	4290      	cmp	r0, r2
 8000a3e:	d90a      	bls.n	8000a56 <__udivmoddi4+0x62>
 8000a40:	eb1c 0202 	adds.w	r2, ip, r2
 8000a44:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a48:	f080 811c 	bcs.w	8000c84 <__udivmoddi4+0x290>
 8000a4c:	4290      	cmp	r0, r2
 8000a4e:	f240 8119 	bls.w	8000c84 <__udivmoddi4+0x290>
 8000a52:	3902      	subs	r1, #2
 8000a54:	4462      	add	r2, ip
 8000a56:	1a12      	subs	r2, r2, r0
 8000a58:	b2a4      	uxth	r4, r4
 8000a5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a66:	fb00 f505 	mul.w	r5, r0, r5
 8000a6a:	42a5      	cmp	r5, r4
 8000a6c:	d90a      	bls.n	8000a84 <__udivmoddi4+0x90>
 8000a6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a72:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a76:	f080 8107 	bcs.w	8000c88 <__udivmoddi4+0x294>
 8000a7a:	42a5      	cmp	r5, r4
 8000a7c:	f240 8104 	bls.w	8000c88 <__udivmoddi4+0x294>
 8000a80:	4464      	add	r4, ip
 8000a82:	3802      	subs	r0, #2
 8000a84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a88:	1b64      	subs	r4, r4, r5
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	b11e      	cbz	r6, 8000a96 <__udivmoddi4+0xa2>
 8000a8e:	40dc      	lsrs	r4, r3
 8000a90:	2300      	movs	r3, #0
 8000a92:	e9c6 4300 	strd	r4, r3, [r6]
 8000a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d908      	bls.n	8000ab0 <__udivmoddi4+0xbc>
 8000a9e:	2e00      	cmp	r6, #0
 8000aa0:	f000 80ed 	beq.w	8000c7e <__udivmoddi4+0x28a>
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	e9c6 0500 	strd	r0, r5, [r6]
 8000aaa:	4608      	mov	r0, r1
 8000aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab0:	fab3 f183 	clz	r1, r3
 8000ab4:	2900      	cmp	r1, #0
 8000ab6:	d149      	bne.n	8000b4c <__udivmoddi4+0x158>
 8000ab8:	42ab      	cmp	r3, r5
 8000aba:	d302      	bcc.n	8000ac2 <__udivmoddi4+0xce>
 8000abc:	4282      	cmp	r2, r0
 8000abe:	f200 80f8 	bhi.w	8000cb2 <__udivmoddi4+0x2be>
 8000ac2:	1a84      	subs	r4, r0, r2
 8000ac4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ac8:	2001      	movs	r0, #1
 8000aca:	4617      	mov	r7, r2
 8000acc:	2e00      	cmp	r6, #0
 8000ace:	d0e2      	beq.n	8000a96 <__udivmoddi4+0xa2>
 8000ad0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ad4:	e7df      	b.n	8000a96 <__udivmoddi4+0xa2>
 8000ad6:	b902      	cbnz	r2, 8000ada <__udivmoddi4+0xe6>
 8000ad8:	deff      	udf	#255	; 0xff
 8000ada:	fab2 f382 	clz	r3, r2
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f040 8090 	bne.w	8000c04 <__udivmoddi4+0x210>
 8000ae4:	1a8a      	subs	r2, r1, r2
 8000ae6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aea:	fa1f fe8c 	uxth.w	lr, ip
 8000aee:	2101      	movs	r1, #1
 8000af0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000af4:	fb07 2015 	mls	r0, r7, r5, r2
 8000af8:	0c22      	lsrs	r2, r4, #16
 8000afa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000afe:	fb0e f005 	mul.w	r0, lr, r5
 8000b02:	4290      	cmp	r0, r2
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x124>
 8000b06:	eb1c 0202 	adds.w	r2, ip, r2
 8000b0a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x122>
 8000b10:	4290      	cmp	r0, r2
 8000b12:	f200 80cb 	bhi.w	8000cac <__udivmoddi4+0x2b8>
 8000b16:	4645      	mov	r5, r8
 8000b18:	1a12      	subs	r2, r2, r0
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b20:	fb07 2210 	mls	r2, r7, r0, r2
 8000b24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b28:	fb0e fe00 	mul.w	lr, lr, r0
 8000b2c:	45a6      	cmp	lr, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x14e>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b38:	d202      	bcs.n	8000b40 <__udivmoddi4+0x14c>
 8000b3a:	45a6      	cmp	lr, r4
 8000b3c:	f200 80bb 	bhi.w	8000cb6 <__udivmoddi4+0x2c2>
 8000b40:	4610      	mov	r0, r2
 8000b42:	eba4 040e 	sub.w	r4, r4, lr
 8000b46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b4a:	e79f      	b.n	8000a8c <__udivmoddi4+0x98>
 8000b4c:	f1c1 0720 	rsb	r7, r1, #32
 8000b50:	408b      	lsls	r3, r1
 8000b52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b5a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b62:	40fd      	lsrs	r5, r7
 8000b64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b68:	4323      	orrs	r3, r4
 8000b6a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b6e:	fa1f fe8c 	uxth.w	lr, ip
 8000b72:	fb09 5518 	mls	r5, r9, r8, r5
 8000b76:	0c1c      	lsrs	r4, r3, #16
 8000b78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b7c:	fb08 f50e 	mul.w	r5, r8, lr
 8000b80:	42a5      	cmp	r5, r4
 8000b82:	fa02 f201 	lsl.w	r2, r2, r1
 8000b86:	fa00 f001 	lsl.w	r0, r0, r1
 8000b8a:	d90b      	bls.n	8000ba4 <__udivmoddi4+0x1b0>
 8000b8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b94:	f080 8088 	bcs.w	8000ca8 <__udivmoddi4+0x2b4>
 8000b98:	42a5      	cmp	r5, r4
 8000b9a:	f240 8085 	bls.w	8000ca8 <__udivmoddi4+0x2b4>
 8000b9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ba2:	4464      	add	r4, ip
 8000ba4:	1b64      	subs	r4, r4, r5
 8000ba6:	b29d      	uxth	r5, r3
 8000ba8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bac:	fb09 4413 	mls	r4, r9, r3, r4
 8000bb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bb4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bb8:	45a6      	cmp	lr, r4
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x1da>
 8000bbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bc4:	d26c      	bcs.n	8000ca0 <__udivmoddi4+0x2ac>
 8000bc6:	45a6      	cmp	lr, r4
 8000bc8:	d96a      	bls.n	8000ca0 <__udivmoddi4+0x2ac>
 8000bca:	3b02      	subs	r3, #2
 8000bcc:	4464      	add	r4, ip
 8000bce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bd2:	fba3 9502 	umull	r9, r5, r3, r2
 8000bd6:	eba4 040e 	sub.w	r4, r4, lr
 8000bda:	42ac      	cmp	r4, r5
 8000bdc:	46c8      	mov	r8, r9
 8000bde:	46ae      	mov	lr, r5
 8000be0:	d356      	bcc.n	8000c90 <__udivmoddi4+0x29c>
 8000be2:	d053      	beq.n	8000c8c <__udivmoddi4+0x298>
 8000be4:	b156      	cbz	r6, 8000bfc <__udivmoddi4+0x208>
 8000be6:	ebb0 0208 	subs.w	r2, r0, r8
 8000bea:	eb64 040e 	sbc.w	r4, r4, lr
 8000bee:	fa04 f707 	lsl.w	r7, r4, r7
 8000bf2:	40ca      	lsrs	r2, r1
 8000bf4:	40cc      	lsrs	r4, r1
 8000bf6:	4317      	orrs	r7, r2
 8000bf8:	e9c6 7400 	strd	r7, r4, [r6]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	2100      	movs	r1, #0
 8000c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c04:	f1c3 0120 	rsb	r1, r3, #32
 8000c08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c0c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c10:	fa25 f101 	lsr.w	r1, r5, r1
 8000c14:	409d      	lsls	r5, r3
 8000c16:	432a      	orrs	r2, r5
 8000c18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1c:	fa1f fe8c 	uxth.w	lr, ip
 8000c20:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c24:	fb07 1510 	mls	r5, r7, r0, r1
 8000c28:	0c11      	lsrs	r1, r2, #16
 8000c2a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c2e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c32:	428d      	cmp	r5, r1
 8000c34:	fa04 f403 	lsl.w	r4, r4, r3
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x258>
 8000c3a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c42:	d22f      	bcs.n	8000ca4 <__udivmoddi4+0x2b0>
 8000c44:	428d      	cmp	r5, r1
 8000c46:	d92d      	bls.n	8000ca4 <__udivmoddi4+0x2b0>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	4461      	add	r1, ip
 8000c4c:	1b49      	subs	r1, r1, r5
 8000c4e:	b292      	uxth	r2, r2
 8000c50:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c54:	fb07 1115 	mls	r1, r7, r5, r1
 8000c58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c5c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c60:	4291      	cmp	r1, r2
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x282>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c6c:	d216      	bcs.n	8000c9c <__udivmoddi4+0x2a8>
 8000c6e:	4291      	cmp	r1, r2
 8000c70:	d914      	bls.n	8000c9c <__udivmoddi4+0x2a8>
 8000c72:	3d02      	subs	r5, #2
 8000c74:	4462      	add	r2, ip
 8000c76:	1a52      	subs	r2, r2, r1
 8000c78:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c7c:	e738      	b.n	8000af0 <__udivmoddi4+0xfc>
 8000c7e:	4631      	mov	r1, r6
 8000c80:	4630      	mov	r0, r6
 8000c82:	e708      	b.n	8000a96 <__udivmoddi4+0xa2>
 8000c84:	4639      	mov	r1, r7
 8000c86:	e6e6      	b.n	8000a56 <__udivmoddi4+0x62>
 8000c88:	4610      	mov	r0, r2
 8000c8a:	e6fb      	b.n	8000a84 <__udivmoddi4+0x90>
 8000c8c:	4548      	cmp	r0, r9
 8000c8e:	d2a9      	bcs.n	8000be4 <__udivmoddi4+0x1f0>
 8000c90:	ebb9 0802 	subs.w	r8, r9, r2
 8000c94:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	e7a3      	b.n	8000be4 <__udivmoddi4+0x1f0>
 8000c9c:	4645      	mov	r5, r8
 8000c9e:	e7ea      	b.n	8000c76 <__udivmoddi4+0x282>
 8000ca0:	462b      	mov	r3, r5
 8000ca2:	e794      	b.n	8000bce <__udivmoddi4+0x1da>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	e7d1      	b.n	8000c4c <__udivmoddi4+0x258>
 8000ca8:	46d0      	mov	r8, sl
 8000caa:	e77b      	b.n	8000ba4 <__udivmoddi4+0x1b0>
 8000cac:	3d02      	subs	r5, #2
 8000cae:	4462      	add	r2, ip
 8000cb0:	e732      	b.n	8000b18 <__udivmoddi4+0x124>
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e70a      	b.n	8000acc <__udivmoddi4+0xd8>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	e742      	b.n	8000b42 <__udivmoddi4+0x14e>

08000cbc <__aeabi_idiv0>:
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <MX_DMA_Init+0x4c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a0f      	ldr	r2, [pc, #60]	; (8000d0c <MX_DMA_Init+0x4c>)
 8000cd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <MX_DMA_Init+0x4c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2038      	movs	r0, #56	; 0x38
 8000ce8:	f001 f86f 	bl	8001dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000cec:	2038      	movs	r0, #56	; 0x38
 8000cee:	f001 f888 	bl	8001e02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	203a      	movs	r0, #58	; 0x3a
 8000cf8:	f001 f867 	bl	8001dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000cfc:	203a      	movs	r0, #58	; 0x3a
 8000cfe:	f001 f880 	bl	8001e02 <HAL_NVIC_EnableIRQ>

}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800

08000d10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d16:	f107 030c 	add.w	r3, r7, #12
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <MX_GPIO_Init+0x7c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <MX_GPIO_Init+0x7c>)
 8000d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <MX_GPIO_Init+0x7c>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_GPIO_Init+0x7c>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a10      	ldr	r2, [pc, #64]	; (8000d8c <MX_GPIO_Init+0x7c>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <MX_GPIO_Init+0x7c>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CTRL_EN_Pin|CS_CTRL_Pin|CS_DRV_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	211c      	movs	r1, #28
 8000d62:	480b      	ldr	r0, [pc, #44]	; (8000d90 <MX_GPIO_Init+0x80>)
 8000d64:	f001 fcf8 	bl	8002758 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CTRL_EN_Pin|CS_CTRL_Pin|CS_DRV_Pin;
 8000d68:	231c      	movs	r3, #28
 8000d6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4804      	ldr	r0, [pc, #16]	; (8000d90 <MX_GPIO_Init+0x80>)
 8000d80:	f001 fb66 	bl	8002450 <HAL_GPIO_Init>

}
 8000d84:	bf00      	nop
 8000d86:	3720      	adds	r7, #32
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020000 	.word	0x40020000

08000d94 <tmcl_transmitt>:
		HAL_GPIO_WritePin(CTRL_EN_GPIO_Port, CS_CTRL_Pin, GPIO_PIN_SET);
	}
}

int tmcl_transmitt(uint8_t* Buf, int Len)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
	return CDC_Transmit_FS(Buf, Len);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	4619      	mov	r1, r3
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f007 fca5 	bl	80086f4 <CDC_Transmit_FS>
 8000daa:	4603      	mov	r3, r0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dba:	f000 fe95 	bl	8001ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dbe:	f000 f859 	bl	8000e74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc2:	f7ff ffa5 	bl	8000d10 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dc6:	f7ff ff7b 	bl	8000cc0 <MX_DMA_Init>
  MX_SPI1_Init();
 8000dca:	f000 f8c3 	bl	8000f54 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000dce:	f007 fbcd 	bl	800856c <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint64_t value = 0x8100000000;
 8000dd2:	f04f 0200 	mov.w	r2, #0
 8000dd6:	f04f 0381 	mov.w	r3, #129	; 0x81
 8000dda:	e9c7 2300 	strd	r2, r3, [r7]

  tx_data[0] = (value >> 32) & 0xFF;
 8000dde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000de2:	f04f 0200 	mov.w	r2, #0
 8000de6:	f04f 0300 	mov.w	r3, #0
 8000dea:	000a      	movs	r2, r1
 8000dec:	2300      	movs	r3, #0
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <main+0xb8>)
 8000df2:	701a      	strb	r2, [r3, #0]
  tx_data[1] = (value >> 24) & 0xFF;
 8000df4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000df8:	f04f 0200 	mov.w	r2, #0
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	0e02      	lsrs	r2, r0, #24
 8000e02:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000e06:	0e0b      	lsrs	r3, r1, #24
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <main+0xb8>)
 8000e0c:	705a      	strb	r2, [r3, #1]
  tx_data[2] = (value >> 16) & 0xFF;
 8000e0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e12:	f04f 0200 	mov.w	r2, #0
 8000e16:	f04f 0300 	mov.w	r3, #0
 8000e1a:	0c02      	lsrs	r2, r0, #16
 8000e1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e20:	0c0b      	lsrs	r3, r1, #16
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <main+0xb8>)
 8000e26:	709a      	strb	r2, [r3, #2]
  tx_data[3] = (value >>  8) & 0xFF;
 8000e28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e2c:	f04f 0200 	mov.w	r2, #0
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	0a02      	lsrs	r2, r0, #8
 8000e36:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000e3a:	0a0b      	lsrs	r3, r1, #8
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <main+0xb8>)
 8000e40:	70da      	strb	r2, [r3, #3]
  tx_data[4] = (value >>  0) & 0xFF;
 8000e42:	783a      	ldrb	r2, [r7, #0]
 8000e44:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <main+0xb8>)
 8000e46:	711a      	strb	r2, [r3, #4]
  HAL_GPIO_WritePin(CTRL_EN_GPIO_Port, CS_CTRL_Pin, GPIO_PIN_SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2108      	movs	r1, #8
 8000e4c:	4808      	ldr	r0, [pc, #32]	; (8000e70 <main+0xbc>)
 8000e4e:	f001 fc83 	bl	8002758 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS_DRV_GPIO_Port, CS_DRV_Pin, GPIO_PIN_SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	2110      	movs	r1, #16
 8000e56:	4806      	ldr	r0, [pc, #24]	; (8000e70 <main+0xbc>)
 8000e58:	f001 fc7e 	bl	8002758 <HAL_GPIO_WritePin>
  StartupConfig();
 8000e5c:	f000 fdda 	bl	8001a14 <StartupConfig>
  openloop_test_drive(0x00);
 8000e60:	2000      	movs	r0, #0
 8000e62:	f000 fe17 	bl	8001a94 <openloop_test_drive>

  while (1)
  {
//	  tmc4671_writeInt(0, TMC4671_CHIPINFO_ADDR, 0x00000000);
//	  val = tmc4671_readInt(0, TMC4671_CHIPINFO_DATA);
	  tmcl_processCommand();
 8000e66:	f000 fa69 	bl	800133c <tmcl_processCommand>
 8000e6a:	e7fc      	b.n	8000e66 <main+0xb2>
 8000e6c:	2000011c 	.word	0x2000011c
 8000e70:	40020000 	.word	0x40020000

08000e74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b094      	sub	sp, #80	; 0x50
 8000e78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7a:	f107 0320 	add.w	r3, r7, #32
 8000e7e:	2230      	movs	r2, #48	; 0x30
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f008 f888 	bl	8008f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	4b28      	ldr	r3, [pc, #160]	; (8000f40 <SystemClock_Config+0xcc>)
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	4a27      	ldr	r2, [pc, #156]	; (8000f40 <SystemClock_Config+0xcc>)
 8000ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea8:	4b25      	ldr	r3, [pc, #148]	; (8000f40 <SystemClock_Config+0xcc>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	4b22      	ldr	r3, [pc, #136]	; (8000f44 <SystemClock_Config+0xd0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a21      	ldr	r2, [pc, #132]	; (8000f44 <SystemClock_Config+0xd0>)
 8000ebe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <SystemClock_Config+0xd0>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eda:	2302      	movs	r3, #2
 8000edc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ede:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000ee4:	230f      	movs	r3, #15
 8000ee6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000ee8:	2390      	movs	r3, #144	; 0x90
 8000eea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000eec:	2304      	movs	r3, #4
 8000eee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000ef0:	2305      	movs	r3, #5
 8000ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef4:	f107 0320 	add.w	r3, r7, #32
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f002 fec3 	bl	8003c84 <HAL_RCC_OscConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f04:	f000 f820 	bl	8000f48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f08:	230f      	movs	r3, #15
 8000f0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	2101      	movs	r1, #1
 8000f24:	4618      	mov	r0, r3
 8000f26:	f003 f925 	bl	8004174 <HAL_RCC_ClockConfig>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f30:	f000 f80a 	bl	8000f48 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000f34:	f003 fa04 	bl	8004340 <HAL_RCC_EnableCSS>
}
 8000f38:	bf00      	nop
 8000f3a:	3750      	adds	r7, #80	; 0x50
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40007000 	.word	0x40007000

08000f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4c:	b672      	cpsid	i
}
 8000f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <Error_Handler+0x8>
	...

08000f54 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f58:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <MX_SPI1_Init+0x64>)
 8000f5a:	4a18      	ldr	r2, [pc, #96]	; (8000fbc <MX_SPI1_Init+0x68>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f5e:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <MX_SPI1_Init+0x64>)
 8000f60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <MX_SPI1_Init+0x64>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <MX_SPI1_Init+0x64>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_SPI1_Init+0x64>)
 8000f74:	2202      	movs	r2, #2
 8000f76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <MX_SPI1_Init+0x64>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <MX_SPI1_Init+0x64>)
 8000f80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f86:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <MX_SPI1_Init+0x64>)
 8000f88:	2220      	movs	r2, #32
 8000f8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <MX_SPI1_Init+0x64>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MX_SPI1_Init+0x64>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f98:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <MX_SPI1_Init+0x64>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <MX_SPI1_Init+0x64>)
 8000fa0:	220a      	movs	r2, #10
 8000fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fa4:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <MX_SPI1_Init+0x64>)
 8000fa6:	f003 fac4 	bl	8004532 <HAL_SPI_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fb0:	f7ff ffca 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000124 	.word	0x20000124
 8000fbc:	40013000 	.word	0x40013000

08000fc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a4b      	ldr	r2, [pc, #300]	; (800110c <HAL_SPI_MspInit+0x14c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	f040 8090 	bne.w	8001104 <HAL_SPI_MspInit+0x144>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	4b49      	ldr	r3, [pc, #292]	; (8001110 <HAL_SPI_MspInit+0x150>)
 8000fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fec:	4a48      	ldr	r2, [pc, #288]	; (8001110 <HAL_SPI_MspInit+0x150>)
 8000fee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ff2:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff4:	4b46      	ldr	r3, [pc, #280]	; (8001110 <HAL_SPI_MspInit+0x150>)
 8000ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	4b42      	ldr	r3, [pc, #264]	; (8001110 <HAL_SPI_MspInit+0x150>)
 8001006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001008:	4a41      	ldr	r2, [pc, #260]	; (8001110 <HAL_SPI_MspInit+0x150>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6313      	str	r3, [r2, #48]	; 0x30
 8001010:	4b3f      	ldr	r3, [pc, #252]	; (8001110 <HAL_SPI_MspInit+0x150>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800101c:	23e0      	movs	r3, #224	; 0xe0
 800101e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800102c:	2305      	movs	r3, #5
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4619      	mov	r1, r3
 8001036:	4837      	ldr	r0, [pc, #220]	; (8001114 <HAL_SPI_MspInit+0x154>)
 8001038:	f001 fa0a 	bl	8002450 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800103c:	4b36      	ldr	r3, [pc, #216]	; (8001118 <HAL_SPI_MspInit+0x158>)
 800103e:	4a37      	ldr	r2, [pc, #220]	; (800111c <HAL_SPI_MspInit+0x15c>)
 8001040:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001042:	4b35      	ldr	r3, [pc, #212]	; (8001118 <HAL_SPI_MspInit+0x158>)
 8001044:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001048:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800104a:	4b33      	ldr	r3, [pc, #204]	; (8001118 <HAL_SPI_MspInit+0x158>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001050:	4b31      	ldr	r3, [pc, #196]	; (8001118 <HAL_SPI_MspInit+0x158>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001056:	4b30      	ldr	r3, [pc, #192]	; (8001118 <HAL_SPI_MspInit+0x158>)
 8001058:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800105c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800105e:	4b2e      	ldr	r3, [pc, #184]	; (8001118 <HAL_SPI_MspInit+0x158>)
 8001060:	2200      	movs	r2, #0
 8001062:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001064:	4b2c      	ldr	r3, [pc, #176]	; (8001118 <HAL_SPI_MspInit+0x158>)
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800106a:	4b2b      	ldr	r3, [pc, #172]	; (8001118 <HAL_SPI_MspInit+0x158>)
 800106c:	2200      	movs	r2, #0
 800106e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001070:	4b29      	ldr	r3, [pc, #164]	; (8001118 <HAL_SPI_MspInit+0x158>)
 8001072:	2200      	movs	r2, #0
 8001074:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001076:	4b28      	ldr	r3, [pc, #160]	; (8001118 <HAL_SPI_MspInit+0x158>)
 8001078:	2200      	movs	r2, #0
 800107a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800107c:	4826      	ldr	r0, [pc, #152]	; (8001118 <HAL_SPI_MspInit+0x158>)
 800107e:	f000 fedb 	bl	8001e38 <HAL_DMA_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001088:	f7ff ff5e 	bl	8000f48 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a22      	ldr	r2, [pc, #136]	; (8001118 <HAL_SPI_MspInit+0x158>)
 8001090:	64da      	str	r2, [r3, #76]	; 0x4c
 8001092:	4a21      	ldr	r2, [pc, #132]	; (8001118 <HAL_SPI_MspInit+0x158>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8001098:	4b21      	ldr	r3, [pc, #132]	; (8001120 <HAL_SPI_MspInit+0x160>)
 800109a:	4a22      	ldr	r2, [pc, #136]	; (8001124 <HAL_SPI_MspInit+0x164>)
 800109c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 800109e:	4b20      	ldr	r3, [pc, #128]	; (8001120 <HAL_SPI_MspInit+0x160>)
 80010a0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80010a4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010a6:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <HAL_SPI_MspInit+0x160>)
 80010a8:	2240      	movs	r2, #64	; 0x40
 80010aa:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ac:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <HAL_SPI_MspInit+0x160>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <HAL_SPI_MspInit+0x160>)
 80010b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010b8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010ba:	4b19      	ldr	r3, [pc, #100]	; (8001120 <HAL_SPI_MspInit+0x160>)
 80010bc:	2200      	movs	r2, #0
 80010be:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <HAL_SPI_MspInit+0x160>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <HAL_SPI_MspInit+0x160>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <HAL_SPI_MspInit+0x160>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <HAL_SPI_MspInit+0x160>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80010d8:	4811      	ldr	r0, [pc, #68]	; (8001120 <HAL_SPI_MspInit+0x160>)
 80010da:	f000 fead 	bl	8001e38 <HAL_DMA_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 80010e4:	f7ff ff30 	bl	8000f48 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a0d      	ldr	r2, [pc, #52]	; (8001120 <HAL_SPI_MspInit+0x160>)
 80010ec:	649a      	str	r2, [r3, #72]	; 0x48
 80010ee:	4a0c      	ldr	r2, [pc, #48]	; (8001120 <HAL_SPI_MspInit+0x160>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	2023      	movs	r0, #35	; 0x23
 80010fa:	f000 fe66 	bl	8001dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80010fe:	2023      	movs	r0, #35	; 0x23
 8001100:	f000 fe7f 	bl	8001e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001104:	bf00      	nop
 8001106:	3728      	adds	r7, #40	; 0x28
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40013000 	.word	0x40013000
 8001110:	40023800 	.word	0x40023800
 8001114:	40020000 	.word	0x40020000
 8001118:	2000017c 	.word	0x2000017c
 800111c:	40026410 	.word	0x40026410
 8001120:	200001dc 	.word	0x200001dc
 8001124:	40026440 	.word	0x40026440

08001128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <HAL_MspInit+0x4c>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	4a0f      	ldr	r2, [pc, #60]	; (8001174 <HAL_MspInit+0x4c>)
 8001138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800113c:	6453      	str	r3, [r2, #68]	; 0x44
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <HAL_MspInit+0x4c>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	603b      	str	r3, [r7, #0]
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <HAL_MspInit+0x4c>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	4a08      	ldr	r2, [pc, #32]	; (8001174 <HAL_MspInit+0x4c>)
 8001154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001158:	6413      	str	r3, [r2, #64]	; 0x40
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_MspInit+0x4c>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800

08001178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800117c:	f003 f9be 	bl	80044fc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <NMI_Handler+0x8>

08001182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <HardFault_Handler+0x4>

08001188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <MemManage_Handler+0x4>

0800118e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <BusFault_Handler+0x4>

08001194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <UsageFault_Handler+0x4>

0800119a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c8:	f000 fce0 	bl	8001b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <SPI1_IRQHandler+0x10>)
 80011d6:	f003 fbd7 	bl	8004988 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000124 	.word	0x20000124

080011e4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <DMA2_Stream0_IRQHandler+0x10>)
 80011ea:	f000 fef5 	bl	8001fd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000017c 	.word	0x2000017c

080011f8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <DMA2_Stream2_IRQHandler+0x10>)
 80011fe:	f000 feeb 	bl	8001fd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200001dc 	.word	0x200001dc

0800120c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <OTG_FS_IRQHandler+0x10>)
 8001212:	f001 fc0a 	bl	8002a2a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2000180c 	.word	0x2000180c

08001220 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <SystemInit+0x20>)
 8001226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <SystemInit+0x20>)
 800122c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001230:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001244:	f8df d034 	ldr.w	sp, [pc, #52]	; 800127c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001248:	480d      	ldr	r0, [pc, #52]	; (8001280 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800124a:	490e      	ldr	r1, [pc, #56]	; (8001284 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800124c:	4a0e      	ldr	r2, [pc, #56]	; (8001288 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001250:	e002      	b.n	8001258 <LoopCopyDataInit>

08001252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001256:	3304      	adds	r3, #4

08001258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800125c:	d3f9      	bcc.n	8001252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125e:	4a0b      	ldr	r2, [pc, #44]	; (800128c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001260:	4c0b      	ldr	r4, [pc, #44]	; (8001290 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001264:	e001      	b.n	800126a <LoopFillZerobss>

08001266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001268:	3204      	adds	r2, #4

0800126a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800126c:	d3fb      	bcc.n	8001266 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800126e:	f7ff ffd7 	bl	8001220 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001272:	f007 fe99 	bl	8008fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001276:	f7ff fd9d 	bl	8000db4 <main>
  bx  lr    
 800127a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800127c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001284:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001288:	08009088 	.word	0x08009088
  ldr r2, =_sbss
 800128c:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001290:	20001f38 	.word	0x20001f38

08001294 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001294:	e7fe      	b.n	8001294 <ADC_IRQHandler>
	...

08001298 <tmcl_executeActualCommand>:
#include "TMC4671.h"
#include "TMC4671_Constants.h"


static void tmcl_executeActualCommand()
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	// prepare reply command
	TMCL_handle.ActualReply.Opcode = TMCL_handle.ActualCommand.Opcode;
 800129c:	4b26      	ldr	r3, [pc, #152]	; (8001338 <tmcl_executeActualCommand+0xa0>)
 800129e:	7b1a      	ldrb	r2, [r3, #12]
 80012a0:	4b25      	ldr	r3, [pc, #148]	; (8001338 <tmcl_executeActualCommand+0xa0>)
 80012a2:	755a      	strb	r2, [r3, #21]
	TMCL_handle.ActualReply.Status = REPLY_OK;
 80012a4:	4b24      	ldr	r3, [pc, #144]	; (8001338 <tmcl_executeActualCommand+0xa0>)
 80012a6:	2264      	movs	r2, #100	; 0x64
 80012a8:	751a      	strb	r2, [r3, #20]
	TMCL_handle.ActualReply.Value.Int32 = TMCL_handle.ActualCommand.Value.Int32;
 80012aa:	4b23      	ldr	r3, [pc, #140]	; (8001338 <tmcl_executeActualCommand+0xa0>)
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	4a22      	ldr	r2, [pc, #136]	; (8001338 <tmcl_executeActualCommand+0xa0>)
 80012b0:	6193      	str	r3, [r2, #24]

	//printf("Opcode: %d\n", ActualCommand.Opcode);

	switch (TMCL_handle.ActualCommand.Opcode)
 80012b2:	4b21      	ldr	r3, [pc, #132]	; (8001338 <tmcl_executeActualCommand+0xa0>)
 80012b4:	7b1b      	ldrb	r3, [r3, #12]
 80012b6:	2b94      	cmp	r3, #148	; 0x94
 80012b8:	d014      	beq.n	80012e4 <tmcl_executeActualCommand+0x4c>
 80012ba:	2b94      	cmp	r3, #148	; 0x94
 80012bc:	dc34      	bgt.n	8001328 <tmcl_executeActualCommand+0x90>
 80012be:	2b92      	cmp	r3, #146	; 0x92
 80012c0:	d01e      	beq.n	8001300 <tmcl_executeActualCommand+0x68>
 80012c2:	2b92      	cmp	r3, #146	; 0x92
 80012c4:	dc30      	bgt.n	8001328 <tmcl_executeActualCommand+0x90>
 80012c6:	2b88      	cmp	r3, #136	; 0x88
 80012c8:	d006      	beq.n	80012d8 <tmcl_executeActualCommand+0x40>
 80012ca:	2b88      	cmp	r3, #136	; 0x88
 80012cc:	dc2c      	bgt.n	8001328 <tmcl_executeActualCommand+0x90>
 80012ce:	2b06      	cmp	r3, #6
 80012d0:	d023      	beq.n	800131a <tmcl_executeActualCommand+0x82>
 80012d2:	2b0f      	cmp	r3, #15
 80012d4:	d003      	beq.n	80012de <tmcl_executeActualCommand+0x46>
	case TMCL_GAP: {
		TMCL_handle.ActualReply.Value.Int32 = tmc4671_getActualPosition(DEFAULT_MC);
		break;}

	default: {
	break;}
 80012d6:	e027      	b.n	8001328 <tmcl_executeActualCommand+0x90>
		tmcl_getVersion();
 80012d8:	f000 f984 	bl	80015e4 <tmcl_getVersion>
		break;}
 80012dc:	e029      	b.n	8001332 <tmcl_executeActualCommand+0x9a>
		tmcl_getInput();
 80012de:	f000 f9f7 	bl	80016d0 <tmcl_getInput>
		break;}
 80012e2:	e026      	b.n	8001332 <tmcl_executeActualCommand+0x9a>
		if (TMCL_handle.ActualCommand.Motor == 0) {
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <tmcl_executeActualCommand+0xa0>)
 80012e6:	7b9b      	ldrb	r3, [r3, #14]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d11f      	bne.n	800132c <tmcl_executeActualCommand+0x94>
			TMCL_handle.ActualReply.Value.Int32 = tmc4671_readInt(DEFAULT_MC, TMCL_handle.ActualCommand.Type);
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <tmcl_executeActualCommand+0xa0>)
 80012ee:	7b5b      	ldrb	r3, [r3, #13]
 80012f0:	4619      	mov	r1, r3
 80012f2:	2005      	movs	r0, #5
 80012f4:	f000 fa78 	bl	80017e8 <tmc4671_readInt>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4a0f      	ldr	r2, [pc, #60]	; (8001338 <tmcl_executeActualCommand+0xa0>)
 80012fc:	6193      	str	r3, [r2, #24]
		break;}
 80012fe:	e015      	b.n	800132c <tmcl_executeActualCommand+0x94>
		if (TMCL_handle.ActualCommand.Motor == 0) {
 8001300:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <tmcl_executeActualCommand+0xa0>)
 8001302:	7b9b      	ldrb	r3, [r3, #14]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d113      	bne.n	8001330 <tmcl_executeActualCommand+0x98>
			tmc4671_writeInt(DEFAULT_MC, TMCL_handle.ActualCommand.Type, TMCL_handle.ActualCommand.Value.Int32);
 8001308:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <tmcl_executeActualCommand+0xa0>)
 800130a:	7b5b      	ldrb	r3, [r3, #13]
 800130c:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <tmcl_executeActualCommand+0xa0>)
 800130e:	6912      	ldr	r2, [r2, #16]
 8001310:	4619      	mov	r1, r3
 8001312:	2005      	movs	r0, #5
 8001314:	f000 faa4 	bl	8001860 <tmc4671_writeInt>
		break;}
 8001318:	e00a      	b.n	8001330 <tmcl_executeActualCommand+0x98>
		TMCL_handle.ActualReply.Value.Int32 = tmc4671_getActualPosition(DEFAULT_MC);
 800131a:	2005      	movs	r0, #5
 800131c:	f000 fad8 	bl	80018d0 <tmc4671_getActualPosition>
 8001320:	4603      	mov	r3, r0
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <tmcl_executeActualCommand+0xa0>)
 8001324:	6193      	str	r3, [r2, #24]
		break;}
 8001326:	e004      	b.n	8001332 <tmcl_executeActualCommand+0x9a>
	break;}
 8001328:	bf00      	nop
 800132a:	e002      	b.n	8001332 <tmcl_executeActualCommand+0x9a>
		break;}
 800132c:	bf00      	nop
 800132e:	e000      	b.n	8001332 <tmcl_executeActualCommand+0x9a>
		break;}
 8001330:	bf00      	nop

	}
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	2000023c 	.word	0x2000023c

0800133c <tmcl_processCommand>:


void tmcl_processCommand()
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af00      	add	r7, sp, #0

	uint8_t USBCmd[9];
	uint8_t USBReply[9];

	/* send reply for last TMCL request */
	if(TMCLCommandState == TCS_USB) { // reply via USB
 8001342:	4b7b      	ldr	r3, [pc, #492]	; (8001530 <tmcl_processCommand+0x1f4>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b07      	cmp	r3, #7
 8001348:	d148      	bne.n	80013dc <tmcl_processCommand+0xa0>
		if(TMCL_handle.TMCLReplyFormat == RF_STANDARD) {
 800134a:	4b7a      	ldr	r3, [pc, #488]	; (8001534 <tmcl_processCommand+0x1f8>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d132      	bne.n	80013b8 <tmcl_processCommand+0x7c>
			uint8_t Checksum = HOST_ADDRESS + MODULE_ADDRESS + TMCL_handle.ActualReply.Status + TMCL_handle.ActualReply.Opcode + TMCL_handle.ActualReply.Value.Byte[3] + TMCL_handle.ActualReply.Value.Byte[2] + TMCL_handle.ActualReply.Value.Byte[1] + TMCL_handle.ActualReply.Value.Byte[0];
 8001352:	4b78      	ldr	r3, [pc, #480]	; (8001534 <tmcl_processCommand+0x1f8>)
 8001354:	7d1a      	ldrb	r2, [r3, #20]
 8001356:	4b77      	ldr	r3, [pc, #476]	; (8001534 <tmcl_processCommand+0x1f8>)
 8001358:	7d5b      	ldrb	r3, [r3, #21]
 800135a:	4413      	add	r3, r2
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4b75      	ldr	r3, [pc, #468]	; (8001534 <tmcl_processCommand+0x1f8>)
 8001360:	7edb      	ldrb	r3, [r3, #27]
 8001362:	4413      	add	r3, r2
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4b73      	ldr	r3, [pc, #460]	; (8001534 <tmcl_processCommand+0x1f8>)
 8001368:	7e9b      	ldrb	r3, [r3, #26]
 800136a:	4413      	add	r3, r2
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4b71      	ldr	r3, [pc, #452]	; (8001534 <tmcl_processCommand+0x1f8>)
 8001370:	7e5b      	ldrb	r3, [r3, #25]
 8001372:	4413      	add	r3, r2
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b6f      	ldr	r3, [pc, #444]	; (8001534 <tmcl_processCommand+0x1f8>)
 8001378:	7e1b      	ldrb	r3, [r3, #24]
 800137a:	4413      	add	r3, r2
 800137c:	b2db      	uxtb	r3, r3
 800137e:	3303      	adds	r3, #3
 8001380:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

			USBReply[0] = HOST_ADDRESS;
 8001384:	2302      	movs	r3, #2
 8001386:	713b      	strb	r3, [r7, #4]
			USBReply[1] = MODULE_ADDRESS;
 8001388:	2301      	movs	r3, #1
 800138a:	717b      	strb	r3, [r7, #5]
			USBReply[2] = TMCL_handle.ActualReply.Status;
 800138c:	4b69      	ldr	r3, [pc, #420]	; (8001534 <tmcl_processCommand+0x1f8>)
 800138e:	7d1b      	ldrb	r3, [r3, #20]
 8001390:	71bb      	strb	r3, [r7, #6]
			USBReply[3] = TMCL_handle.ActualReply.Opcode;
 8001392:	4b68      	ldr	r3, [pc, #416]	; (8001534 <tmcl_processCommand+0x1f8>)
 8001394:	7d5b      	ldrb	r3, [r3, #21]
 8001396:	71fb      	strb	r3, [r7, #7]
			USBReply[4] = TMCL_handle.ActualReply.Value.Byte[3];
 8001398:	4b66      	ldr	r3, [pc, #408]	; (8001534 <tmcl_processCommand+0x1f8>)
 800139a:	7edb      	ldrb	r3, [r3, #27]
 800139c:	723b      	strb	r3, [r7, #8]
			USBReply[5] = TMCL_handle.ActualReply.Value.Byte[2];
 800139e:	4b65      	ldr	r3, [pc, #404]	; (8001534 <tmcl_processCommand+0x1f8>)
 80013a0:	7e9b      	ldrb	r3, [r3, #26]
 80013a2:	727b      	strb	r3, [r7, #9]
			USBReply[6] = TMCL_handle.ActualReply.Value.Byte[1];
 80013a4:	4b63      	ldr	r3, [pc, #396]	; (8001534 <tmcl_processCommand+0x1f8>)
 80013a6:	7e5b      	ldrb	r3, [r3, #25]
 80013a8:	72bb      	strb	r3, [r7, #10]
			USBReply[7] = TMCL_handle.ActualReply.Value.Byte[0];
 80013aa:	4b62      	ldr	r3, [pc, #392]	; (8001534 <tmcl_processCommand+0x1f8>)
 80013ac:	7e1b      	ldrb	r3, [r3, #24]
 80013ae:	72fb      	strb	r3, [r7, #11]
			USBReply[8] = Checksum;
 80013b0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80013b4:	733b      	strb	r3, [r7, #12]
 80013b6:	e00b      	b.n	80013d0 <tmcl_processCommand+0x94>
		} else if(TMCL_handle.TMCLReplyFormat == RF_SPECIAL) {
 80013b8:	4b5e      	ldr	r3, [pc, #376]	; (8001534 <tmcl_processCommand+0x1f8>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d107      	bne.n	80013d0 <tmcl_processCommand+0x94>
			memcpy(USBReply, TMCL_handle.SpecialReply, sizeof(USBReply));
 80013c0:	4a5c      	ldr	r2, [pc, #368]	; (8001534 <tmcl_processCommand+0x1f8>)
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	3201      	adds	r2, #1
 80013c6:	6810      	ldr	r0, [r2, #0]
 80013c8:	6851      	ldr	r1, [r2, #4]
 80013ca:	c303      	stmia	r3!, {r0, r1}
 80013cc:	7a12      	ldrb	r2, [r2, #8]
 80013ce:	701a      	strb	r2, [r3, #0]
		}
		tmcl_transmitt(USBReply, sizeof(USBReply));
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	2109      	movs	r1, #9
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fcdd 	bl	8000d94 <tmcl_transmitt>
 80013da:	e043      	b.n	8001464 <tmcl_processCommand+0x128>
	} else if(TMCLCommandState == TCS_USB_ERROR) { // last command had a wrong checksum
 80013dc:	4b54      	ldr	r3, [pc, #336]	; (8001530 <tmcl_processCommand+0x1f4>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b08      	cmp	r3, #8
 80013e2:	d13f      	bne.n	8001464 <tmcl_processCommand+0x128>
		TMCL_handle.ActualReply.Opcode = 0;
 80013e4:	4b53      	ldr	r3, [pc, #332]	; (8001534 <tmcl_processCommand+0x1f8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	755a      	strb	r2, [r3, #21]
		TMCL_handle.ActualReply.Status = REPLY_CHKERR;
 80013ea:	4b52      	ldr	r3, [pc, #328]	; (8001534 <tmcl_processCommand+0x1f8>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	751a      	strb	r2, [r3, #20]
		TMCL_handle.ActualReply.Value.Int32 = 0;
 80013f0:	4b50      	ldr	r3, [pc, #320]	; (8001534 <tmcl_processCommand+0x1f8>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]

		uint8_t Checksum = HOST_ADDRESS + MODULE_ADDRESS + TMCL_handle.ActualReply.Status + TMCL_handle.ActualReply.Opcode + TMCL_handle.ActualReply.Value.Byte[3] + TMCL_handle.ActualReply.Value.Byte[2] + TMCL_handle.ActualReply.Value.Byte[1] + TMCL_handle.ActualReply.Value.Byte[0];
 80013f6:	4b4f      	ldr	r3, [pc, #316]	; (8001534 <tmcl_processCommand+0x1f8>)
 80013f8:	7d1a      	ldrb	r2, [r3, #20]
 80013fa:	4b4e      	ldr	r3, [pc, #312]	; (8001534 <tmcl_processCommand+0x1f8>)
 80013fc:	7d5b      	ldrb	r3, [r3, #21]
 80013fe:	4413      	add	r3, r2
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4b4c      	ldr	r3, [pc, #304]	; (8001534 <tmcl_processCommand+0x1f8>)
 8001404:	7edb      	ldrb	r3, [r3, #27]
 8001406:	4413      	add	r3, r2
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4b4a      	ldr	r3, [pc, #296]	; (8001534 <tmcl_processCommand+0x1f8>)
 800140c:	7e9b      	ldrb	r3, [r3, #26]
 800140e:	4413      	add	r3, r2
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4b48      	ldr	r3, [pc, #288]	; (8001534 <tmcl_processCommand+0x1f8>)
 8001414:	7e5b      	ldrb	r3, [r3, #25]
 8001416:	4413      	add	r3, r2
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4b46      	ldr	r3, [pc, #280]	; (8001534 <tmcl_processCommand+0x1f8>)
 800141c:	7e1b      	ldrb	r3, [r3, #24]
 800141e:	4413      	add	r3, r2
 8001420:	b2db      	uxtb	r3, r3
 8001422:	3303      	adds	r3, #3
 8001424:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		USBReply[0] = HOST_ADDRESS;
 8001428:	2302      	movs	r3, #2
 800142a:	713b      	strb	r3, [r7, #4]
		USBReply[1] = MODULE_ADDRESS;
 800142c:	2301      	movs	r3, #1
 800142e:	717b      	strb	r3, [r7, #5]
		USBReply[2] = TMCL_handle.ActualReply.Status;
 8001430:	4b40      	ldr	r3, [pc, #256]	; (8001534 <tmcl_processCommand+0x1f8>)
 8001432:	7d1b      	ldrb	r3, [r3, #20]
 8001434:	71bb      	strb	r3, [r7, #6]
		USBReply[3] = TMCL_handle.ActualReply.Opcode;
 8001436:	4b3f      	ldr	r3, [pc, #252]	; (8001534 <tmcl_processCommand+0x1f8>)
 8001438:	7d5b      	ldrb	r3, [r3, #21]
 800143a:	71fb      	strb	r3, [r7, #7]
		USBReply[4] = TMCL_handle.ActualReply.Value.Byte[3];
 800143c:	4b3d      	ldr	r3, [pc, #244]	; (8001534 <tmcl_processCommand+0x1f8>)
 800143e:	7edb      	ldrb	r3, [r3, #27]
 8001440:	723b      	strb	r3, [r7, #8]
		USBReply[5] = TMCL_handle.ActualReply.Value.Byte[2];
 8001442:	4b3c      	ldr	r3, [pc, #240]	; (8001534 <tmcl_processCommand+0x1f8>)
 8001444:	7e9b      	ldrb	r3, [r3, #26]
 8001446:	727b      	strb	r3, [r7, #9]
		USBReply[6] = TMCL_handle.ActualReply.Value.Byte[1];
 8001448:	4b3a      	ldr	r3, [pc, #232]	; (8001534 <tmcl_processCommand+0x1f8>)
 800144a:	7e5b      	ldrb	r3, [r3, #25]
 800144c:	72bb      	strb	r3, [r7, #10]
		USBReply[7] = TMCL_handle.ActualReply.Value.Byte[0];
 800144e:	4b39      	ldr	r3, [pc, #228]	; (8001534 <tmcl_processCommand+0x1f8>)
 8001450:	7e1b      	ldrb	r3, [r3, #24]
 8001452:	72fb      	strb	r3, [r7, #11]
		USBReply[8] = Checksum;
 8001454:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001458:	733b      	strb	r3, [r7, #12]

		tmcl_transmitt(USBReply, sizeof(USBReply));
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2109      	movs	r1, #9
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fc98 	bl	8000d94 <tmcl_transmitt>
	}

	// reset command state (reply has been send)
	TMCLCommandState = TCS_IDLE;
 8001464:	4b32      	ldr	r3, [pc, #200]	; (8001530 <tmcl_processCommand+0x1f4>)
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
	TMCL_handle.TMCLReplyFormat = RF_STANDARD;
 800146a:	4b32      	ldr	r3, [pc, #200]	; (8001534 <tmcl_processCommand+0x1f8>)
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]

	// last command was a reset?

	/* read next request */
	CMDLen = tmcl_get_data(USBCmd, sizeof(USBCmd));
 8001470:	f107 0310 	add.w	r3, r7, #16
 8001474:	2109      	movs	r1, #9
 8001476:	4618      	mov	r0, r3
 8001478:	f000 f976 	bl	8001768 <tmcl_get_data>
 800147c:	61f8      	str	r0, [r7, #28]
	if(CMDLen == 9) {
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	2b09      	cmp	r3, #9
 8001482:	d13e      	bne.n	8001502 <tmcl_processCommand+0x1c6>
		TMCL_handle.commLoopCounter++;
 8001484:	4b2b      	ldr	r3, [pc, #172]	; (8001534 <tmcl_processCommand+0x1f8>)
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	3301      	adds	r3, #1
 800148a:	4a2a      	ldr	r2, [pc, #168]	; (8001534 <tmcl_processCommand+0x1f8>)
 800148c:	61d3      	str	r3, [r2, #28]

		if(USBCmd[0] == MODULE_ADDRESS) {	 // check address
 800148e:	7c3b      	ldrb	r3, [r7, #16]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d136      	bne.n	8001502 <tmcl_processCommand+0x1c6>

			uint8_t checksum = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			for(i = 0; i < 8; i++) {
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
 800149e:	e00c      	b.n	80014ba <tmcl_processCommand+0x17e>
				checksum += USBCmd[i];
 80014a0:	f107 0210 	add.w	r2, r7, #16
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	4413      	add	r3, r2
 80014a8:	781a      	ldrb	r2, [r3, #0]
 80014aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014ae:	4413      	add	r3, r2
 80014b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			for(i = 0; i < 8; i++) {
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	3301      	adds	r3, #1
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	2b07      	cmp	r3, #7
 80014be:	d9ef      	bls.n	80014a0 <tmcl_processCommand+0x164>
			}

			if(checksum == USBCmd[8]) {  // check checksum
 80014c0:	7e3b      	ldrb	r3, [r7, #24]
 80014c2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d118      	bne.n	80014fc <tmcl_processCommand+0x1c0>

				TMCL_handle.ActualCommand.Opcode = USBCmd[1];
 80014ca:	7c7a      	ldrb	r2, [r7, #17]
 80014cc:	4b19      	ldr	r3, [pc, #100]	; (8001534 <tmcl_processCommand+0x1f8>)
 80014ce:	731a      	strb	r2, [r3, #12]
				TMCL_handle.ActualCommand.Type = USBCmd[2];
 80014d0:	7cba      	ldrb	r2, [r7, #18]
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <tmcl_processCommand+0x1f8>)
 80014d4:	735a      	strb	r2, [r3, #13]
				TMCL_handle.ActualCommand.Motor = USBCmd[3];
 80014d6:	7cfa      	ldrb	r2, [r7, #19]
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <tmcl_processCommand+0x1f8>)
 80014da:	739a      	strb	r2, [r3, #14]
				TMCL_handle.ActualCommand.Value.Byte[3] = USBCmd[4];
 80014dc:	7d3a      	ldrb	r2, [r7, #20]
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <tmcl_processCommand+0x1f8>)
 80014e0:	74da      	strb	r2, [r3, #19]
				TMCL_handle.ActualCommand.Value.Byte[2] = USBCmd[5];
 80014e2:	7d7a      	ldrb	r2, [r7, #21]
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <tmcl_processCommand+0x1f8>)
 80014e6:	749a      	strb	r2, [r3, #18]
				TMCL_handle.ActualCommand.Value.Byte[1] = USBCmd[6];
 80014e8:	7dba      	ldrb	r2, [r7, #22]
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <tmcl_processCommand+0x1f8>)
 80014ec:	745a      	strb	r2, [r3, #17]
				TMCL_handle.ActualCommand.Value.Byte[0] = USBCmd[7];
 80014ee:	7dfa      	ldrb	r2, [r7, #23]
 80014f0:	4b10      	ldr	r3, [pc, #64]	; (8001534 <tmcl_processCommand+0x1f8>)
 80014f2:	741a      	strb	r2, [r3, #16]
				TMCLCommandState = TCS_USB;
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <tmcl_processCommand+0x1f4>)
 80014f6:	2207      	movs	r2, #7
 80014f8:	701a      	strb	r2, [r3, #0]
 80014fa:	e002      	b.n	8001502 <tmcl_processCommand+0x1c6>
			} else {
				TMCLCommandState = TCS_USB_ERROR;  // checksum was wrong
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <tmcl_processCommand+0x1f4>)
 80014fe:	2208      	movs	r2, #8
 8001500:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	// handle request after successful reading
	if(TMCLCommandState != TCS_IDLE && TMCLCommandState != TCS_UART_ERROR && TMCLCommandState != TCS_RS485_ERROR && TMCLCommandState != TCS_USB_ERROR) {
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <tmcl_processCommand+0x1f4>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00d      	beq.n	8001526 <tmcl_processCommand+0x1ea>
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <tmcl_processCommand+0x1f4>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b04      	cmp	r3, #4
 8001510:	d009      	beq.n	8001526 <tmcl_processCommand+0x1ea>
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <tmcl_processCommand+0x1f4>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b06      	cmp	r3, #6
 8001518:	d005      	beq.n	8001526 <tmcl_processCommand+0x1ea>
 800151a:	4b05      	ldr	r3, [pc, #20]	; (8001530 <tmcl_processCommand+0x1f4>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b08      	cmp	r3, #8
 8001520:	d001      	beq.n	8001526 <tmcl_processCommand+0x1ea>
		tmcl_executeActualCommand();
 8001522:	f7ff feb9 	bl	8001298 <tmcl_executeActualCommand>
	}
}
 8001526:	bf00      	nop
 8001528:	3728      	adds	r7, #40	; 0x28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2000025c 	.word	0x2000025c
 8001534:	2000023c 	.word	0x2000023c

08001538 <getVM>:

static const char *VersionString = "0011V307";


int32_t getVM(uint8_t motor)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af02      	add	r7, sp, #8
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
	int32_t rawVMADC = tmc4671_readFieldWithDependency(motor, TMC4671_ADC_RAW_DATA, TMC4671_ADC_RAW_ADDR, 1, TMC4671_ADC_VM_RAW_MASK, TMC4671_ADC_VM_RAW_SHIFT) - VM_ADC_OFFSET;
 8001542:	79f8      	ldrb	r0, [r7, #7]
 8001544:	2300      	movs	r3, #0
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	2301      	movs	r3, #1
 8001550:	2203      	movs	r2, #3
 8001552:	2102      	movs	r1, #2
 8001554:	f000 f9cb 	bl	80018ee <tmc4671_readFieldWithDependency>
 8001558:	4603      	mov	r3, r0
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe ff8e 	bl	800047c <__aeabi_i2d>
 8001560:	a31a      	add	r3, pc, #104	; (adr r3, 80015cc <getVM+0x94>)
 8001562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001566:	f7fe fe3b 	bl	80001e0 <__aeabi_dsub>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff f9ff 	bl	8000974 <__aeabi_d2iz>
 8001576:	4603      	mov	r3, r0
 8001578:	60fb      	str	r3, [r7, #12]
	return ((rawVMADC * (VM_ADC_REF / VM_ADC_RES)) / (VM_DIV_FACTOR)) * 10;
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	f7fe ff7e 	bl	800047c <__aeabi_i2d>
 8001580:	a314      	add	r3, pc, #80	; (adr r3, 80015d4 <getVM+0x9c>)
 8001582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001586:	f7fe ffe3 	bl	8000550 <__aeabi_dmul>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4610      	mov	r0, r2
 8001590:	4619      	mov	r1, r3
 8001592:	a312      	add	r3, pc, #72	; (adr r3, 80015dc <getVM+0xa4>)
 8001594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001598:	f7ff f904 	bl	80007a4 <__aeabi_ddiv>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <getVM+0x90>)
 80015aa:	f7fe ffd1 	bl	8000550 <__aeabi_dmul>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f7ff f9dd 	bl	8000974 <__aeabi_d2iz>
 80015ba:	4603      	mov	r3, r0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	f3af 8000 	nop.w
 80015c8:	40240000 	.word	0x40240000
 80015cc:	00000000 	.word	0x00000000
 80015d0:	40e0c700 	.word	0x40e0c700
 80015d4:	66666666 	.word	0x66666666
 80015d8:	3f126666 	.word	0x3f126666
 80015dc:	96680c5d 	.word	0x96680c5d
 80015e0:	3fabd09c 	.word	0x3fabd09c

080015e4 <tmcl_getVersion>:


void tmcl_getVersion()
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
	uint32_t i;

	if (TMCL_handle.ActualCommand.Type == 0) {
 80015ea:	4b37      	ldr	r3, [pc, #220]	; (80016c8 <tmcl_getVersion+0xe4>)
 80015ec:	7b5b      	ldrb	r3, [r3, #13]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d11a      	bne.n	8001628 <tmcl_getVersion+0x44>
		TMCL_handle.TMCLReplyFormat = RF_SPECIAL;
 80015f2:	4b35      	ldr	r3, [pc, #212]	; (80016c8 <tmcl_getVersion+0xe4>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	701a      	strb	r2, [r3, #0]
		TMCL_handle.SpecialReply[0] = HOST_ADDRESS;
 80015f8:	4b33      	ldr	r3, [pc, #204]	; (80016c8 <tmcl_getVersion+0xe4>)
 80015fa:	2202      	movs	r2, #2
 80015fc:	705a      	strb	r2, [r3, #1]
		for (i = 0; i < 8; i++) {
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	e00d      	b.n	8001620 <tmcl_getVersion+0x3c>
			TMCL_handle.SpecialReply[i + 1] = VersionString[i];
 8001604:	4b31      	ldr	r3, [pc, #196]	; (80016cc <tmcl_getVersion+0xe8>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	441a      	add	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3301      	adds	r3, #1
 8001610:	7811      	ldrb	r1, [r2, #0]
 8001612:	4a2d      	ldr	r2, [pc, #180]	; (80016c8 <tmcl_getVersion+0xe4>)
 8001614:	4413      	add	r3, r2
 8001616:	460a      	mov	r2, r1
 8001618:	705a      	strb	r2, [r3, #1]
		for (i = 0; i < 8; i++) {
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3301      	adds	r3, #1
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b07      	cmp	r3, #7
 8001624:	d9ee      	bls.n	8001604 <tmcl_getVersion+0x20>
		TMCL_handle.ActualReply.Value.Byte[3] = ((VersionString[0] - '0') * 10) + (VersionString[1] - '0');
		TMCL_handle.ActualReply.Value.Byte[2] = ((VersionString[2] - '0') * 10) + (VersionString[3] - '0');
		TMCL_handle.ActualReply.Value.Byte[1] = (VersionString[5] - '0');
		TMCL_handle.ActualReply.Value.Byte[0] = ((VersionString[6] - '0') * 10) + (VersionString[7] - '0');
	}
}
 8001626:	e049      	b.n	80016bc <tmcl_getVersion+0xd8>
	} else if (TMCL_handle.ActualCommand.Type == 1) {
 8001628:	4b27      	ldr	r3, [pc, #156]	; (80016c8 <tmcl_getVersion+0xe4>)
 800162a:	7b5b      	ldrb	r3, [r3, #13]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d145      	bne.n	80016bc <tmcl_getVersion+0xd8>
		TMCL_handle.ActualReply.Value.Byte[3] = ((VersionString[0] - '0') * 10) + (VersionString[1] - '0');
 8001630:	4b26      	ldr	r3, [pc, #152]	; (80016cc <tmcl_getVersion+0xe8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	3b30      	subs	r3, #48	; 0x30
 8001638:	b2db      	uxtb	r3, r3
 800163a:	461a      	mov	r2, r3
 800163c:	0092      	lsls	r2, r2, #2
 800163e:	4413      	add	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	b2da      	uxtb	r2, r3
 8001644:	4b21      	ldr	r3, [pc, #132]	; (80016cc <tmcl_getVersion+0xe8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	3301      	adds	r3, #1
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	4413      	add	r3, r2
 800164e:	b2db      	uxtb	r3, r3
 8001650:	3b30      	subs	r3, #48	; 0x30
 8001652:	b2da      	uxtb	r2, r3
 8001654:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <tmcl_getVersion+0xe4>)
 8001656:	76da      	strb	r2, [r3, #27]
		TMCL_handle.ActualReply.Value.Byte[2] = ((VersionString[2] - '0') * 10) + (VersionString[3] - '0');
 8001658:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <tmcl_getVersion+0xe8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3302      	adds	r3, #2
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	3b30      	subs	r3, #48	; 0x30
 8001662:	b2db      	uxtb	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	0092      	lsls	r2, r2, #2
 8001668:	4413      	add	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4b17      	ldr	r3, [pc, #92]	; (80016cc <tmcl_getVersion+0xe8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	3303      	adds	r3, #3
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	4413      	add	r3, r2
 8001678:	b2db      	uxtb	r3, r3
 800167a:	3b30      	subs	r3, #48	; 0x30
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <tmcl_getVersion+0xe4>)
 8001680:	769a      	strb	r2, [r3, #26]
		TMCL_handle.ActualReply.Value.Byte[1] = (VersionString[5] - '0');
 8001682:	4b12      	ldr	r3, [pc, #72]	; (80016cc <tmcl_getVersion+0xe8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	3305      	adds	r3, #5
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	3b30      	subs	r3, #48	; 0x30
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <tmcl_getVersion+0xe4>)
 8001690:	765a      	strb	r2, [r3, #25]
		TMCL_handle.ActualReply.Value.Byte[0] = ((VersionString[6] - '0') * 10) + (VersionString[7] - '0');
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <tmcl_getVersion+0xe8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	3306      	adds	r3, #6
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	3b30      	subs	r3, #48	; 0x30
 800169c:	b2db      	uxtb	r3, r3
 800169e:	461a      	mov	r2, r3
 80016a0:	0092      	lsls	r2, r2, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <tmcl_getVersion+0xe8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	3307      	adds	r3, #7
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	4413      	add	r3, r2
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	3b30      	subs	r3, #48	; 0x30
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	4b03      	ldr	r3, [pc, #12]	; (80016c8 <tmcl_getVersion+0xe4>)
 80016ba:	761a      	strb	r2, [r3, #24]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	2000023c 	.word	0x2000023c
 80016cc:	20000004 	.word	0x20000004

080016d0 <tmcl_getInput>:

void tmcl_getInput()
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	switch (TMCL_handle.ActualCommand.Type)
 80016d4:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <tmcl_getInput+0x28>)
 80016d6:	7b5b      	ldrb	r3, [r3, #13]
 80016d8:	2b05      	cmp	r3, #5
 80016da:	d106      	bne.n	80016ea <tmcl_getInput+0x1a>
	{
	case 5: // analog_inputs
		TMCL_handle.ActualReply.Value.Int32 = getVM(DEFAULT_MC);
 80016dc:	2005      	movs	r0, #5
 80016de:	f7ff ff2b 	bl	8001538 <getVM>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <tmcl_getInput+0x28>)
 80016e6:	6193      	str	r3, [r2, #24]
		break;
 80016e8:	e003      	b.n	80016f2 <tmcl_getInput+0x22>
	default:
		TMCL_handle.ActualReply.Status = REPLY_INVALID_VALUE;
 80016ea:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <tmcl_getInput+0x28>)
 80016ec:	2204      	movs	r2, #4
 80016ee:	751a      	strb	r2, [r3, #20]
		break;
 80016f0:	bf00      	nop
	}
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2000023c 	.word	0x2000023c

080016fc <tmcl_receive>:
} rx_cmd_buf_t;

static rx_cmd_buf_t rx_cmd_buf;

uint32_t tmcl_receive(uint8_t* Buf, const uint32_t Len)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
	if(Len > sizeof(rx_cmd_buf.RxBufferFS[0])) {
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	2b0a      	cmp	r3, #10
 800170a:	d901      	bls.n	8001710 <tmcl_receive+0x14>
		return 0;
 800170c:	2300      	movs	r3, #0
 800170e:	e024      	b.n	800175a <tmcl_receive+0x5e>
	}

	int index = rx_cmd_buf.pos_receive;
 8001710:	4b14      	ldr	r3, [pc, #80]	; (8001764 <tmcl_receive+0x68>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	60fb      	str	r3, [r7, #12]

	rx_cmd_buf.IsCommandDataReceived = 1;
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <tmcl_receive+0x68>)
 8001718:	2201      	movs	r2, #1
 800171a:	721a      	strb	r2, [r3, #8]
	rx_cmd_buf.CMDLens[index] = Len;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2d9      	uxtb	r1, r3
 8001720:	4a10      	ldr	r2, [pc, #64]	; (8001764 <tmcl_receive+0x68>)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4413      	add	r3, r2
 8001726:	33a9      	adds	r3, #169	; 0xa9
 8001728:	460a      	mov	r2, r1
 800172a:	701a      	strb	r2, [r3, #0]
	memcpy(rx_cmd_buf.RxBufferFS[index], Buf, Len);
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	3308      	adds	r3, #8
 8001738:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <tmcl_receive+0x68>)
 800173a:	4413      	add	r3, r2
 800173c:	3301      	adds	r3, #1
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	4618      	mov	r0, r3
 8001744:	f007 fc54 	bl	8008ff0 <memcpy>
	index = (index + 1) & (RX_CMND_BUF_LEN - 1);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	3301      	adds	r3, #1
 800174c:	f003 030f 	and.w	r3, r3, #15
 8001750:	60fb      	str	r3, [r7, #12]
	rx_cmd_buf.pos_receive = index;
 8001752:	4a04      	ldr	r2, [pc, #16]	; (8001764 <tmcl_receive+0x68>)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6013      	str	r3, [r2, #0]
	return Len;
 8001758:	683b      	ldr	r3, [r7, #0]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000260 	.word	0x20000260

08001768 <tmcl_get_data>:


uint32_t tmcl_get_data(uint8_t *Buf, uint32_t max_len)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
	if(rx_cmd_buf.IsCommandDataReceived == 0) {
 8001772:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <tmcl_get_data+0x7c>)
 8001774:	7a1b      	ldrb	r3, [r3, #8]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <tmcl_get_data+0x16>
		return 0;
 800177a:	2300      	movs	r3, #0
 800177c:	e02d      	b.n	80017da <tmcl_get_data+0x72>
	}

	int index = rx_cmd_buf.pos_process;
 800177e:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <tmcl_get_data+0x7c>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	60fb      	str	r3, [r7, #12]
	const uint32_t read_len = rx_cmd_buf.CMDLens[index];
 8001784:	4a17      	ldr	r2, [pc, #92]	; (80017e4 <tmcl_get_data+0x7c>)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4413      	add	r3, r2
 800178a:	33a9      	adds	r3, #169	; 0xa9
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	60bb      	str	r3, [r7, #8]
	max_len = (read_len > max_len) ? max_len : read_len;
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	4293      	cmp	r3, r2
 8001796:	bf28      	it	cs
 8001798:	4613      	movcs	r3, r2
 800179a:	603b      	str	r3, [r7, #0]

	memcpy(Buf, rx_cmd_buf.RxBufferFS[index], max_len);
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	3308      	adds	r3, #8
 80017a8:	4a0e      	ldr	r2, [pc, #56]	; (80017e4 <tmcl_get_data+0x7c>)
 80017aa:	4413      	add	r3, r2
 80017ac:	3301      	adds	r3, #1
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	4619      	mov	r1, r3
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f007 fc1c 	bl	8008ff0 <memcpy>
	//testing only. make sure there is ending char in the returned command string
	//check if all data were processed.
	index = (index + 1) & (RX_CMND_BUF_LEN - 1);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	3301      	adds	r3, #1
 80017bc:	f003 030f 	and.w	r3, r3, #15
 80017c0:	60fb      	str	r3, [r7, #12]

	if (index == rx_cmd_buf.pos_receive) {
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <tmcl_get_data+0x7c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d102      	bne.n	80017d2 <tmcl_get_data+0x6a>
		rx_cmd_buf.IsCommandDataReceived = 0;
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <tmcl_get_data+0x7c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	721a      	strb	r2, [r3, #8]
	}
	rx_cmd_buf.pos_process = index;
 80017d2:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <tmcl_get_data+0x7c>)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6053      	str	r3, [r2, #4]

	//check if all data were processed
	return max_len;
 80017d8:	683b      	ldr	r3, [r7, #0]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000260 	.word	0x20000260

080017e8 <tmc4671_readInt>:
//extern uint8_t tmc4671_readwriteByte(uint8_t motor, uint8_t data, uint8_t lastTransfer);
// <= SPI wrapper

// spi access
int32_t tmc4671_readInt(uint8_t motor, uint8_t address)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	4603      	mov	r3, r0
 80017f0:	460a      	mov	r2, r1
 80017f2:	71fb      	strb	r3, [r7, #7]
 80017f4:	4613      	mov	r3, r2
 80017f6:	71bb      	strb	r3, [r7, #6]

	int32_t writeBuff = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]
	int32_t readBuff= 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]

	// clear write bit
	address &= 0x7F;
 8001800:	79bb      	ldrb	r3, [r7, #6]
 8001802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001806:	b2db      	uxtb	r3, r3
 8001808:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(CTRL_EN_GPIO_Port, CS_CTRL_Pin, GPIO_PIN_RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	2108      	movs	r1, #8
 800180e:	4812      	ldr	r0, [pc, #72]	; (8001858 <tmc4671_readInt+0x70>)
 8001810:	f000 ffa2 	bl	8002758 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&address, (uint8_t*)&readBuff, sizeof(address), HAL_MAX_DELAY);
 8001814:	f107 0208 	add.w	r2, r7, #8
 8001818:	1db9      	adds	r1, r7, #6
 800181a:	f04f 33ff 	mov.w	r3, #4294967295
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2301      	movs	r3, #1
 8001822:	480e      	ldr	r0, [pc, #56]	; (800185c <tmc4671_readInt+0x74>)
 8001824:	f002 ff0e 	bl	8004644 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeBuff, (uint8_t*)&readBuff, sizeof(readBuff), HAL_MAX_DELAY);
 8001828:	f107 0208 	add.w	r2, r7, #8
 800182c:	f107 010c 	add.w	r1, r7, #12
 8001830:	f04f 33ff 	mov.w	r3, #4294967295
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2304      	movs	r3, #4
 8001838:	4808      	ldr	r0, [pc, #32]	; (800185c <tmc4671_readInt+0x74>)
 800183a:	f002 ff03 	bl	8004644 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(CTRL_EN_GPIO_Port, CS_CTRL_Pin, GPIO_PIN_SET);
 800183e:	2201      	movs	r2, #1
 8001840:	2108      	movs	r1, #8
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <tmc4671_readInt+0x70>)
 8001844:	f000 ff88 	bl	8002758 <HAL_GPIO_WritePin>
    readBuff = __builtin_bswap32(readBuff);
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	ba1b      	rev	r3, r3
 800184c:	60bb      	str	r3, [r7, #8]
	return readBuff;
 800184e:	68bb      	ldr	r3, [r7, #8]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40020000 	.word	0x40020000
 800185c:	20000124 	.word	0x20000124

08001860 <tmc4671_writeInt>:

void tmc4671_writeInt(uint8_t motor, uint8_t address, int32_t value)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af02      	add	r7, sp, #8
 8001866:	4603      	mov	r3, r0
 8001868:	603a      	str	r2, [r7, #0]
 800186a:	71fb      	strb	r3, [r7, #7]
 800186c:	460b      	mov	r3, r1
 800186e:	71bb      	strb	r3, [r7, #6]
	int32_t readBuff= 0;
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]

	// set address
	address = address|0x80;
 8001874:	79bb      	ldrb	r3, [r7, #6]
 8001876:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800187a:	b2db      	uxtb	r3, r3
 800187c:	71bb      	strb	r3, [r7, #6]

	// write value
	value = __builtin_bswap32(value);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	ba1b      	rev	r3, r3
 8001882:	603b      	str	r3, [r7, #0]
    HAL_GPIO_WritePin(CTRL_EN_GPIO_Port, CS_CTRL_Pin, GPIO_PIN_RESET);
 8001884:	2200      	movs	r2, #0
 8001886:	2108      	movs	r1, #8
 8001888:	480f      	ldr	r0, [pc, #60]	; (80018c8 <tmc4671_writeInt+0x68>)
 800188a:	f000 ff65 	bl	8002758 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&address, (uint8_t*)&readBuff, sizeof(address), HAL_MAX_DELAY);
 800188e:	f107 020c 	add.w	r2, r7, #12
 8001892:	1db9      	adds	r1, r7, #6
 8001894:	f04f 33ff 	mov.w	r3, #4294967295
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	2301      	movs	r3, #1
 800189c:	480b      	ldr	r0, [pc, #44]	; (80018cc <tmc4671_writeInt+0x6c>)
 800189e:	f002 fed1 	bl	8004644 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&value, (uint8_t*)&readBuff, sizeof(readBuff), HAL_MAX_DELAY);
 80018a2:	f107 020c 	add.w	r2, r7, #12
 80018a6:	4639      	mov	r1, r7
 80018a8:	f04f 33ff 	mov.w	r3, #4294967295
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2304      	movs	r3, #4
 80018b0:	4806      	ldr	r0, [pc, #24]	; (80018cc <tmc4671_writeInt+0x6c>)
 80018b2:	f002 fec7 	bl	8004644 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(CTRL_EN_GPIO_Port, CS_CTRL_Pin, GPIO_PIN_SET);
 80018b6:	2201      	movs	r2, #1
 80018b8:	2108      	movs	r1, #8
 80018ba:	4803      	ldr	r0, [pc, #12]	; (80018c8 <tmc4671_writeInt+0x68>)
 80018bc:	f000 ff4c 	bl	8002758 <HAL_GPIO_WritePin>
}
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40020000 	.word	0x40020000
 80018cc:	20000124 	.word	0x20000124

080018d0 <tmc4671_getActualPosition>:
{
	tmc4671_writeInt(motor, TMC4671_PID_POSITION_ACTUAL, actualPosition);
}

int32_t tmc4671_getActualPosition(uint8_t motor)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
	return (int32_t) tmc4671_readInt(motor, TMC4671_PID_POSITION_ACTUAL);
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	216b      	movs	r1, #107	; 0x6b
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff ff82 	bl	80017e8 <tmc4671_readInt>
 80018e4:	4603      	mov	r3, r0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <tmc4671_readFieldWithDependency>:
{
	tmc4671_writeInt(motor, TMC4671_PID_POSITION_P_POSITION_I, ((uint32_t)pParameter << 16) | (uint32_t)iParameter);
}

int32_t tmc4671_readFieldWithDependency(uint8_t motor, uint8_t reg, uint8_t dependsReg, uint32_t dependsValue, uint32_t mask, uint8_t shift)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b084      	sub	sp, #16
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
 80018fa:	460b      	mov	r3, r1
 80018fc:	71bb      	strb	r3, [r7, #6]
 80018fe:	4613      	mov	r3, r2
 8001900:	717b      	strb	r3, [r7, #5]
	// remember old depends value
	uint32_t lastDependsValue = tmc4671_readInt(motor, dependsReg);
 8001902:	797a      	ldrb	r2, [r7, #5]
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff6d 	bl	80017e8 <tmc4671_readInt>
 800190e:	4603      	mov	r3, r0
 8001910:	60fb      	str	r3, [r7, #12]

	// set needed depends value
	tmc4671_writeInt(motor, dependsReg, dependsValue);
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	7979      	ldrb	r1, [r7, #5]
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ffa1 	bl	8001860 <tmc4671_writeInt>
	uint32_t value = FIELD_GET(tmc4671_readInt(motor, reg), mask, shift);
 800191e:	79ba      	ldrb	r2, [r7, #6]
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff5f 	bl	80017e8 <tmc4671_readInt>
 800192a:	4603      	mov	r3, r0
 800192c:	461a      	mov	r2, r3
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	401a      	ands	r2, r3
 8001932:	7f3b      	ldrb	r3, [r7, #28]
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
 8001938:	60bb      	str	r3, [r7, #8]

	// set old depends value
	tmc4671_writeInt(motor, dependsReg, lastDependsValue);
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	7979      	ldrb	r1, [r7, #5]
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff8d 	bl	8001860 <tmc4671_writeInt>
	return value;
 8001946:	68bb      	ldr	r3, [r7, #8]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <tmc6100_init>:
// => SPI wrapper
//extern uint8_t tmc6100_readwriteByte(uint8_t motor, uint8_t data, uint8_t lastTransfer);
// <= SPI wrapper

int tmc6100_init(tmc6100_t* drv, SPI_HandleTypeDef* hspi, GPIO_TypeDef* CS_Port, uint16_t CS_Pin)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
 800195c:	807b      	strh	r3, [r7, #2]
	if(drv == NULL || hspi == NULL || CS_Port == NULL) {
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <tmc6100_init+0x20>
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d002      	beq.n	8001970 <tmc6100_init+0x20>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <tmc6100_init+0x24>
		return 1;
 8001970:	2301      	movs	r3, #1
 8001972:	e00f      	b.n	8001994 <tmc6100_init+0x44>
	}

	drv->CS_Pin 	= CS_Pin;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	887a      	ldrh	r2, [r7, #2]
 8001978:	811a      	strh	r2, [r3, #8]
	drv->CS_Port 	= CS_Port;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	605a      	str	r2, [r3, #4]
	drv->hspi 		= hspi;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET); // write CS to High
 8001986:	887b      	ldrh	r3, [r7, #2]
 8001988:	2201      	movs	r2, #1
 800198a:	4619      	mov	r1, r3
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 fee3 	bl	8002758 <HAL_GPIO_WritePin>
	return 0;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <tmc6100_writeInt>:
	readBuff = __builtin_bswap32(readBuff);
	return readBuff;
}

void tmc6100_writeInt(tmc6100_t* drv, uint8_t address, int32_t value)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af02      	add	r7, sp, #8
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	460b      	mov	r3, r1
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	72fb      	strb	r3, [r7, #11]
	int32_t readBuff = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]

	// set address
	address = address | TMC6100_WRITE_BIT;
 80019ae:	7afb      	ldrb	r3, [r7, #11]
 80019b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	72fb      	strb	r3, [r7, #11]

	// write value
	value = __builtin_bswap32(value);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	ba1b      	rev	r3, r3
 80019bc:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(drv->CS_Port, drv->CS_Pin, GPIO_PIN_RESET);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6858      	ldr	r0, [r3, #4]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	891b      	ldrh	r3, [r3, #8]
 80019c6:	2200      	movs	r2, #0
 80019c8:	4619      	mov	r1, r3
 80019ca:	f000 fec5 	bl	8002758 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(drv->hspi, (uint8_t*)&address, (uint8_t*)&readBuff, sizeof(address), HAL_MAX_DELAY);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6818      	ldr	r0, [r3, #0]
 80019d2:	f107 0214 	add.w	r2, r7, #20
 80019d6:	f107 010b 	add.w	r1, r7, #11
 80019da:	f04f 33ff 	mov.w	r3, #4294967295
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	2301      	movs	r3, #1
 80019e2:	f002 fe2f 	bl	8004644 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(drv->hspi, (uint8_t*)&value, (uint8_t*)&readBuff, sizeof(readBuff), HAL_MAX_DELAY);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	f107 0214 	add.w	r2, r7, #20
 80019ee:	1d39      	adds	r1, r7, #4
 80019f0:	f04f 33ff 	mov.w	r3, #4294967295
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2304      	movs	r3, #4
 80019f8:	f002 fe24 	bl	8004644 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(drv->CS_Port, drv->CS_Pin, GPIO_PIN_SET);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6858      	ldr	r0, [r3, #4]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	891b      	ldrh	r3, [r3, #8]
 8001a04:	2201      	movs	r2, #1
 8001a06:	4619      	mov	r1, r3
 8001a08:	f000 fea6 	bl	8002758 <HAL_GPIO_WritePin>
}
 8001a0c:	bf00      	nop
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <StartupConfig>:
#include "TMC6100_Fields.h"
#include "TMC6100.h"

tmc6100_t tmc6100;
void StartupConfig()
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
	// Initialize the driver chip
	tmc6100_init(&tmc6100, &hspi1, CS_DRV_GPIO_Port, CS_DRV_Pin);
 8001a18:	2310      	movs	r3, #16
 8001a1a:	4a1b      	ldr	r2, [pc, #108]	; (8001a88 <StartupConfig+0x74>)
 8001a1c:	491b      	ldr	r1, [pc, #108]	; (8001a8c <StartupConfig+0x78>)
 8001a1e:	481c      	ldr	r0, [pc, #112]	; (8001a90 <StartupConfig+0x7c>)
 8001a20:	f7ff ff96 	bl	8001950 <tmc6100_init>
	tmc6100_writeInt(&tmc6100, TMC6100_GCONF,
 8001a24:	2244      	movs	r2, #68	; 0x44
 8001a26:	2100      	movs	r1, #0
 8001a28:	4819      	ldr	r0, [pc, #100]	; (8001a90 <StartupConfig+0x7c>)
 8001a2a:	f7ff ffb7 	bl	800199c <tmc6100_writeInt>
			(0 << TMC6100_DISABLE_SHIFT)      | // Enable
			(0 << TMC6100_SINGLELINE_SHIFT)   | // Use individual L+H signals
			(1 << TMC6100_FAULTDIRECT_SHIFT)  | // Fault output shows each protective action
			(1 << TMC6100_CURRENT_ZERO_SHIFT) | // Disable current amplifier;
			(0 << TMC6100_TEST_MODE_SHIFT));
	tmc6100_writeInt(&tmc6100, TMC6100_GSTAT, 		0x00);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2101      	movs	r1, #1
 8001a32:	4817      	ldr	r0, [pc, #92]	; (8001a90 <StartupConfig+0x7c>)
 8001a34:	f7ff ffb2 	bl	800199c <tmc6100_writeInt>
	tmc6100_writeInt(&tmc6100, TMC6100_DRV_CONF, 	0x04);
 8001a38:	2204      	movs	r2, #4
 8001a3a:	210a      	movs	r1, #10
 8001a3c:	4814      	ldr	r0, [pc, #80]	; (8001a90 <StartupConfig+0x7c>)
 8001a3e:	f7ff ffad 	bl	800199c <tmc6100_writeInt>
	//================================================================================
	//Prototype motor init and movement START
	//================================================================================

	// Motor type &  PWM configuration
	tmc4671_writeInt(0, TMC4671_MOTOR_TYPE_N_POLE_PAIRS,
 8001a42:	f04f 1203 	mov.w	r2, #196611	; 0x30003
 8001a46:	211b      	movs	r1, #27
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f7ff ff09 	bl	8001860 <tmc4671_writeInt>
			(0x03 << TMC4671_N_POLE_PAIRS_SHIFT) | 	//3 pole pairs
			(0x03 << TMC4671_MOTOR_TYPE_SHIFT)); 	//Three phase BLDC
	tmc4671_writeInt(0, TMC4671_PWM_POLARITIES, 	0x00000000);	//low and low
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2117      	movs	r1, #23
 8001a52:	2000      	movs	r0, #0
 8001a54:	f7ff ff04 	bl	8001860 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_PWM_MAXCNT, 		0x00000F9F);	//3999 for 25kHz ( fPWM[Hz] = 100MHz/(PWM_MAXCNT+1) )
 8001a58:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001a5c:	2118      	movs	r1, #24
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f7ff fefe 	bl	8001860 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_PWM_BBM_H_BBM_L, 	0x00005050);	//80 * 10ns for 800ns; first two digits for Low, second two for High deadtime
 8001a64:	f245 0250 	movw	r2, #20560	; 0x5050
 8001a68:	2119      	movs	r1, #25
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f7ff fef8 	bl	8001860 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_PWM_SV_CHOP, 		0x00000007);	//FOC PWM Enabled with SVM disabled; 0x00000107 for SVM
 8001a70:	2207      	movs	r2, #7
 8001a72:	211a      	movs	r1, #26
 8001a74:	2000      	movs	r0, #0
 8001a76:	f7ff fef3 	bl	8001860 <tmc4671_writeInt>

	HAL_GPIO_WritePin(CTRL_EN_GPIO_Port, CTRL_EN_Pin, GPIO_PIN_SET);			//Enable TMC4671
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	2104      	movs	r1, #4
 8001a7e:	4802      	ldr	r0, [pc, #8]	; (8001a88 <StartupConfig+0x74>)
 8001a80:	f000 fe6a 	bl	8002758 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(GPIOA, TMC_OK_LED_Pin, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(GPIOC, FAULT_LED_Pin, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(GPIOF, DEBUG_LED_Pin, GPIO_PIN_SET);
	//start new testing procedure

}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	20000124 	.word	0x20000124
 8001a90:	2000031c 	.word	0x2000031c

08001a94 <openloop_test_drive>:

void openloop_test_drive(uint32_t UQ_UD_target)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	// Open loop settings -------------------------------------------------------------------------------------
	// Feedback selection
	tmc4671_writeInt(0, TMC4671_PHI_E_SELECTION, 		0x00000002); 	//set to phi_e_openloop
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	2152      	movs	r1, #82	; 0x52
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f7ff fedd 	bl	8001860 <tmc4671_writeInt>
	// Switch to open loop velocity mode
	tmc4671_writeInt(0, TMC4671_MODE_RAMP_MODE_MOTION, 	0x00000008); 	// set to uq_ud_ext mode
 8001aa6:	2208      	movs	r2, #8
 8001aa8:	2163      	movs	r1, #99	; 0x63
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f7ff fed8 	bl	8001860 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_UQ_UD_EXT,
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	2124      	movs	r1, #36	; 0x24
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f7ff fed3 	bl	8001860 <tmc4671_writeInt>
			(0x01 << TMC4671_UD_EXT_SHIFT) | 							// UD_EXT = 1
			(0x00 << TMC4671_UQ_EXT_SHIFT));							// UQ_EXT = 0
	tmc4671_writeInt(0, TMC4671_OPENLOOP_ACCELERATION, 	0x0000003C);	// set open loop acceleration to 60 rpm/s
 8001aba:	223c      	movs	r2, #60	; 0x3c
 8001abc:	2120      	movs	r1, #32
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f7ff fece 	bl	8001860 <tmc4671_writeInt>
	//tmc4671_writeInt(0, TMC4671_OPENLOOP_VELOCITY_TARGET, -30);			// set velocity to -30 rpm
	//tmc4671_writeInt(0, TMC4671_OPENLOOP_MODE, 			0x00000000);	// direction - positive
	HAL_Delay(100);
 8001ac4:	2064      	movs	r0, #100	; 0x64
 8001ac6:	f000 f881 	bl	8001bcc <HAL_Delay>
	tmc4671_writeInt(0, TMC4671_OPENLOOP_VELOCITY_TARGET, 	100);
 8001aca:	2264      	movs	r2, #100	; 0x64
 8001acc:	2121      	movs	r1, #33	; 0x21
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f7ff fec6 	bl	8001860 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_UQ_UD_EXT, 					0x0FA00000);
 8001ad4:	f04f 627a 	mov.w	r2, #262144000	; 0xfa00000
 8001ad8:	2124      	movs	r1, #36	; 0x24
 8001ada:	2000      	movs	r0, #0
 8001adc:	f7ff fec0 	bl	8001860 <tmc4671_writeInt>
////	HAL_Delay(2000);
//	// Stop
//	//tmc4671_writeInt(0, TMC4671_OPENLOOP_VELOCITY_TARGET, 0x00000000);
////	HAL_Delay(1000);
////	tmc4671_writeInt(0, TMC4671_UQ_UD_EXT, 0x00000000);
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001aec:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <HAL_Init+0x40>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0d      	ldr	r2, [pc, #52]	; (8001b28 <HAL_Init+0x40>)
 8001af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_Init+0x40>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <HAL_Init+0x40>)
 8001afe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <HAL_Init+0x40>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a07      	ldr	r2, [pc, #28]	; (8001b28 <HAL_Init+0x40>)
 8001b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b10:	2003      	movs	r0, #3
 8001b12:	f000 f94f 	bl	8001db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b16:	200f      	movs	r0, #15
 8001b18:	f000 f808 	bl	8001b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b1c:	f7ff fb04 	bl	8001128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40023c00 	.word	0x40023c00

08001b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_InitTick+0x54>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_InitTick+0x58>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 f967 	bl	8001e1e <HAL_SYSTICK_Config>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e00e      	b.n	8001b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b0f      	cmp	r3, #15
 8001b5e:	d80a      	bhi.n	8001b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b60:	2200      	movs	r2, #0
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	f04f 30ff 	mov.w	r0, #4294967295
 8001b68:	f000 f92f 	bl	8001dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b6c:	4a06      	ldr	r2, [pc, #24]	; (8001b88 <HAL_InitTick+0x5c>)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	e000      	b.n	8001b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000000 	.word	0x20000000
 8001b84:	2000000c 	.word	0x2000000c
 8001b88:	20000008 	.word	0x20000008

08001b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_IncTick+0x20>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	461a      	mov	r2, r3
 8001b96:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <HAL_IncTick+0x24>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	4a04      	ldr	r2, [pc, #16]	; (8001bb0 <HAL_IncTick+0x24>)
 8001b9e:	6013      	str	r3, [r2, #0]
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	2000000c 	.word	0x2000000c
 8001bb0:	20000328 	.word	0x20000328

08001bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb8:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <HAL_GetTick+0x14>)
 8001bba:	681b      	ldr	r3, [r3, #0]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	20000328 	.word	0x20000328

08001bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd4:	f7ff ffee 	bl	8001bb4 <HAL_GetTick>
 8001bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be4:	d005      	beq.n	8001bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_Delay+0x44>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4413      	add	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bf2:	bf00      	nop
 8001bf4:	f7ff ffde 	bl	8001bb4 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d8f7      	bhi.n	8001bf4 <HAL_Delay+0x28>
  {
  }
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	2000000c 	.word	0x2000000c

08001c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <__NVIC_SetPriorityGrouping+0x44>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c30:	4013      	ands	r3, r2
 8001c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c46:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <__NVIC_SetPriorityGrouping+0x44>)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	60d3      	str	r3, [r2, #12]
}
 8001c4c:	bf00      	nop
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <__NVIC_GetPriorityGrouping+0x18>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	0a1b      	lsrs	r3, r3, #8
 8001c66:	f003 0307 	and.w	r3, r3, #7
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	db0b      	blt.n	8001ca2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	f003 021f 	and.w	r2, r3, #31
 8001c90:	4907      	ldr	r1, [pc, #28]	; (8001cb0 <__NVIC_EnableIRQ+0x38>)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	095b      	lsrs	r3, r3, #5
 8001c98:	2001      	movs	r0, #1
 8001c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000e100 	.word	0xe000e100

08001cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	6039      	str	r1, [r7, #0]
 8001cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	db0a      	blt.n	8001cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	490c      	ldr	r1, [pc, #48]	; (8001d00 <__NVIC_SetPriority+0x4c>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	0112      	lsls	r2, r2, #4
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cdc:	e00a      	b.n	8001cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4908      	ldr	r1, [pc, #32]	; (8001d04 <__NVIC_SetPriority+0x50>)
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	3b04      	subs	r3, #4
 8001cec:	0112      	lsls	r2, r2, #4
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	761a      	strb	r2, [r3, #24]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000e100 	.word	0xe000e100
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	; 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f1c3 0307 	rsb	r3, r3, #7
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	bf28      	it	cs
 8001d26:	2304      	movcs	r3, #4
 8001d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	2b06      	cmp	r3, #6
 8001d30:	d902      	bls.n	8001d38 <NVIC_EncodePriority+0x30>
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3b03      	subs	r3, #3
 8001d36:	e000      	b.n	8001d3a <NVIC_EncodePriority+0x32>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43da      	mvns	r2, r3
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5a:	43d9      	mvns	r1, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	4313      	orrs	r3, r2
         );
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3724      	adds	r7, #36	; 0x24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d80:	d301      	bcc.n	8001d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00f      	b.n	8001da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d86:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <SysTick_Config+0x40>)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d8e:	210f      	movs	r1, #15
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295
 8001d94:	f7ff ff8e 	bl	8001cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <SysTick_Config+0x40>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9e:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <SysTick_Config+0x40>)
 8001da0:	2207      	movs	r2, #7
 8001da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	e000e010 	.word	0xe000e010

08001db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff ff29 	bl	8001c14 <__NVIC_SetPriorityGrouping>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ddc:	f7ff ff3e 	bl	8001c5c <__NVIC_GetPriorityGrouping>
 8001de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	6978      	ldr	r0, [r7, #20]
 8001de8:	f7ff ff8e 	bl	8001d08 <NVIC_EncodePriority>
 8001dec:	4602      	mov	r2, r0
 8001dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff5d 	bl	8001cb4 <__NVIC_SetPriority>
}
 8001dfa:	bf00      	nop
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	4603      	mov	r3, r0
 8001e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff31 	bl	8001c78 <__NVIC_EnableIRQ>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ffa2 	bl	8001d70 <SysTick_Config>
 8001e2c:	4603      	mov	r3, r0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e44:	f7ff feb6 	bl	8001bb4 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e099      	b.n	8001f88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2202      	movs	r2, #2
 8001e58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0201 	bic.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e74:	e00f      	b.n	8001e96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e76:	f7ff fe9d 	bl	8001bb4 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b05      	cmp	r3, #5
 8001e82:	d908      	bls.n	8001e96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2220      	movs	r2, #32
 8001e88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e078      	b.n	8001f88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1e8      	bne.n	8001e76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	4b38      	ldr	r3, [pc, #224]	; (8001f90 <HAL_DMA_Init+0x158>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ec2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ece:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d107      	bne.n	8001f00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f023 0307 	bic.w	r3, r3, #7
 8001f16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d117      	bne.n	8001f5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00e      	beq.n	8001f5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 fa0b 	bl	8002358 <DMA_CheckFifoParam>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2240      	movs	r2, #64	; 0x40
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f56:	2301      	movs	r3, #1
 8001f58:	e016      	b.n	8001f88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f9c2 	bl	80022ec <DMA_CalcBaseAndBitshift>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f70:	223f      	movs	r2, #63	; 0x3f
 8001f72:	409a      	lsls	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	f010803f 	.word	0xf010803f

08001f94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d004      	beq.n	8001fb2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2280      	movs	r2, #128	; 0x80
 8001fac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e00c      	b.n	8001fcc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2205      	movs	r2, #5
 8001fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0201 	bic.w	r2, r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fe4:	4b8e      	ldr	r3, [pc, #568]	; (8002220 <HAL_DMA_IRQHandler+0x248>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a8e      	ldr	r2, [pc, #568]	; (8002224 <HAL_DMA_IRQHandler+0x24c>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	0a9b      	lsrs	r3, r3, #10
 8001ff0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002002:	2208      	movs	r2, #8
 8002004:	409a      	lsls	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4013      	ands	r3, r2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d01a      	beq.n	8002044 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	d013      	beq.n	8002044 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0204 	bic.w	r2, r2, #4
 800202a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002030:	2208      	movs	r2, #8
 8002032:	409a      	lsls	r2, r3
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203c:	f043 0201 	orr.w	r2, r3, #1
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002048:	2201      	movs	r2, #1
 800204a:	409a      	lsls	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4013      	ands	r3, r2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d012      	beq.n	800207a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00b      	beq.n	800207a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002066:	2201      	movs	r2, #1
 8002068:	409a      	lsls	r2, r3
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002072:	f043 0202 	orr.w	r2, r3, #2
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207e:	2204      	movs	r2, #4
 8002080:	409a      	lsls	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4013      	ands	r3, r2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d012      	beq.n	80020b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00b      	beq.n	80020b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209c:	2204      	movs	r2, #4
 800209e:	409a      	lsls	r2, r3
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a8:	f043 0204 	orr.w	r2, r3, #4
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b4:	2210      	movs	r2, #16
 80020b6:	409a      	lsls	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d043      	beq.n	8002148 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d03c      	beq.n	8002148 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d2:	2210      	movs	r2, #16
 80020d4:	409a      	lsls	r2, r3
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d018      	beq.n	800211a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d108      	bne.n	8002108 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d024      	beq.n	8002148 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	4798      	blx	r3
 8002106:	e01f      	b.n	8002148 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800210c:	2b00      	cmp	r3, #0
 800210e:	d01b      	beq.n	8002148 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	4798      	blx	r3
 8002118:	e016      	b.n	8002148 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002124:	2b00      	cmp	r3, #0
 8002126:	d107      	bne.n	8002138 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0208 	bic.w	r2, r2, #8
 8002136:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214c:	2220      	movs	r2, #32
 800214e:	409a      	lsls	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 808f 	beq.w	8002278 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 8087 	beq.w	8002278 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216e:	2220      	movs	r2, #32
 8002170:	409a      	lsls	r2, r3
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b05      	cmp	r3, #5
 8002180:	d136      	bne.n	80021f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0216 	bic.w	r2, r2, #22
 8002190:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695a      	ldr	r2, [r3, #20]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d103      	bne.n	80021b2 <HAL_DMA_IRQHandler+0x1da>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d007      	beq.n	80021c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0208 	bic.w	r2, r2, #8
 80021c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c6:	223f      	movs	r2, #63	; 0x3f
 80021c8:	409a      	lsls	r2, r3
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d07e      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	4798      	blx	r3
        }
        return;
 80021ee:	e079      	b.n	80022e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d01d      	beq.n	800223a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10d      	bne.n	8002228 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002210:	2b00      	cmp	r3, #0
 8002212:	d031      	beq.n	8002278 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	4798      	blx	r3
 800221c:	e02c      	b.n	8002278 <HAL_DMA_IRQHandler+0x2a0>
 800221e:	bf00      	nop
 8002220:	20000000 	.word	0x20000000
 8002224:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222c:	2b00      	cmp	r3, #0
 800222e:	d023      	beq.n	8002278 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	4798      	blx	r3
 8002238:	e01e      	b.n	8002278 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10f      	bne.n	8002268 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0210 	bic.w	r2, r2, #16
 8002256:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227c:	2b00      	cmp	r3, #0
 800227e:	d032      	beq.n	80022e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b00      	cmp	r3, #0
 800228a:	d022      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2205      	movs	r2, #5
 8002290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0201 	bic.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	3301      	adds	r3, #1
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d307      	bcc.n	80022c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f2      	bne.n	80022a4 <HAL_DMA_IRQHandler+0x2cc>
 80022be:	e000      	b.n	80022c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d005      	beq.n	80022e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	4798      	blx	r3
 80022e2:	e000      	b.n	80022e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80022e4:	bf00      	nop
    }
  }
}
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	3b10      	subs	r3, #16
 80022fc:	4a14      	ldr	r2, [pc, #80]	; (8002350 <DMA_CalcBaseAndBitshift+0x64>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	091b      	lsrs	r3, r3, #4
 8002304:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002306:	4a13      	ldr	r2, [pc, #76]	; (8002354 <DMA_CalcBaseAndBitshift+0x68>)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4413      	add	r3, r2
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b03      	cmp	r3, #3
 8002318:	d909      	bls.n	800232e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002322:	f023 0303 	bic.w	r3, r3, #3
 8002326:	1d1a      	adds	r2, r3, #4
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	659a      	str	r2, [r3, #88]	; 0x58
 800232c:	e007      	b.n	800233e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002336:	f023 0303 	bic.w	r3, r3, #3
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	aaaaaaab 	.word	0xaaaaaaab
 8002354:	08009070 	.word	0x08009070

08002358 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002368:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d11f      	bne.n	80023b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b03      	cmp	r3, #3
 8002376:	d856      	bhi.n	8002426 <DMA_CheckFifoParam+0xce>
 8002378:	a201      	add	r2, pc, #4	; (adr r2, 8002380 <DMA_CheckFifoParam+0x28>)
 800237a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237e:	bf00      	nop
 8002380:	08002391 	.word	0x08002391
 8002384:	080023a3 	.word	0x080023a3
 8002388:	08002391 	.word	0x08002391
 800238c:	08002427 	.word	0x08002427
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d046      	beq.n	800242a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a0:	e043      	b.n	800242a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023aa:	d140      	bne.n	800242e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023b0:	e03d      	b.n	800242e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ba:	d121      	bne.n	8002400 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d837      	bhi.n	8002432 <DMA_CheckFifoParam+0xda>
 80023c2:	a201      	add	r2, pc, #4	; (adr r2, 80023c8 <DMA_CheckFifoParam+0x70>)
 80023c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c8:	080023d9 	.word	0x080023d9
 80023cc:	080023df 	.word	0x080023df
 80023d0:	080023d9 	.word	0x080023d9
 80023d4:	080023f1 	.word	0x080023f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
      break;
 80023dc:	e030      	b.n	8002440 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d025      	beq.n	8002436 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ee:	e022      	b.n	8002436 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023f8:	d11f      	bne.n	800243a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023fe:	e01c      	b.n	800243a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d903      	bls.n	800240e <DMA_CheckFifoParam+0xb6>
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b03      	cmp	r3, #3
 800240a:	d003      	beq.n	8002414 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800240c:	e018      	b.n	8002440 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	73fb      	strb	r3, [r7, #15]
      break;
 8002412:	e015      	b.n	8002440 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00e      	beq.n	800243e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	73fb      	strb	r3, [r7, #15]
      break;
 8002424:	e00b      	b.n	800243e <DMA_CheckFifoParam+0xe6>
      break;
 8002426:	bf00      	nop
 8002428:	e00a      	b.n	8002440 <DMA_CheckFifoParam+0xe8>
      break;
 800242a:	bf00      	nop
 800242c:	e008      	b.n	8002440 <DMA_CheckFifoParam+0xe8>
      break;
 800242e:	bf00      	nop
 8002430:	e006      	b.n	8002440 <DMA_CheckFifoParam+0xe8>
      break;
 8002432:	bf00      	nop
 8002434:	e004      	b.n	8002440 <DMA_CheckFifoParam+0xe8>
      break;
 8002436:	bf00      	nop
 8002438:	e002      	b.n	8002440 <DMA_CheckFifoParam+0xe8>
      break;   
 800243a:	bf00      	nop
 800243c:	e000      	b.n	8002440 <DMA_CheckFifoParam+0xe8>
      break;
 800243e:	bf00      	nop
    }
  } 
  
  return status; 
 8002440:	7bfb      	ldrb	r3, [r7, #15]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop

08002450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002450:	b480      	push	{r7}
 8002452:	b089      	sub	sp, #36	; 0x24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002462:	2300      	movs	r3, #0
 8002464:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	e159      	b.n	8002720 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800246c:	2201      	movs	r2, #1
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	4013      	ands	r3, r2
 800247e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	429a      	cmp	r2, r3
 8002486:	f040 8148 	bne.w	800271a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	2b01      	cmp	r3, #1
 8002494:	d005      	beq.n	80024a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d130      	bne.n	8002504 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	2203      	movs	r2, #3
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4013      	ands	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024d8:	2201      	movs	r2, #1
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	091b      	lsrs	r3, r3, #4
 80024ee:	f003 0201 	and.w	r2, r3, #1
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	2b03      	cmp	r3, #3
 800250e:	d017      	beq.n	8002540 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	2203      	movs	r2, #3
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d123      	bne.n	8002594 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	08da      	lsrs	r2, r3, #3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3208      	adds	r2, #8
 8002554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002558:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	220f      	movs	r2, #15
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	691a      	ldr	r2, [r3, #16]
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	08da      	lsrs	r2, r3, #3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3208      	adds	r2, #8
 800258e:	69b9      	ldr	r1, [r7, #24]
 8002590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	2203      	movs	r2, #3
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 0203 	and.w	r2, r3, #3
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 80a2 	beq.w	800271a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	4b57      	ldr	r3, [pc, #348]	; (8002738 <HAL_GPIO_Init+0x2e8>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	4a56      	ldr	r2, [pc, #344]	; (8002738 <HAL_GPIO_Init+0x2e8>)
 80025e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e4:	6453      	str	r3, [r2, #68]	; 0x44
 80025e6:	4b54      	ldr	r3, [pc, #336]	; (8002738 <HAL_GPIO_Init+0x2e8>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025f2:	4a52      	ldr	r2, [pc, #328]	; (800273c <HAL_GPIO_Init+0x2ec>)
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	089b      	lsrs	r3, r3, #2
 80025f8:	3302      	adds	r3, #2
 80025fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	220f      	movs	r2, #15
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43db      	mvns	r3, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4013      	ands	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a49      	ldr	r2, [pc, #292]	; (8002740 <HAL_GPIO_Init+0x2f0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d019      	beq.n	8002652 <HAL_GPIO_Init+0x202>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a48      	ldr	r2, [pc, #288]	; (8002744 <HAL_GPIO_Init+0x2f4>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d013      	beq.n	800264e <HAL_GPIO_Init+0x1fe>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a47      	ldr	r2, [pc, #284]	; (8002748 <HAL_GPIO_Init+0x2f8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00d      	beq.n	800264a <HAL_GPIO_Init+0x1fa>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a46      	ldr	r2, [pc, #280]	; (800274c <HAL_GPIO_Init+0x2fc>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d007      	beq.n	8002646 <HAL_GPIO_Init+0x1f6>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a45      	ldr	r2, [pc, #276]	; (8002750 <HAL_GPIO_Init+0x300>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d101      	bne.n	8002642 <HAL_GPIO_Init+0x1f2>
 800263e:	2304      	movs	r3, #4
 8002640:	e008      	b.n	8002654 <HAL_GPIO_Init+0x204>
 8002642:	2307      	movs	r3, #7
 8002644:	e006      	b.n	8002654 <HAL_GPIO_Init+0x204>
 8002646:	2303      	movs	r3, #3
 8002648:	e004      	b.n	8002654 <HAL_GPIO_Init+0x204>
 800264a:	2302      	movs	r3, #2
 800264c:	e002      	b.n	8002654 <HAL_GPIO_Init+0x204>
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <HAL_GPIO_Init+0x204>
 8002652:	2300      	movs	r3, #0
 8002654:	69fa      	ldr	r2, [r7, #28]
 8002656:	f002 0203 	and.w	r2, r2, #3
 800265a:	0092      	lsls	r2, r2, #2
 800265c:	4093      	lsls	r3, r2
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4313      	orrs	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002664:	4935      	ldr	r1, [pc, #212]	; (800273c <HAL_GPIO_Init+0x2ec>)
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	089b      	lsrs	r3, r3, #2
 800266a:	3302      	adds	r3, #2
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002672:	4b38      	ldr	r3, [pc, #224]	; (8002754 <HAL_GPIO_Init+0x304>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002696:	4a2f      	ldr	r2, [pc, #188]	; (8002754 <HAL_GPIO_Init+0x304>)
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800269c:	4b2d      	ldr	r3, [pc, #180]	; (8002754 <HAL_GPIO_Init+0x304>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026c0:	4a24      	ldr	r2, [pc, #144]	; (8002754 <HAL_GPIO_Init+0x304>)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026c6:	4b23      	ldr	r3, [pc, #140]	; (8002754 <HAL_GPIO_Init+0x304>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ea:	4a1a      	ldr	r2, [pc, #104]	; (8002754 <HAL_GPIO_Init+0x304>)
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026f0:	4b18      	ldr	r3, [pc, #96]	; (8002754 <HAL_GPIO_Init+0x304>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002714:	4a0f      	ldr	r2, [pc, #60]	; (8002754 <HAL_GPIO_Init+0x304>)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3301      	adds	r3, #1
 800271e:	61fb      	str	r3, [r7, #28]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	2b0f      	cmp	r3, #15
 8002724:	f67f aea2 	bls.w	800246c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002728:	bf00      	nop
 800272a:	bf00      	nop
 800272c:	3724      	adds	r7, #36	; 0x24
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800
 800273c:	40013800 	.word	0x40013800
 8002740:	40020000 	.word	0x40020000
 8002744:	40020400 	.word	0x40020400
 8002748:	40020800 	.word	0x40020800
 800274c:	40020c00 	.word	0x40020c00
 8002750:	40021000 	.word	0x40021000
 8002754:	40013c00 	.word	0x40013c00

08002758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	807b      	strh	r3, [r7, #2]
 8002764:	4613      	mov	r3, r2
 8002766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002768:	787b      	ldrb	r3, [r7, #1]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800276e:	887a      	ldrh	r2, [r7, #2]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002774:	e003      	b.n	800277e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002776:	887b      	ldrh	r3, [r7, #2]
 8002778:	041a      	lsls	r2, r3, #16
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	619a      	str	r2, [r3, #24]
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800278a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800278c:	b08f      	sub	sp, #60	; 0x3c
 800278e:	af0a      	add	r7, sp, #40	; 0x28
 8002790:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e10f      	b.n	80029bc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f006 f8e4 	bl	8008984 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2203      	movs	r2, #3
 80027c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d102      	bne.n	80027d6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f002 fbc5 	bl	8004f6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	603b      	str	r3, [r7, #0]
 80027e6:	687e      	ldr	r6, [r7, #4]
 80027e8:	466d      	mov	r5, sp
 80027ea:	f106 0410 	add.w	r4, r6, #16
 80027ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80027fe:	1d33      	adds	r3, r6, #4
 8002800:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002802:	6838      	ldr	r0, [r7, #0]
 8002804:	f002 fa9c 	bl	8004d40 <USB_CoreInit>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d005      	beq.n	800281a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2202      	movs	r2, #2
 8002812:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e0d0      	b.n	80029bc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2100      	movs	r1, #0
 8002820:	4618      	mov	r0, r3
 8002822:	f002 fbb3 	bl	8004f8c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002826:	2300      	movs	r3, #0
 8002828:	73fb      	strb	r3, [r7, #15]
 800282a:	e04a      	b.n	80028c2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800282c:	7bfa      	ldrb	r2, [r7, #15]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	333d      	adds	r3, #61	; 0x3d
 800283c:	2201      	movs	r2, #1
 800283e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002840:	7bfa      	ldrb	r2, [r7, #15]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	333c      	adds	r3, #60	; 0x3c
 8002850:	7bfa      	ldrb	r2, [r7, #15]
 8002852:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002854:	7bfa      	ldrb	r2, [r7, #15]
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	b298      	uxth	r0, r3
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4413      	add	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	3344      	adds	r3, #68	; 0x44
 8002868:	4602      	mov	r2, r0
 800286a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800286c:	7bfa      	ldrb	r2, [r7, #15]
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4413      	add	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	3340      	adds	r3, #64	; 0x40
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002880:	7bfa      	ldrb	r2, [r7, #15]
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4413      	add	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	3348      	adds	r3, #72	; 0x48
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002894:	7bfa      	ldrb	r2, [r7, #15]
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	334c      	adds	r3, #76	; 0x4c
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028a8:	7bfa      	ldrb	r2, [r7, #15]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4413      	add	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	3354      	adds	r3, #84	; 0x54
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	3301      	adds	r3, #1
 80028c0:	73fb      	strb	r3, [r7, #15]
 80028c2:	7bfa      	ldrb	r2, [r7, #15]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d3af      	bcc.n	800282c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028cc:	2300      	movs	r3, #0
 80028ce:	73fb      	strb	r3, [r7, #15]
 80028d0:	e044      	b.n	800295c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028d2:	7bfa      	ldrb	r2, [r7, #15]
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4413      	add	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028e8:	7bfa      	ldrb	r2, [r7, #15]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4413      	add	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80028fa:	7bfa      	ldrb	r2, [r7, #15]
 80028fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028fe:	7bfa      	ldrb	r2, [r7, #15]
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002910:	2200      	movs	r2, #0
 8002912:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002914:	7bfa      	ldrb	r2, [r7, #15]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4413      	add	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800292a:	7bfa      	ldrb	r2, [r7, #15]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	4413      	add	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002956:	7bfb      	ldrb	r3, [r7, #15]
 8002958:	3301      	adds	r3, #1
 800295a:	73fb      	strb	r3, [r7, #15]
 800295c:	7bfa      	ldrb	r2, [r7, #15]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	429a      	cmp	r2, r3
 8002964:	d3b5      	bcc.n	80028d2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	687e      	ldr	r6, [r7, #4]
 800296e:	466d      	mov	r5, sp
 8002970:	f106 0410 	add.w	r4, r6, #16
 8002974:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002976:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002978:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800297a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800297c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002980:	e885 0003 	stmia.w	r5, {r0, r1}
 8002984:	1d33      	adds	r3, r6, #4
 8002986:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002988:	6838      	ldr	r0, [r7, #0]
 800298a:	f002 fb4b 	bl	8005024 <USB_DevInit>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e00d      	b.n	80029bc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f003 fc9a 	bl	80062ee <USB_DevDisconnect>

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029c4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d101      	bne.n	80029e0 <HAL_PCD_Start+0x1c>
 80029dc:	2302      	movs	r3, #2
 80029de:	e020      	b.n	8002a22 <HAL_PCD_Start+0x5e>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d109      	bne.n	8002a04 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d005      	beq.n	8002a04 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f002 fa9d 	bl	8004f48 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f003 fc4a 	bl	80062ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a2a:	b590      	push	{r4, r7, lr}
 8002a2c:	b08d      	sub	sp, #52	; 0x34
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f003 fd08 	bl	8006456 <USB_GetMode>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f040 848a 	bne.w	8003362 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f003 fc6c 	bl	8006330 <USB_ReadInterrupts>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 8480 	beq.w	8003360 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	0a1b      	lsrs	r3, r3, #8
 8002a6a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f003 fc59 	bl	8006330 <USB_ReadInterrupts>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d107      	bne.n	8002a98 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695a      	ldr	r2, [r3, #20]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f002 0202 	and.w	r2, r2, #2
 8002a96:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f003 fc47 	bl	8006330 <USB_ReadInterrupts>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	2b10      	cmp	r3, #16
 8002aaa:	d161      	bne.n	8002b70 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699a      	ldr	r2, [r3, #24]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0210 	bic.w	r2, r2, #16
 8002aba:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	f003 020f 	and.w	r2, r3, #15
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3304      	adds	r3, #4
 8002ada:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	0c5b      	lsrs	r3, r3, #17
 8002ae0:	f003 030f 	and.w	r3, r3, #15
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d124      	bne.n	8002b32 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002aee:	4013      	ands	r3, r2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d035      	beq.n	8002b60 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	091b      	lsrs	r3, r3, #4
 8002afc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002afe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	461a      	mov	r2, r3
 8002b06:	6a38      	ldr	r0, [r7, #32]
 8002b08:	f003 fa7e 	bl	8006008 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	091b      	lsrs	r3, r3, #4
 8002b14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b18:	441a      	add	r2, r3
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	6a1a      	ldr	r2, [r3, #32]
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b2a:	441a      	add	r2, r3
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	621a      	str	r2, [r3, #32]
 8002b30:	e016      	b.n	8002b60 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	0c5b      	lsrs	r3, r3, #17
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	2b06      	cmp	r3, #6
 8002b3c:	d110      	bne.n	8002b60 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b44:	2208      	movs	r2, #8
 8002b46:	4619      	mov	r1, r3
 8002b48:	6a38      	ldr	r0, [r7, #32]
 8002b4a:	f003 fa5d 	bl	8006008 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	6a1a      	ldr	r2, [r3, #32]
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	091b      	lsrs	r3, r3, #4
 8002b56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b5a:	441a      	add	r2, r3
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0210 	orr.w	r2, r2, #16
 8002b6e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f003 fbdb 	bl	8006330 <USB_ReadInterrupts>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b84:	f040 80a7 	bne.w	8002cd6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f003 fbe0 	bl	8006356 <USB_ReadDevAllOutEpInterrupt>
 8002b96:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002b98:	e099      	b.n	8002cce <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 808e 	beq.w	8002cc2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f003 fc04 	bl	80063be <USB_ReadDevOutEPInterrupt>
 8002bb6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00c      	beq.n	8002bdc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	015a      	lsls	r2, r3, #5
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bce:	461a      	mov	r2, r3
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002bd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 fec2 	bl	8003960 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00c      	beq.n	8002c00 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	2308      	movs	r3, #8
 8002bf6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002bf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 ff98 	bl	8003b30 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d008      	beq.n	8002c1c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c16:	461a      	mov	r2, r3
 8002c18:	2310      	movs	r3, #16
 8002c1a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d030      	beq.n	8002c88 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2e:	2b80      	cmp	r3, #128	; 0x80
 8002c30:	d109      	bne.n	8002c46 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	69fa      	ldr	r2, [r7, #28]
 8002c3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c44:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	4413      	add	r3, r2
 8002c58:	3304      	adds	r3, #4
 8002c5a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	78db      	ldrb	r3, [r3, #3]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d108      	bne.n	8002c76 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2200      	movs	r2, #0
 8002c68:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	4619      	mov	r1, r3
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f005 ff83 	bl	8008b7c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	015a      	lsls	r2, r3, #5
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c82:	461a      	mov	r2, r3
 8002c84:	2302      	movs	r3, #2
 8002c86:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d008      	beq.n	8002ca4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	015a      	lsls	r2, r3, #5
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	2320      	movs	r3, #32
 8002ca2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d009      	beq.n	8002cc2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cc0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cca:	085b      	lsrs	r3, r3, #1
 8002ccc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f47f af62 	bne.w	8002b9a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f003 fb28 	bl	8006330 <USB_ReadInterrupts>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ce6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cea:	f040 80db 	bne.w	8002ea4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f003 fb49 	bl	800638a <USB_ReadDevAllInEpInterrupt>
 8002cf8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002cfe:	e0cd      	b.n	8002e9c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 80c2 	beq.w	8002e90 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	4611      	mov	r1, r2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f003 fb6f 	bl	80063fa <USB_ReadDevInEPInterrupt>
 8002d1c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d057      	beq.n	8002dd8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	2201      	movs	r2, #1
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	43db      	mvns	r3, r3
 8002d42:	69f9      	ldr	r1, [r7, #28]
 8002d44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d48:	4013      	ands	r3, r2
 8002d4a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d58:	461a      	mov	r2, r3
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d132      	bne.n	8002dcc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	4413      	add	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	334c      	adds	r3, #76	; 0x4c
 8002d76:	6819      	ldr	r1, [r3, #0]
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4403      	add	r3, r0
 8002d86:	3348      	adds	r3, #72	; 0x48
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4419      	add	r1, r3
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4403      	add	r3, r0
 8002d9a:	334c      	adds	r3, #76	; 0x4c
 8002d9c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d113      	bne.n	8002dcc <HAL_PCD_IRQHandler+0x3a2>
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da8:	4613      	mov	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	3354      	adds	r3, #84	; 0x54
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d108      	bne.n	8002dcc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6818      	ldr	r0, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	f003 fb76 	bl	80064b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f005 fe57 	bl	8008a86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d008      	beq.n	8002df4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dee:	461a      	mov	r2, r3
 8002df0:	2308      	movs	r3, #8
 8002df2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	f003 0310 	and.w	r3, r3, #16
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d008      	beq.n	8002e10 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	015a      	lsls	r2, r3, #5
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	4413      	add	r3, r2
 8002e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	2310      	movs	r3, #16
 8002e0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d008      	beq.n	8002e2c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	015a      	lsls	r2, r3, #5
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	4413      	add	r3, r2
 8002e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e26:	461a      	mov	r2, r3
 8002e28:	2340      	movs	r3, #64	; 0x40
 8002e2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d023      	beq.n	8002e7e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002e36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e38:	6a38      	ldr	r0, [r7, #32]
 8002e3a:	f002 fa57 	bl	80052ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e40:	4613      	mov	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	3338      	adds	r3, #56	; 0x38
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3304      	adds	r3, #4
 8002e50:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	78db      	ldrb	r3, [r3, #3]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d108      	bne.n	8002e6c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	4619      	mov	r1, r3
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f005 fe9a 	bl	8008ba0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fcdb 	bl	8003846 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	3301      	adds	r3, #1
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e98:	085b      	lsrs	r3, r3, #1
 8002e9a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f47f af2e 	bne.w	8002d00 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f003 fa41 	bl	8006330 <USB_ReadInterrupts>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002eb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002eb8:	d122      	bne.n	8002f00 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	69fa      	ldr	r2, [r7, #28]
 8002ec4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d108      	bne.n	8002eea <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fec2 	bl	8003c6c <HAL_PCDEx_LPM_Callback>
 8002ee8:	e002      	b.n	8002ef0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f005 fe38 	bl	8008b60 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002efe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f003 fa13 	bl	8006330 <USB_ReadInterrupts>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f14:	d112      	bne.n	8002f3c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d102      	bne.n	8002f2c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f005 fdf4 	bl	8008b14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695a      	ldr	r2, [r3, #20]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002f3a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f003 f9f5 	bl	8006330 <USB_ReadInterrupts>
 8002f46:	4603      	mov	r3, r0
 8002f48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f50:	f040 80b7 	bne.w	80030c2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	69fa      	ldr	r2, [r7, #28]
 8002f5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f62:	f023 0301 	bic.w	r3, r3, #1
 8002f66:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2110      	movs	r1, #16
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f002 f9bc 	bl	80052ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f74:	2300      	movs	r3, #0
 8002f76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f78:	e046      	b.n	8003008 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f86:	461a      	mov	r2, r3
 8002f88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f8c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f90:	015a      	lsls	r2, r3, #5
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f9e:	0151      	lsls	r1, r2, #5
 8002fa0:	69fa      	ldr	r2, [r7, #28]
 8002fa2:	440a      	add	r2, r1
 8002fa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002fa8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb0:	015a      	lsls	r2, r3, #5
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fba:	461a      	mov	r2, r3
 8002fbc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fc0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc4:	015a      	lsls	r2, r3, #5
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	4413      	add	r3, r2
 8002fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fd2:	0151      	lsls	r1, r2, #5
 8002fd4:	69fa      	ldr	r2, [r7, #28]
 8002fd6:	440a      	add	r2, r1
 8002fd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002fdc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fe0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ff2:	0151      	lsls	r1, r2, #5
 8002ff4:	69fa      	ldr	r2, [r7, #28]
 8002ff6:	440a      	add	r2, r1
 8002ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ffc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003000:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003004:	3301      	adds	r3, #1
 8003006:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800300e:	429a      	cmp	r2, r3
 8003010:	d3b3      	bcc.n	8002f7a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	69fa      	ldr	r2, [r7, #28]
 800301c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003020:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003024:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	2b00      	cmp	r3, #0
 800302c:	d016      	beq.n	800305c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003038:	69fa      	ldr	r2, [r7, #28]
 800303a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800303e:	f043 030b 	orr.w	r3, r3, #11
 8003042:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003054:	f043 030b 	orr.w	r3, r3, #11
 8003058:	6453      	str	r3, [r2, #68]	; 0x44
 800305a:	e015      	b.n	8003088 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	69fa      	ldr	r2, [r7, #28]
 8003066:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800306a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800306e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003072:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	69fa      	ldr	r2, [r7, #28]
 800307e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003082:	f043 030b 	orr.w	r3, r3, #11
 8003086:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	69fa      	ldr	r2, [r7, #28]
 8003092:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003096:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800309a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6818      	ldr	r0, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030ac:	461a      	mov	r2, r3
 80030ae:	f003 fa03 	bl	80064b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695a      	ldr	r2, [r3, #20]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80030c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f003 f932 	bl	8006330 <USB_ReadInterrupts>
 80030cc:	4603      	mov	r3, r0
 80030ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030d6:	d124      	bne.n	8003122 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f003 f9c8 	bl	8006472 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f002 f97d 	bl	80053e6 <USB_GetDevSpeed>
 80030ec:	4603      	mov	r3, r0
 80030ee:	461a      	mov	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681c      	ldr	r4, [r3, #0]
 80030f8:	f001 f9f4 	bl	80044e4 <HAL_RCC_GetHCLKFreq>
 80030fc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003102:	b2db      	uxtb	r3, r3
 8003104:	461a      	mov	r2, r3
 8003106:	4620      	mov	r0, r4
 8003108:	f001 fe7c 	bl	8004e04 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f005 fce2 	bl	8008ad6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003120:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f003 f902 	bl	8006330 <USB_ReadInterrupts>
 800312c:	4603      	mov	r3, r0
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b08      	cmp	r3, #8
 8003134:	d10a      	bne.n	800314c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f005 fcbf 	bl	8008aba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695a      	ldr	r2, [r3, #20]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f002 0208 	and.w	r2, r2, #8
 800314a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f003 f8ed 	bl	8006330 <USB_ReadInterrupts>
 8003156:	4603      	mov	r3, r0
 8003158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315c:	2b80      	cmp	r3, #128	; 0x80
 800315e:	d122      	bne.n	80031a6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800316c:	2301      	movs	r3, #1
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
 8003170:	e014      	b.n	800319c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003176:	4613      	mov	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d105      	bne.n	8003196 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	b2db      	uxtb	r3, r3
 800318e:	4619      	mov	r1, r3
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 fb27 	bl	80037e4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	3301      	adds	r3, #1
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d3e5      	bcc.n	8003172 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f003 f8c0 	bl	8006330 <USB_ReadInterrupts>
 80031b0:	4603      	mov	r3, r0
 80031b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031ba:	d13b      	bne.n	8003234 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031bc:	2301      	movs	r3, #1
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
 80031c0:	e02b      	b.n	800321a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d6:	4613      	mov	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	3340      	adds	r3, #64	; 0x40
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d115      	bne.n	8003214 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80031e8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	da12      	bge.n	8003214 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f2:	4613      	mov	r3, r2
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	4413      	add	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	333f      	adds	r3, #63	; 0x3f
 80031fe:	2201      	movs	r2, #1
 8003200:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	b2db      	uxtb	r3, r3
 8003206:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800320a:	b2db      	uxtb	r3, r3
 800320c:	4619      	mov	r1, r3
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fae8 	bl	80037e4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	3301      	adds	r3, #1
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003220:	429a      	cmp	r2, r3
 8003222:	d3ce      	bcc.n	80031c2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695a      	ldr	r2, [r3, #20]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003232:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f003 f879 	bl	8006330 <USB_ReadInterrupts>
 800323e:	4603      	mov	r3, r0
 8003240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003244:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003248:	d155      	bne.n	80032f6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800324a:	2301      	movs	r3, #1
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
 800324e:	e045      	b.n	80032dc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	015a      	lsls	r2, r3, #5
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	4413      	add	r3, r2
 8003258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d12e      	bne.n	80032d6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003278:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800327a:	2b00      	cmp	r3, #0
 800327c:	da2b      	bge.n	80032d6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800328a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800328e:	429a      	cmp	r2, r3
 8003290:	d121      	bne.n	80032d6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003296:	4613      	mov	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80032a4:	2201      	movs	r2, #1
 80032a6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10a      	bne.n	80032d6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032d2:	6053      	str	r3, [r2, #4]
            break;
 80032d4:	e007      	b.n	80032e6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	3301      	adds	r3, #1
 80032da:	627b      	str	r3, [r7, #36]	; 0x24
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d3b4      	bcc.n	8003250 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695a      	ldr	r2, [r3, #20]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80032f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f003 f818 	bl	8006330 <USB_ReadInterrupts>
 8003300:	4603      	mov	r3, r0
 8003302:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800330a:	d10a      	bne.n	8003322 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f005 fc59 	bl	8008bc4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695a      	ldr	r2, [r3, #20]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003320:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f003 f802 	bl	8006330 <USB_ReadInterrupts>
 800332c:	4603      	mov	r3, r0
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	2b04      	cmp	r3, #4
 8003334:	d115      	bne.n	8003362 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f005 fc49 	bl	8008be0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6859      	ldr	r1, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	430a      	orrs	r2, r1
 800335c:	605a      	str	r2, [r3, #4]
 800335e:	e000      	b.n	8003362 <HAL_PCD_IRQHandler+0x938>
      return;
 8003360:	bf00      	nop
    }
  }
}
 8003362:	3734      	adds	r7, #52	; 0x34
 8003364:	46bd      	mov	sp, r7
 8003366:	bd90      	pop	{r4, r7, pc}

08003368 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800337a:	2b01      	cmp	r3, #1
 800337c:	d101      	bne.n	8003382 <HAL_PCD_SetAddress+0x1a>
 800337e:	2302      	movs	r3, #2
 8003380:	e013      	b.n	80033aa <HAL_PCD_SetAddress+0x42>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	78fa      	ldrb	r2, [r7, #3]
 800338e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	78fa      	ldrb	r2, [r7, #3]
 8003398:	4611      	mov	r1, r2
 800339a:	4618      	mov	r0, r3
 800339c:	f002 ff60 	bl	8006260 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b084      	sub	sp, #16
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	4608      	mov	r0, r1
 80033bc:	4611      	mov	r1, r2
 80033be:	461a      	mov	r2, r3
 80033c0:	4603      	mov	r3, r0
 80033c2:	70fb      	strb	r3, [r7, #3]
 80033c4:	460b      	mov	r3, r1
 80033c6:	803b      	strh	r3, [r7, #0]
 80033c8:	4613      	mov	r3, r2
 80033ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	da0f      	bge.n	80033f8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033d8:	78fb      	ldrb	r3, [r7, #3]
 80033da:	f003 020f 	and.w	r2, r3, #15
 80033de:	4613      	mov	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	3338      	adds	r3, #56	; 0x38
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	4413      	add	r3, r2
 80033ec:	3304      	adds	r3, #4
 80033ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2201      	movs	r2, #1
 80033f4:	705a      	strb	r2, [r3, #1]
 80033f6:	e00f      	b.n	8003418 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	f003 020f 	and.w	r2, r3, #15
 80033fe:	4613      	mov	r3, r2
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	4413      	add	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	4413      	add	r3, r2
 800340e:	3304      	adds	r3, #4
 8003410:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	b2da      	uxtb	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003424:	883a      	ldrh	r2, [r7, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	78ba      	ldrb	r2, [r7, #2]
 800342e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	785b      	ldrb	r3, [r3, #1]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d004      	beq.n	8003442 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	b29a      	uxth	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003442:	78bb      	ldrb	r3, [r7, #2]
 8003444:	2b02      	cmp	r3, #2
 8003446:	d102      	bne.n	800344e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_PCD_EP_Open+0xaa>
 8003458:	2302      	movs	r3, #2
 800345a:	e00e      	b.n	800347a <HAL_PCD_EP_Open+0xc8>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68f9      	ldr	r1, [r7, #12]
 800346a:	4618      	mov	r0, r3
 800346c:	f001 ffe0 	bl	8005430 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003478:	7afb      	ldrb	r3, [r7, #11]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b084      	sub	sp, #16
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	460b      	mov	r3, r1
 800348c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800348e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003492:	2b00      	cmp	r3, #0
 8003494:	da0f      	bge.n	80034b6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003496:	78fb      	ldrb	r3, [r7, #3]
 8003498:	f003 020f 	and.w	r2, r3, #15
 800349c:	4613      	mov	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	3338      	adds	r3, #56	; 0x38
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	4413      	add	r3, r2
 80034aa:	3304      	adds	r3, #4
 80034ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2201      	movs	r2, #1
 80034b2:	705a      	strb	r2, [r3, #1]
 80034b4:	e00f      	b.n	80034d6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034b6:	78fb      	ldrb	r3, [r7, #3]
 80034b8:	f003 020f 	and.w	r2, r3, #15
 80034bc:	4613      	mov	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	4413      	add	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	4413      	add	r3, r2
 80034cc:	3304      	adds	r3, #4
 80034ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80034d6:	78fb      	ldrb	r3, [r7, #3]
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_PCD_EP_Close+0x6e>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e00e      	b.n	800350e <HAL_PCD_EP_Close+0x8c>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68f9      	ldr	r1, [r7, #12]
 80034fe:	4618      	mov	r0, r3
 8003500:	f002 f81e 	bl	8005540 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b086      	sub	sp, #24
 800351a:	af00      	add	r7, sp, #0
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
 8003522:	460b      	mov	r3, r1
 8003524:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003526:	7afb      	ldrb	r3, [r7, #11]
 8003528:	f003 020f 	and.w	r2, r3, #15
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4413      	add	r3, r2
 800353c:	3304      	adds	r3, #4
 800353e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	2200      	movs	r2, #0
 8003550:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2200      	movs	r2, #0
 8003556:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003558:	7afb      	ldrb	r3, [r7, #11]
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	b2da      	uxtb	r2, r3
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d102      	bne.n	8003572 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003572:	7afb      	ldrb	r3, [r7, #11]
 8003574:	f003 030f 	and.w	r3, r3, #15
 8003578:	2b00      	cmp	r3, #0
 800357a:	d109      	bne.n	8003590 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6818      	ldr	r0, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	461a      	mov	r2, r3
 8003588:	6979      	ldr	r1, [r7, #20]
 800358a:	f002 fafd 	bl	8005b88 <USB_EP0StartXfer>
 800358e:	e008      	b.n	80035a2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6818      	ldr	r0, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	6979      	ldr	r1, [r7, #20]
 800359e:	f002 f8ab 	bl	80056f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	f003 020f 	and.w	r2, r3, #15
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80035ce:	681b      	ldr	r3, [r3, #0]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	607a      	str	r2, [r7, #4]
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	460b      	mov	r3, r1
 80035ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ec:	7afb      	ldrb	r3, [r7, #11]
 80035ee:	f003 020f 	and.w	r2, r3, #15
 80035f2:	4613      	mov	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	3338      	adds	r3, #56	; 0x38
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	4413      	add	r3, r2
 8003600:	3304      	adds	r3, #4
 8003602:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	2200      	movs	r2, #0
 8003614:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2201      	movs	r2, #1
 800361a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800361c:	7afb      	ldrb	r3, [r7, #11]
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	b2da      	uxtb	r2, r3
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d102      	bne.n	8003636 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003636:	7afb      	ldrb	r3, [r7, #11]
 8003638:	f003 030f 	and.w	r3, r3, #15
 800363c:	2b00      	cmp	r3, #0
 800363e:	d109      	bne.n	8003654 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6818      	ldr	r0, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	461a      	mov	r2, r3
 800364c:	6979      	ldr	r1, [r7, #20]
 800364e:	f002 fa9b 	bl	8005b88 <USB_EP0StartXfer>
 8003652:	e008      	b.n	8003666 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	461a      	mov	r2, r3
 8003660:	6979      	ldr	r1, [r7, #20]
 8003662:	f002 f849 	bl	80056f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3718      	adds	r7, #24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	460b      	mov	r3, r1
 800367a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	f003 020f 	and.w	r2, r3, #15
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	429a      	cmp	r2, r3
 8003688:	d901      	bls.n	800368e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e050      	b.n	8003730 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800368e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003692:	2b00      	cmp	r3, #0
 8003694:	da0f      	bge.n	80036b6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003696:	78fb      	ldrb	r3, [r7, #3]
 8003698:	f003 020f 	and.w	r2, r3, #15
 800369c:	4613      	mov	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	3338      	adds	r3, #56	; 0x38
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	4413      	add	r3, r2
 80036aa:	3304      	adds	r3, #4
 80036ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2201      	movs	r2, #1
 80036b2:	705a      	strb	r2, [r3, #1]
 80036b4:	e00d      	b.n	80036d2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	4613      	mov	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	4413      	add	r3, r2
 80036c8:	3304      	adds	r3, #4
 80036ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2201      	movs	r2, #1
 80036d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d101      	bne.n	80036f2 <HAL_PCD_EP_SetStall+0x82>
 80036ee:	2302      	movs	r3, #2
 80036f0:	e01e      	b.n	8003730 <HAL_PCD_EP_SetStall+0xc0>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68f9      	ldr	r1, [r7, #12]
 8003700:	4618      	mov	r0, r3
 8003702:	f002 fcd9 	bl	80060b8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003706:	78fb      	ldrb	r3, [r7, #3]
 8003708:	f003 030f 	and.w	r3, r3, #15
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10a      	bne.n	8003726 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	b2d9      	uxtb	r1, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003720:	461a      	mov	r2, r3
 8003722:	f002 fec9 	bl	80064b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003744:	78fb      	ldrb	r3, [r7, #3]
 8003746:	f003 020f 	and.w	r2, r3, #15
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	429a      	cmp	r2, r3
 8003750:	d901      	bls.n	8003756 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e042      	b.n	80037dc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003756:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800375a:	2b00      	cmp	r3, #0
 800375c:	da0f      	bge.n	800377e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800375e:	78fb      	ldrb	r3, [r7, #3]
 8003760:	f003 020f 	and.w	r2, r3, #15
 8003764:	4613      	mov	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	4413      	add	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	3338      	adds	r3, #56	; 0x38
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	4413      	add	r3, r2
 8003772:	3304      	adds	r3, #4
 8003774:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	705a      	strb	r2, [r3, #1]
 800377c:	e00f      	b.n	800379e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800377e:	78fb      	ldrb	r3, [r7, #3]
 8003780:	f003 020f 	and.w	r2, r3, #15
 8003784:	4613      	mov	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	4413      	add	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	4413      	add	r3, r2
 8003794:	3304      	adds	r3, #4
 8003796:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037a4:	78fb      	ldrb	r3, [r7, #3]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_PCD_EP_ClrStall+0x86>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e00e      	b.n	80037dc <HAL_PCD_EP_ClrStall+0xa4>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68f9      	ldr	r1, [r7, #12]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f002 fce1 	bl	8006194 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80037f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	da0c      	bge.n	8003812 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037f8:	78fb      	ldrb	r3, [r7, #3]
 80037fa:	f003 020f 	and.w	r2, r3, #15
 80037fe:	4613      	mov	r3, r2
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	4413      	add	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	3338      	adds	r3, #56	; 0x38
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	4413      	add	r3, r2
 800380c:	3304      	adds	r3, #4
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	e00c      	b.n	800382c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003812:	78fb      	ldrb	r3, [r7, #3]
 8003814:	f003 020f 	and.w	r2, r3, #15
 8003818:	4613      	mov	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	4413      	add	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	4413      	add	r3, r2
 8003828:	3304      	adds	r3, #4
 800382a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68f9      	ldr	r1, [r7, #12]
 8003832:	4618      	mov	r0, r3
 8003834:	f002 fb00 	bl	8005e38 <USB_EPStopXfer>
 8003838:	4603      	mov	r3, r0
 800383a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800383c:	7afb      	ldrb	r3, [r7, #11]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b08a      	sub	sp, #40	; 0x28
 800384a:	af02      	add	r7, sp, #8
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	4613      	mov	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	3338      	adds	r3, #56	; 0x38
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	4413      	add	r3, r2
 800386a:	3304      	adds	r3, #4
 800386c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a1a      	ldr	r2, [r3, #32]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	429a      	cmp	r2, r3
 8003878:	d901      	bls.n	800387e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e06c      	b.n	8003958 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	699a      	ldr	r2, [r3, #24]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	69fa      	ldr	r2, [r7, #28]
 8003890:	429a      	cmp	r2, r3
 8003892:	d902      	bls.n	800389a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	3303      	adds	r3, #3
 800389e:	089b      	lsrs	r3, r3, #2
 80038a0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038a2:	e02b      	b.n	80038fc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	699a      	ldr	r2, [r3, #24]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	69fa      	ldr	r2, [r7, #28]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d902      	bls.n	80038c0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	3303      	adds	r3, #3
 80038c4:	089b      	lsrs	r3, r3, #2
 80038c6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6919      	ldr	r1, [r3, #16]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	4603      	mov	r3, r0
 80038de:	6978      	ldr	r0, [r7, #20]
 80038e0:	f002 fb54 	bl	8005f8c <USB_WritePacket>

    ep->xfer_buff  += len;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	441a      	add	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a1a      	ldr	r2, [r3, #32]
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	441a      	add	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	4413      	add	r3, r2
 8003904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	429a      	cmp	r2, r3
 8003910:	d809      	bhi.n	8003926 <PCD_WriteEmptyTxFifo+0xe0>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a1a      	ldr	r2, [r3, #32]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800391a:	429a      	cmp	r2, r3
 800391c:	d203      	bcs.n	8003926 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1be      	bne.n	80038a4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	429a      	cmp	r2, r3
 8003930:	d811      	bhi.n	8003956 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	f003 030f 	and.w	r3, r3, #15
 8003938:	2201      	movs	r2, #1
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	43db      	mvns	r3, r3
 800394c:	6939      	ldr	r1, [r7, #16]
 800394e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003952:	4013      	ands	r3, r2
 8003954:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3720      	adds	r7, #32
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	333c      	adds	r3, #60	; 0x3c
 8003978:	3304      	adds	r3, #4
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	4413      	add	r3, r2
 8003986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d17b      	bne.n	8003a8e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b00      	cmp	r3, #0
 800399e:	d015      	beq.n	80039cc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	4a61      	ldr	r2, [pc, #388]	; (8003b28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	f240 80b9 	bls.w	8003b1c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 80b3 	beq.w	8003b1c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c2:	461a      	mov	r2, r3
 80039c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039c8:	6093      	str	r3, [r2, #8]
 80039ca:	e0a7      	b.n	8003b1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	f003 0320 	and.w	r3, r3, #32
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d009      	beq.n	80039ea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e2:	461a      	mov	r2, r3
 80039e4:	2320      	movs	r3, #32
 80039e6:	6093      	str	r3, [r2, #8]
 80039e8:	e098      	b.n	8003b1c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f040 8093 	bne.w	8003b1c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	4a4b      	ldr	r2, [pc, #300]	; (8003b28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d90f      	bls.n	8003a1e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a14:	461a      	mov	r2, r3
 8003a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a1a:	6093      	str	r3, [r2, #8]
 8003a1c:	e07e      	b.n	8003b1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	4613      	mov	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	4413      	add	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	4413      	add	r3, r2
 8003a30:	3304      	adds	r3, #4
 8003a32:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	69da      	ldr	r2, [r3, #28]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	0159      	lsls	r1, r3, #5
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	440b      	add	r3, r1
 8003a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a4a:	1ad2      	subs	r2, r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d114      	bne.n	8003a80 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d109      	bne.n	8003a72 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a68:	461a      	mov	r2, r3
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	f002 fd24 	bl	80064b8 <USB_EP0_OutStart>
 8003a70:	e006      	b.n	8003a80 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	691a      	ldr	r2, [r3, #16]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	441a      	add	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	4619      	mov	r1, r3
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f004 ffe2 	bl	8008a50 <HAL_PCD_DataOutStageCallback>
 8003a8c:	e046      	b.n	8003b1c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	4a26      	ldr	r2, [pc, #152]	; (8003b2c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d124      	bne.n	8003ae0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00a      	beq.n	8003ab6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aac:	461a      	mov	r2, r3
 8003aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ab2:	6093      	str	r3, [r2, #8]
 8003ab4:	e032      	b.n	8003b1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f003 0320 	and.w	r3, r3, #32
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003acc:	461a      	mov	r2, r3
 8003ace:	2320      	movs	r3, #32
 8003ad0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f004 ffb9 	bl	8008a50 <HAL_PCD_DataOutStageCallback>
 8003ade:	e01d      	b.n	8003b1c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d114      	bne.n	8003b10 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	4613      	mov	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d108      	bne.n	8003b10 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6818      	ldr	r0, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b08:	461a      	mov	r2, r3
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	f002 fcd4 	bl	80064b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	4619      	mov	r1, r3
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f004 ff9a 	bl	8008a50 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3720      	adds	r7, #32
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	4f54300a 	.word	0x4f54300a
 8003b2c:	4f54310a 	.word	0x4f54310a

08003b30 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	333c      	adds	r3, #60	; 0x3c
 8003b48:	3304      	adds	r3, #4
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4a15      	ldr	r2, [pc, #84]	; (8003bb8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d90e      	bls.n	8003b84 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d009      	beq.n	8003b84 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	015a      	lsls	r2, r3, #5
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f004 ff51 	bl	8008a2c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4a0a      	ldr	r2, [pc, #40]	; (8003bb8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d90c      	bls.n	8003bac <PCD_EP_OutSetupPacket_int+0x7c>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d108      	bne.n	8003bac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	f002 fc86 	bl	80064b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	4f54300a 	.word	0x4f54300a

08003bbc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	70fb      	strb	r3, [r7, #3]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d107      	bne.n	8003bea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003bda:	883b      	ldrh	r3, [r7, #0]
 8003bdc:	0419      	lsls	r1, r3, #16
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	629a      	str	r2, [r3, #40]	; 0x28
 8003be8:	e028      	b.n	8003c3c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	0c1b      	lsrs	r3, r3, #16
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	73fb      	strb	r3, [r7, #15]
 8003bfc:	e00d      	b.n	8003c1a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	7bfb      	ldrb	r3, [r7, #15]
 8003c04:	3340      	adds	r3, #64	; 0x40
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	0c1b      	lsrs	r3, r3, #16
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	4413      	add	r3, r2
 8003c12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
 8003c16:	3301      	adds	r3, #1
 8003c18:	73fb      	strb	r3, [r7, #15]
 8003c1a:	7bfa      	ldrb	r2, [r7, #15]
 8003c1c:	78fb      	ldrb	r3, [r7, #3]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d3ec      	bcc.n	8003bfe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c24:	883b      	ldrh	r3, [r7, #0]
 8003c26:	0418      	lsls	r0, r3, #16
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6819      	ldr	r1, [r3, #0]
 8003c2c:	78fb      	ldrb	r3, [r7, #3]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	4302      	orrs	r2, r0
 8003c34:	3340      	adds	r3, #64	; 0x40
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	460b      	mov	r3, r1
 8003c54:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	887a      	ldrh	r2, [r7, #2]
 8003c5c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	460b      	mov	r3, r1
 8003c76:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e267      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d075      	beq.n	8003d8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ca2:	4b88      	ldr	r3, [pc, #544]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d00c      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cae:	4b85      	ldr	r3, [pc, #532]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d112      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cba:	4b82      	ldr	r3, [pc, #520]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cc6:	d10b      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc8:	4b7e      	ldr	r3, [pc, #504]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d05b      	beq.n	8003d8c <HAL_RCC_OscConfig+0x108>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d157      	bne.n	8003d8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e242      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce8:	d106      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x74>
 8003cea:	4b76      	ldr	r3, [pc, #472]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a75      	ldr	r2, [pc, #468]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	e01d      	b.n	8003d34 <HAL_RCC_OscConfig+0xb0>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d00:	d10c      	bne.n	8003d1c <HAL_RCC_OscConfig+0x98>
 8003d02:	4b70      	ldr	r3, [pc, #448]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a6f      	ldr	r2, [pc, #444]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	4b6d      	ldr	r3, [pc, #436]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a6c      	ldr	r2, [pc, #432]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	e00b      	b.n	8003d34 <HAL_RCC_OscConfig+0xb0>
 8003d1c:	4b69      	ldr	r3, [pc, #420]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a68      	ldr	r2, [pc, #416]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	4b66      	ldr	r3, [pc, #408]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a65      	ldr	r2, [pc, #404]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d013      	beq.n	8003d64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3c:	f7fd ff3a 	bl	8001bb4 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d44:	f7fd ff36 	bl	8001bb4 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b64      	cmp	r3, #100	; 0x64
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e207      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d56:	4b5b      	ldr	r3, [pc, #364]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0f0      	beq.n	8003d44 <HAL_RCC_OscConfig+0xc0>
 8003d62:	e014      	b.n	8003d8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d64:	f7fd ff26 	bl	8001bb4 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d6c:	f7fd ff22 	bl	8001bb4 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b64      	cmp	r3, #100	; 0x64
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e1f3      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d7e:	4b51      	ldr	r3, [pc, #324]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCC_OscConfig+0xe8>
 8003d8a:	e000      	b.n	8003d8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d063      	beq.n	8003e62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d9a:	4b4a      	ldr	r3, [pc, #296]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00b      	beq.n	8003dbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003da6:	4b47      	ldr	r3, [pc, #284]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d11c      	bne.n	8003dec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003db2:	4b44      	ldr	r3, [pc, #272]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d116      	bne.n	8003dec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dbe:	4b41      	ldr	r3, [pc, #260]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d005      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x152>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d001      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e1c7      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd6:	4b3b      	ldr	r3, [pc, #236]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4937      	ldr	r1, [pc, #220]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dea:	e03a      	b.n	8003e62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d020      	beq.n	8003e36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003df4:	4b34      	ldr	r3, [pc, #208]	; (8003ec8 <HAL_RCC_OscConfig+0x244>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfa:	f7fd fedb 	bl	8001bb4 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e02:	f7fd fed7 	bl	8001bb4 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e1a8      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e14:	4b2b      	ldr	r3, [pc, #172]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0f0      	beq.n	8003e02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e20:	4b28      	ldr	r3, [pc, #160]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	4925      	ldr	r1, [pc, #148]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	600b      	str	r3, [r1, #0]
 8003e34:	e015      	b.n	8003e62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e36:	4b24      	ldr	r3, [pc, #144]	; (8003ec8 <HAL_RCC_OscConfig+0x244>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fd feba 	bl	8001bb4 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e44:	f7fd feb6 	bl	8001bb4 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e187      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e56:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f0      	bne.n	8003e44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d036      	beq.n	8003edc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d016      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e76:	4b15      	ldr	r3, [pc, #84]	; (8003ecc <HAL_RCC_OscConfig+0x248>)
 8003e78:	2201      	movs	r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7c:	f7fd fe9a 	bl	8001bb4 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e84:	f7fd fe96 	bl	8001bb4 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e167      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e96:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCC_OscConfig+0x200>
 8003ea2:	e01b      	b.n	8003edc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ea4:	4b09      	ldr	r3, [pc, #36]	; (8003ecc <HAL_RCC_OscConfig+0x248>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eaa:	f7fd fe83 	bl	8001bb4 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eb0:	e00e      	b.n	8003ed0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eb2:	f7fd fe7f 	bl	8001bb4 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d907      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e150      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	42470000 	.word	0x42470000
 8003ecc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed0:	4b88      	ldr	r3, [pc, #544]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1ea      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 8097 	beq.w	8004018 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eea:	2300      	movs	r3, #0
 8003eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eee:	4b81      	ldr	r3, [pc, #516]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10f      	bne.n	8003f1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003efa:	2300      	movs	r3, #0
 8003efc:	60bb      	str	r3, [r7, #8]
 8003efe:	4b7d      	ldr	r3, [pc, #500]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	4a7c      	ldr	r2, [pc, #496]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f08:	6413      	str	r3, [r2, #64]	; 0x40
 8003f0a:	4b7a      	ldr	r3, [pc, #488]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f12:	60bb      	str	r3, [r7, #8]
 8003f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f16:	2301      	movs	r3, #1
 8003f18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f1a:	4b77      	ldr	r3, [pc, #476]	; (80040f8 <HAL_RCC_OscConfig+0x474>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d118      	bne.n	8003f58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f26:	4b74      	ldr	r3, [pc, #464]	; (80040f8 <HAL_RCC_OscConfig+0x474>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a73      	ldr	r2, [pc, #460]	; (80040f8 <HAL_RCC_OscConfig+0x474>)
 8003f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f32:	f7fd fe3f 	bl	8001bb4 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f3a:	f7fd fe3b 	bl	8001bb4 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e10c      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4c:	4b6a      	ldr	r3, [pc, #424]	; (80040f8 <HAL_RCC_OscConfig+0x474>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0f0      	beq.n	8003f3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d106      	bne.n	8003f6e <HAL_RCC_OscConfig+0x2ea>
 8003f60:	4b64      	ldr	r3, [pc, #400]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f64:	4a63      	ldr	r2, [pc, #396]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f66:	f043 0301 	orr.w	r3, r3, #1
 8003f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f6c:	e01c      	b.n	8003fa8 <HAL_RCC_OscConfig+0x324>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2b05      	cmp	r3, #5
 8003f74:	d10c      	bne.n	8003f90 <HAL_RCC_OscConfig+0x30c>
 8003f76:	4b5f      	ldr	r3, [pc, #380]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7a:	4a5e      	ldr	r2, [pc, #376]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f7c:	f043 0304 	orr.w	r3, r3, #4
 8003f80:	6713      	str	r3, [r2, #112]	; 0x70
 8003f82:	4b5c      	ldr	r3, [pc, #368]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f86:	4a5b      	ldr	r2, [pc, #364]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f8e:	e00b      	b.n	8003fa8 <HAL_RCC_OscConfig+0x324>
 8003f90:	4b58      	ldr	r3, [pc, #352]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f94:	4a57      	ldr	r2, [pc, #348]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f96:	f023 0301 	bic.w	r3, r3, #1
 8003f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f9c:	4b55      	ldr	r3, [pc, #340]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa0:	4a54      	ldr	r2, [pc, #336]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003fa2:	f023 0304 	bic.w	r3, r3, #4
 8003fa6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d015      	beq.n	8003fdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb0:	f7fd fe00 	bl	8001bb4 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb6:	e00a      	b.n	8003fce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb8:	f7fd fdfc 	bl	8001bb4 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e0cb      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fce:	4b49      	ldr	r3, [pc, #292]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0ee      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x334>
 8003fda:	e014      	b.n	8004006 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fdc:	f7fd fdea 	bl	8001bb4 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe2:	e00a      	b.n	8003ffa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe4:	f7fd fde6 	bl	8001bb4 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e0b5      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ffa:	4b3e      	ldr	r3, [pc, #248]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1ee      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004006:	7dfb      	ldrb	r3, [r7, #23]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d105      	bne.n	8004018 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800400c:	4b39      	ldr	r3, [pc, #228]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	4a38      	ldr	r2, [pc, #224]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8004012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004016:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 80a1 	beq.w	8004164 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004022:	4b34      	ldr	r3, [pc, #208]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 030c 	and.w	r3, r3, #12
 800402a:	2b08      	cmp	r3, #8
 800402c:	d05c      	beq.n	80040e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d141      	bne.n	80040ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004036:	4b31      	ldr	r3, [pc, #196]	; (80040fc <HAL_RCC_OscConfig+0x478>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403c:	f7fd fdba 	bl	8001bb4 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004044:	f7fd fdb6 	bl	8001bb4 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e087      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004056:	4b27      	ldr	r3, [pc, #156]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69da      	ldr	r2, [r3, #28]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	019b      	lsls	r3, r3, #6
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	3b01      	subs	r3, #1
 800407c:	041b      	lsls	r3, r3, #16
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004084:	061b      	lsls	r3, r3, #24
 8004086:	491b      	ldr	r1, [pc, #108]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 8004088:	4313      	orrs	r3, r2
 800408a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800408c:	4b1b      	ldr	r3, [pc, #108]	; (80040fc <HAL_RCC_OscConfig+0x478>)
 800408e:	2201      	movs	r2, #1
 8004090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004092:	f7fd fd8f 	bl	8001bb4 <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800409a:	f7fd fd8b 	bl	8001bb4 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e05c      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ac:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0x416>
 80040b8:	e054      	b.n	8004164 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ba:	4b10      	ldr	r3, [pc, #64]	; (80040fc <HAL_RCC_OscConfig+0x478>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c0:	f7fd fd78 	bl	8001bb4 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c8:	f7fd fd74 	bl	8001bb4 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e045      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040da:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <HAL_RCC_OscConfig+0x470>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x444>
 80040e6:	e03d      	b.n	8004164 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d107      	bne.n	8004100 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e038      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
 80040f4:	40023800 	.word	0x40023800
 80040f8:	40007000 	.word	0x40007000
 80040fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004100:	4b1b      	ldr	r3, [pc, #108]	; (8004170 <HAL_RCC_OscConfig+0x4ec>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d028      	beq.n	8004160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004118:	429a      	cmp	r2, r3
 800411a:	d121      	bne.n	8004160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004126:	429a      	cmp	r2, r3
 8004128:	d11a      	bne.n	8004160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004130:	4013      	ands	r3, r2
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004136:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004138:	4293      	cmp	r3, r2
 800413a:	d111      	bne.n	8004160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004146:	085b      	lsrs	r3, r3, #1
 8004148:	3b01      	subs	r3, #1
 800414a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800414c:	429a      	cmp	r2, r3
 800414e:	d107      	bne.n	8004160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800415c:	429a      	cmp	r2, r3
 800415e:	d001      	beq.n	8004164 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40023800 	.word	0x40023800

08004174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e0cc      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004188:	4b68      	ldr	r3, [pc, #416]	; (800432c <HAL_RCC_ClockConfig+0x1b8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d90c      	bls.n	80041b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004196:	4b65      	ldr	r3, [pc, #404]	; (800432c <HAL_RCC_ClockConfig+0x1b8>)
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800419e:	4b63      	ldr	r3, [pc, #396]	; (800432c <HAL_RCC_ClockConfig+0x1b8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d001      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0b8      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d020      	beq.n	80041fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d005      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041c8:	4b59      	ldr	r3, [pc, #356]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	4a58      	ldr	r2, [pc, #352]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0308 	and.w	r3, r3, #8
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d005      	beq.n	80041ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041e0:	4b53      	ldr	r3, [pc, #332]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	4a52      	ldr	r2, [pc, #328]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ec:	4b50      	ldr	r3, [pc, #320]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	494d      	ldr	r1, [pc, #308]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d044      	beq.n	8004294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d107      	bne.n	8004222 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004212:	4b47      	ldr	r3, [pc, #284]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d119      	bne.n	8004252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e07f      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d003      	beq.n	8004232 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800422e:	2b03      	cmp	r3, #3
 8004230:	d107      	bne.n	8004242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004232:	4b3f      	ldr	r3, [pc, #252]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d109      	bne.n	8004252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e06f      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004242:	4b3b      	ldr	r3, [pc, #236]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e067      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004252:	4b37      	ldr	r3, [pc, #220]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f023 0203 	bic.w	r2, r3, #3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	4934      	ldr	r1, [pc, #208]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004260:	4313      	orrs	r3, r2
 8004262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004264:	f7fd fca6 	bl	8001bb4 <HAL_GetTick>
 8004268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426a:	e00a      	b.n	8004282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800426c:	f7fd fca2 	bl	8001bb4 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	f241 3288 	movw	r2, #5000	; 0x1388
 800427a:	4293      	cmp	r3, r2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e04f      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004282:	4b2b      	ldr	r3, [pc, #172]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 020c 	and.w	r2, r3, #12
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	429a      	cmp	r2, r3
 8004292:	d1eb      	bne.n	800426c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004294:	4b25      	ldr	r3, [pc, #148]	; (800432c <HAL_RCC_ClockConfig+0x1b8>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d20c      	bcs.n	80042bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a2:	4b22      	ldr	r3, [pc, #136]	; (800432c <HAL_RCC_ClockConfig+0x1b8>)
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042aa:	4b20      	ldr	r3, [pc, #128]	; (800432c <HAL_RCC_ClockConfig+0x1b8>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d001      	beq.n	80042bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e032      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d008      	beq.n	80042da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042c8:	4b19      	ldr	r3, [pc, #100]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	4916      	ldr	r1, [pc, #88]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d009      	beq.n	80042fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042e6:	4b12      	ldr	r3, [pc, #72]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	490e      	ldr	r1, [pc, #56]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042fa:	f000 f82d 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 80042fe:	4602      	mov	r2, r0
 8004300:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	091b      	lsrs	r3, r3, #4
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	490a      	ldr	r1, [pc, #40]	; (8004334 <HAL_RCC_ClockConfig+0x1c0>)
 800430c:	5ccb      	ldrb	r3, [r1, r3]
 800430e:	fa22 f303 	lsr.w	r3, r2, r3
 8004312:	4a09      	ldr	r2, [pc, #36]	; (8004338 <HAL_RCC_ClockConfig+0x1c4>)
 8004314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004316:	4b09      	ldr	r3, [pc, #36]	; (800433c <HAL_RCC_ClockConfig+0x1c8>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f7fd fc06 	bl	8001b2c <HAL_InitTick>

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	40023c00 	.word	0x40023c00
 8004330:	40023800 	.word	0x40023800
 8004334:	08009060 	.word	0x08009060
 8004338:	20000000 	.word	0x20000000
 800433c:	20000008 	.word	0x20000008

08004340 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004344:	4b03      	ldr	r3, [pc, #12]	; (8004354 <HAL_RCC_EnableCSS+0x14>)
 8004346:	2201      	movs	r2, #1
 8004348:	601a      	str	r2, [r3, #0]
}
 800434a:	bf00      	nop
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	4247004c 	.word	0x4247004c

08004358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800435c:	b090      	sub	sp, #64	; 0x40
 800435e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	637b      	str	r3, [r7, #52]	; 0x34
 8004364:	2300      	movs	r3, #0
 8004366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004368:	2300      	movs	r3, #0
 800436a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004370:	4b59      	ldr	r3, [pc, #356]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 030c 	and.w	r3, r3, #12
 8004378:	2b08      	cmp	r3, #8
 800437a:	d00d      	beq.n	8004398 <HAL_RCC_GetSysClockFreq+0x40>
 800437c:	2b08      	cmp	r3, #8
 800437e:	f200 80a1 	bhi.w	80044c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <HAL_RCC_GetSysClockFreq+0x34>
 8004386:	2b04      	cmp	r3, #4
 8004388:	d003      	beq.n	8004392 <HAL_RCC_GetSysClockFreq+0x3a>
 800438a:	e09b      	b.n	80044c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800438c:	4b53      	ldr	r3, [pc, #332]	; (80044dc <HAL_RCC_GetSysClockFreq+0x184>)
 800438e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004390:	e09b      	b.n	80044ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004392:	4b53      	ldr	r3, [pc, #332]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004394:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004396:	e098      	b.n	80044ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004398:	4b4f      	ldr	r3, [pc, #316]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043a2:	4b4d      	ldr	r3, [pc, #308]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d028      	beq.n	8004400 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ae:	4b4a      	ldr	r3, [pc, #296]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	099b      	lsrs	r3, r3, #6
 80043b4:	2200      	movs	r2, #0
 80043b6:	623b      	str	r3, [r7, #32]
 80043b8:	627a      	str	r2, [r7, #36]	; 0x24
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80043c0:	2100      	movs	r1, #0
 80043c2:	4b47      	ldr	r3, [pc, #284]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80043c4:	fb03 f201 	mul.w	r2, r3, r1
 80043c8:	2300      	movs	r3, #0
 80043ca:	fb00 f303 	mul.w	r3, r0, r3
 80043ce:	4413      	add	r3, r2
 80043d0:	4a43      	ldr	r2, [pc, #268]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80043d2:	fba0 1202 	umull	r1, r2, r0, r2
 80043d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043d8:	460a      	mov	r2, r1
 80043da:	62ba      	str	r2, [r7, #40]	; 0x28
 80043dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043de:	4413      	add	r3, r2
 80043e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e4:	2200      	movs	r2, #0
 80043e6:	61bb      	str	r3, [r7, #24]
 80043e8:	61fa      	str	r2, [r7, #28]
 80043ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80043f2:	f7fc fae7 	bl	80009c4 <__aeabi_uldivmod>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4613      	mov	r3, r2
 80043fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043fe:	e053      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004400:	4b35      	ldr	r3, [pc, #212]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	099b      	lsrs	r3, r3, #6
 8004406:	2200      	movs	r2, #0
 8004408:	613b      	str	r3, [r7, #16]
 800440a:	617a      	str	r2, [r7, #20]
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004412:	f04f 0b00 	mov.w	fp, #0
 8004416:	4652      	mov	r2, sl
 8004418:	465b      	mov	r3, fp
 800441a:	f04f 0000 	mov.w	r0, #0
 800441e:	f04f 0100 	mov.w	r1, #0
 8004422:	0159      	lsls	r1, r3, #5
 8004424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004428:	0150      	lsls	r0, r2, #5
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	ebb2 080a 	subs.w	r8, r2, sl
 8004432:	eb63 090b 	sbc.w	r9, r3, fp
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	f04f 0300 	mov.w	r3, #0
 800443e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004442:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004446:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800444a:	ebb2 0408 	subs.w	r4, r2, r8
 800444e:	eb63 0509 	sbc.w	r5, r3, r9
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	f04f 0300 	mov.w	r3, #0
 800445a:	00eb      	lsls	r3, r5, #3
 800445c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004460:	00e2      	lsls	r2, r4, #3
 8004462:	4614      	mov	r4, r2
 8004464:	461d      	mov	r5, r3
 8004466:	eb14 030a 	adds.w	r3, r4, sl
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	eb45 030b 	adc.w	r3, r5, fp
 8004470:	607b      	str	r3, [r7, #4]
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800447e:	4629      	mov	r1, r5
 8004480:	028b      	lsls	r3, r1, #10
 8004482:	4621      	mov	r1, r4
 8004484:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004488:	4621      	mov	r1, r4
 800448a:	028a      	lsls	r2, r1, #10
 800448c:	4610      	mov	r0, r2
 800448e:	4619      	mov	r1, r3
 8004490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004492:	2200      	movs	r2, #0
 8004494:	60bb      	str	r3, [r7, #8]
 8004496:	60fa      	str	r2, [r7, #12]
 8004498:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800449c:	f7fc fa92 	bl	80009c4 <__aeabi_uldivmod>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4613      	mov	r3, r2
 80044a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044a8:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	0c1b      	lsrs	r3, r3, #16
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	3301      	adds	r3, #1
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80044b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044c2:	e002      	b.n	80044ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044c4:	4b05      	ldr	r3, [pc, #20]	; (80044dc <HAL_RCC_GetSysClockFreq+0x184>)
 80044c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3740      	adds	r7, #64	; 0x40
 80044d0:	46bd      	mov	sp, r7
 80044d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044d6:	bf00      	nop
 80044d8:	40023800 	.word	0x40023800
 80044dc:	00f42400 	.word	0x00f42400
 80044e0:	017d7840 	.word	0x017d7840

080044e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044e8:	4b03      	ldr	r3, [pc, #12]	; (80044f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80044ea:	681b      	ldr	r3, [r3, #0]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	20000000 	.word	0x20000000

080044fc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004500:	4b06      	ldr	r3, [pc, #24]	; (800451c <HAL_RCC_NMI_IRQHandler+0x20>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004508:	2b80      	cmp	r3, #128	; 0x80
 800450a:	d104      	bne.n	8004516 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800450c:	f000 f80a 	bl	8004524 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004510:	4b03      	ldr	r3, [pc, #12]	; (8004520 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004512:	2280      	movs	r2, #128	; 0x80
 8004514:	701a      	strb	r2, [r3, #0]
  }
}
 8004516:	bf00      	nop
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40023800 	.word	0x40023800
 8004520:	4002380e 	.word	0x4002380e

08004524 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004528:	bf00      	nop
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b082      	sub	sp, #8
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e07b      	b.n	800463c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	2b00      	cmp	r3, #0
 800454a:	d108      	bne.n	800455e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004554:	d009      	beq.n	800456a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	61da      	str	r2, [r3, #28]
 800455c:	e005      	b.n	800456a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d106      	bne.n	800458a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7fc fd1b 	bl	8000fc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2202      	movs	r2, #2
 800458e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045a0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ee:	ea42 0103 	orr.w	r1, r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	0c1b      	lsrs	r3, r3, #16
 8004608:	f003 0104 	and.w	r1, r3, #4
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	f003 0210 	and.w	r2, r3, #16
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	69da      	ldr	r2, [r3, #28]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800462a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b08c      	sub	sp, #48	; 0x30
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
 8004650:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004652:	2301      	movs	r3, #1
 8004654:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_SPI_TransmitReceive+0x26>
 8004666:	2302      	movs	r3, #2
 8004668:	e18a      	b.n	8004980 <HAL_SPI_TransmitReceive+0x33c>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004672:	f7fd fa9f 	bl	8001bb4 <HAL_GetTick>
 8004676:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800467e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004688:	887b      	ldrh	r3, [r7, #2]
 800468a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800468c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004690:	2b01      	cmp	r3, #1
 8004692:	d00f      	beq.n	80046b4 <HAL_SPI_TransmitReceive+0x70>
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800469a:	d107      	bne.n	80046ac <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d103      	bne.n	80046ac <HAL_SPI_TransmitReceive+0x68>
 80046a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d003      	beq.n	80046b4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80046ac:	2302      	movs	r3, #2
 80046ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80046b2:	e15b      	b.n	800496c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d005      	beq.n	80046c6 <HAL_SPI_TransmitReceive+0x82>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <HAL_SPI_TransmitReceive+0x82>
 80046c0:	887b      	ldrh	r3, [r7, #2]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d103      	bne.n	80046ce <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80046cc:	e14e      	b.n	800496c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d003      	beq.n	80046e2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2205      	movs	r2, #5
 80046de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	887a      	ldrh	r2, [r7, #2]
 80046f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	887a      	ldrh	r2, [r7, #2]
 80046f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	887a      	ldrh	r2, [r7, #2]
 8004704:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	887a      	ldrh	r2, [r7, #2]
 800470a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004722:	2b40      	cmp	r3, #64	; 0x40
 8004724:	d007      	beq.n	8004736 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004734:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800473e:	d178      	bne.n	8004832 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <HAL_SPI_TransmitReceive+0x10a>
 8004748:	8b7b      	ldrh	r3, [r7, #26]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d166      	bne.n	800481c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004752:	881a      	ldrh	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475e:	1c9a      	adds	r2, r3, #2
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004768:	b29b      	uxth	r3, r3
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004772:	e053      	b.n	800481c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b02      	cmp	r3, #2
 8004780:	d11b      	bne.n	80047ba <HAL_SPI_TransmitReceive+0x176>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004786:	b29b      	uxth	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d016      	beq.n	80047ba <HAL_SPI_TransmitReceive+0x176>
 800478c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478e:	2b01      	cmp	r3, #1
 8004790:	d113      	bne.n	80047ba <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004796:	881a      	ldrh	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a2:	1c9a      	adds	r2, r3, #2
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d119      	bne.n	80047fc <HAL_SPI_TransmitReceive+0x1b8>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d014      	beq.n	80047fc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	b292      	uxth	r2, r2
 80047de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e4:	1c9a      	adds	r2, r3, #2
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047f8:	2301      	movs	r3, #1
 80047fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80047fc:	f7fd f9da 	bl	8001bb4 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004808:	429a      	cmp	r2, r3
 800480a:	d807      	bhi.n	800481c <HAL_SPI_TransmitReceive+0x1d8>
 800480c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004812:	d003      	beq.n	800481c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800481a:	e0a7      	b.n	800496c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004820:	b29b      	uxth	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1a6      	bne.n	8004774 <HAL_SPI_TransmitReceive+0x130>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800482a:	b29b      	uxth	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1a1      	bne.n	8004774 <HAL_SPI_TransmitReceive+0x130>
 8004830:	e07c      	b.n	800492c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <HAL_SPI_TransmitReceive+0x1fc>
 800483a:	8b7b      	ldrh	r3, [r7, #26]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d16b      	bne.n	8004918 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	330c      	adds	r3, #12
 800484a:	7812      	ldrb	r2, [r2, #0]
 800484c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800485c:	b29b      	uxth	r3, r3
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004866:	e057      	b.n	8004918 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b02      	cmp	r3, #2
 8004874:	d11c      	bne.n	80048b0 <HAL_SPI_TransmitReceive+0x26c>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800487a:	b29b      	uxth	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	d017      	beq.n	80048b0 <HAL_SPI_TransmitReceive+0x26c>
 8004880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004882:	2b01      	cmp	r3, #1
 8004884:	d114      	bne.n	80048b0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	330c      	adds	r3, #12
 8004890:	7812      	ldrb	r2, [r2, #0]
 8004892:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d119      	bne.n	80048f2 <HAL_SPI_TransmitReceive+0x2ae>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d014      	beq.n	80048f2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048ee:	2301      	movs	r3, #1
 80048f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80048f2:	f7fd f95f 	bl	8001bb4 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048fe:	429a      	cmp	r2, r3
 8004900:	d803      	bhi.n	800490a <HAL_SPI_TransmitReceive+0x2c6>
 8004902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004908:	d102      	bne.n	8004910 <HAL_SPI_TransmitReceive+0x2cc>
 800490a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490c:	2b00      	cmp	r3, #0
 800490e:	d103      	bne.n	8004918 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004916:	e029      	b.n	800496c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1a2      	bne.n	8004868 <HAL_SPI_TransmitReceive+0x224>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004926:	b29b      	uxth	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	d19d      	bne.n	8004868 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800492c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800492e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f000 f9c3 	bl	8004cbc <SPI_EndRxTxTransaction>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d006      	beq.n	800494a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2220      	movs	r2, #32
 8004946:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004948:	e010      	b.n	800496c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10b      	bne.n	800496a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004952:	2300      	movs	r3, #0
 8004954:	617b      	str	r3, [r7, #20]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	617b      	str	r3, [r7, #20]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	617b      	str	r3, [r7, #20]
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	e000      	b.n	800496c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800496a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800497c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004980:	4618      	mov	r0, r3
 8004982:	3730      	adds	r7, #48	; 0x30
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b088      	sub	sp, #32
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10e      	bne.n	80049c8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d009      	beq.n	80049c8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d004      	beq.n	80049c8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	4798      	blx	r3
    return;
 80049c6:	e0ce      	b.n	8004b66 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d009      	beq.n	80049e6 <HAL_SPI_IRQHandler+0x5e>
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d004      	beq.n	80049e6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	4798      	blx	r3
    return;
 80049e4:	e0bf      	b.n	8004b66 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	f003 0320 	and.w	r3, r3, #32
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10a      	bne.n	8004a06 <HAL_SPI_IRQHandler+0x7e>
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d105      	bne.n	8004a06 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 80b0 	beq.w	8004b66 <HAL_SPI_IRQHandler+0x1de>
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	f003 0320 	and.w	r3, r3, #32
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 80aa 	beq.w	8004b66 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d023      	beq.n	8004a64 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b03      	cmp	r3, #3
 8004a26:	d011      	beq.n	8004a4c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2c:	f043 0204 	orr.w	r2, r3, #4
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a34:	2300      	movs	r3, #0
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	e00b      	b.n	8004a64 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	613b      	str	r3, [r7, #16]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	613b      	str	r3, [r7, #16]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	613b      	str	r3, [r7, #16]
 8004a60:	693b      	ldr	r3, [r7, #16]
        return;
 8004a62:	e080      	b.n	8004b66 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d014      	beq.n	8004a98 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a72:	f043 0201 	orr.w	r2, r3, #1
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00c      	beq.n	8004abc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa6:	f043 0208 	orr.w	r2, r3, #8
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60bb      	str	r3, [r7, #8]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	60bb      	str	r3, [r7, #8]
 8004aba:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d04f      	beq.n	8004b64 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ad2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d104      	bne.n	8004af0 <HAL_SPI_IRQHandler+0x168>
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d034      	beq.n	8004b5a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 0203 	bic.w	r2, r2, #3
 8004afe:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d011      	beq.n	8004b2c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0c:	4a17      	ldr	r2, [pc, #92]	; (8004b6c <HAL_SPI_IRQHandler+0x1e4>)
 8004b0e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fd fa3d 	bl	8001f94 <HAL_DMA_Abort_IT>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d016      	beq.n	8004b62 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b38:	4a0c      	ldr	r2, [pc, #48]	; (8004b6c <HAL_SPI_IRQHandler+0x1e4>)
 8004b3a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fd fa27 	bl	8001f94 <HAL_DMA_Abort_IT>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00a      	beq.n	8004b62 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004b58:	e003      	b.n	8004b62 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f808 	bl	8004b70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004b60:	e000      	b.n	8004b64 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004b62:	bf00      	nop
    return;
 8004b64:	bf00      	nop
  }
}
 8004b66:	3720      	adds	r7, #32
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	08004b85 	.word	0x08004b85

08004b70 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b90:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f7ff ffe6 	bl	8004b70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ba4:	bf00      	nop
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	603b      	str	r3, [r7, #0]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bbc:	f7fc fffa 	bl	8001bb4 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc4:	1a9b      	subs	r3, r3, r2
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	4413      	add	r3, r2
 8004bca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004bcc:	f7fc fff2 	bl	8001bb4 <HAL_GetTick>
 8004bd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004bd2:	4b39      	ldr	r3, [pc, #228]	; (8004cb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	015b      	lsls	r3, r3, #5
 8004bd8:	0d1b      	lsrs	r3, r3, #20
 8004bda:	69fa      	ldr	r2, [r7, #28]
 8004bdc:	fb02 f303 	mul.w	r3, r2, r3
 8004be0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004be2:	e054      	b.n	8004c8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bea:	d050      	beq.n	8004c8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bec:	f7fc ffe2 	bl	8001bb4 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	69fa      	ldr	r2, [r7, #28]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d902      	bls.n	8004c02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d13d      	bne.n	8004c7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c1a:	d111      	bne.n	8004c40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c24:	d004      	beq.n	8004c30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c2e:	d107      	bne.n	8004c40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c48:	d10f      	bne.n	8004c6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e017      	b.n	8004cae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689a      	ldr	r2, [r3, #8]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	4013      	ands	r3, r2
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	bf0c      	ite	eq
 8004c9e:	2301      	moveq	r3, #1
 8004ca0:	2300      	movne	r3, #0
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	79fb      	ldrb	r3, [r7, #7]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d19b      	bne.n	8004be4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3720      	adds	r7, #32
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	20000000 	.word	0x20000000

08004cbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af02      	add	r7, sp, #8
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004cc8:	4b1b      	ldr	r3, [pc, #108]	; (8004d38 <SPI_EndRxTxTransaction+0x7c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a1b      	ldr	r2, [pc, #108]	; (8004d3c <SPI_EndRxTxTransaction+0x80>)
 8004cce:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd2:	0d5b      	lsrs	r3, r3, #21
 8004cd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004cd8:	fb02 f303 	mul.w	r3, r2, r3
 8004cdc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ce6:	d112      	bne.n	8004d0e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	2180      	movs	r1, #128	; 0x80
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f7ff ff5a 	bl	8004bac <SPI_WaitFlagStateUntilTimeout>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d016      	beq.n	8004d2c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d02:	f043 0220 	orr.w	r2, r3, #32
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e00f      	b.n	8004d2e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d24:	2b80      	cmp	r3, #128	; 0x80
 8004d26:	d0f2      	beq.n	8004d0e <SPI_EndRxTxTransaction+0x52>
 8004d28:	e000      	b.n	8004d2c <SPI_EndRxTxTransaction+0x70>
        break;
 8004d2a:	bf00      	nop
  }

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20000000 	.word	0x20000000
 8004d3c:	165e9f81 	.word	0x165e9f81

08004d40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d40:	b084      	sub	sp, #16
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b084      	sub	sp, #16
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	f107 001c 	add.w	r0, r7, #28
 8004d4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d122      	bne.n	8004d9e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d105      	bne.n	8004d92 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f001 fbee 	bl	8006574 <USB_CoreReset>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	73fb      	strb	r3, [r7, #15]
 8004d9c:	e01a      	b.n	8004dd4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f001 fbe2 	bl	8006574 <USB_CoreReset>
 8004db0:	4603      	mov	r3, r0
 8004db2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	639a      	str	r2, [r3, #56]	; 0x38
 8004dc6:	e005      	b.n	8004dd4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d10b      	bne.n	8004df2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f043 0206 	orr.w	r2, r3, #6
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f043 0220 	orr.w	r2, r3, #32
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dfe:	b004      	add	sp, #16
 8004e00:	4770      	bx	lr
	...

08004e04 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e12:	79fb      	ldrb	r3, [r7, #7]
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d165      	bne.n	8004ee4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4a41      	ldr	r2, [pc, #260]	; (8004f20 <USB_SetTurnaroundTime+0x11c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d906      	bls.n	8004e2e <USB_SetTurnaroundTime+0x2a>
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	4a40      	ldr	r2, [pc, #256]	; (8004f24 <USB_SetTurnaroundTime+0x120>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d202      	bcs.n	8004e2e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e28:	230f      	movs	r3, #15
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	e062      	b.n	8004ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	4a3c      	ldr	r2, [pc, #240]	; (8004f24 <USB_SetTurnaroundTime+0x120>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d306      	bcc.n	8004e44 <USB_SetTurnaroundTime+0x40>
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	4a3b      	ldr	r2, [pc, #236]	; (8004f28 <USB_SetTurnaroundTime+0x124>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d202      	bcs.n	8004e44 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e3e:	230e      	movs	r3, #14
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	e057      	b.n	8004ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	4a38      	ldr	r2, [pc, #224]	; (8004f28 <USB_SetTurnaroundTime+0x124>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d306      	bcc.n	8004e5a <USB_SetTurnaroundTime+0x56>
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4a37      	ldr	r2, [pc, #220]	; (8004f2c <USB_SetTurnaroundTime+0x128>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d202      	bcs.n	8004e5a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e54:	230d      	movs	r3, #13
 8004e56:	617b      	str	r3, [r7, #20]
 8004e58:	e04c      	b.n	8004ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	4a33      	ldr	r2, [pc, #204]	; (8004f2c <USB_SetTurnaroundTime+0x128>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d306      	bcc.n	8004e70 <USB_SetTurnaroundTime+0x6c>
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	4a32      	ldr	r2, [pc, #200]	; (8004f30 <USB_SetTurnaroundTime+0x12c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d802      	bhi.n	8004e70 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e6a:	230c      	movs	r3, #12
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	e041      	b.n	8004ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4a2f      	ldr	r2, [pc, #188]	; (8004f30 <USB_SetTurnaroundTime+0x12c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d906      	bls.n	8004e86 <USB_SetTurnaroundTime+0x82>
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	4a2e      	ldr	r2, [pc, #184]	; (8004f34 <USB_SetTurnaroundTime+0x130>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d802      	bhi.n	8004e86 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e80:	230b      	movs	r3, #11
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	e036      	b.n	8004ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	4a2a      	ldr	r2, [pc, #168]	; (8004f34 <USB_SetTurnaroundTime+0x130>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d906      	bls.n	8004e9c <USB_SetTurnaroundTime+0x98>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	4a29      	ldr	r2, [pc, #164]	; (8004f38 <USB_SetTurnaroundTime+0x134>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d802      	bhi.n	8004e9c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e96:	230a      	movs	r3, #10
 8004e98:	617b      	str	r3, [r7, #20]
 8004e9a:	e02b      	b.n	8004ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	4a26      	ldr	r2, [pc, #152]	; (8004f38 <USB_SetTurnaroundTime+0x134>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d906      	bls.n	8004eb2 <USB_SetTurnaroundTime+0xae>
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4a25      	ldr	r2, [pc, #148]	; (8004f3c <USB_SetTurnaroundTime+0x138>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d202      	bcs.n	8004eb2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004eac:	2309      	movs	r3, #9
 8004eae:	617b      	str	r3, [r7, #20]
 8004eb0:	e020      	b.n	8004ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	4a21      	ldr	r2, [pc, #132]	; (8004f3c <USB_SetTurnaroundTime+0x138>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d306      	bcc.n	8004ec8 <USB_SetTurnaroundTime+0xc4>
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	4a20      	ldr	r2, [pc, #128]	; (8004f40 <USB_SetTurnaroundTime+0x13c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d802      	bhi.n	8004ec8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004ec2:	2308      	movs	r3, #8
 8004ec4:	617b      	str	r3, [r7, #20]
 8004ec6:	e015      	b.n	8004ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	4a1d      	ldr	r2, [pc, #116]	; (8004f40 <USB_SetTurnaroundTime+0x13c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d906      	bls.n	8004ede <USB_SetTurnaroundTime+0xda>
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	4a1c      	ldr	r2, [pc, #112]	; (8004f44 <USB_SetTurnaroundTime+0x140>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d202      	bcs.n	8004ede <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004ed8:	2307      	movs	r3, #7
 8004eda:	617b      	str	r3, [r7, #20]
 8004edc:	e00a      	b.n	8004ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004ede:	2306      	movs	r3, #6
 8004ee0:	617b      	str	r3, [r7, #20]
 8004ee2:	e007      	b.n	8004ef4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004ee4:	79fb      	ldrb	r3, [r7, #7]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d102      	bne.n	8004ef0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004eea:	2309      	movs	r3, #9
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	e001      	b.n	8004ef4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ef0:	2309      	movs	r3, #9
 8004ef2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	029b      	lsls	r3, r3, #10
 8004f08:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	371c      	adds	r7, #28
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	00d8acbf 	.word	0x00d8acbf
 8004f24:	00e4e1c0 	.word	0x00e4e1c0
 8004f28:	00f42400 	.word	0x00f42400
 8004f2c:	01067380 	.word	0x01067380
 8004f30:	011a499f 	.word	0x011a499f
 8004f34:	01312cff 	.word	0x01312cff
 8004f38:	014ca43f 	.word	0x014ca43f
 8004f3c:	016e3600 	.word	0x016e3600
 8004f40:	01a6ab1f 	.word	0x01a6ab1f
 8004f44:	01e84800 	.word	0x01e84800

08004f48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f043 0201 	orr.w	r2, r3, #1
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b083      	sub	sp, #12
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f023 0201 	bic.w	r2, r3, #1
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	460b      	mov	r3, r1
 8004f96:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fa8:	78fb      	ldrb	r3, [r7, #3]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d115      	bne.n	8004fda <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fba:	2001      	movs	r0, #1
 8004fbc:	f7fc fe06 	bl	8001bcc <HAL_Delay>
      ms++;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f001 fa45 	bl	8006456 <USB_GetMode>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d01e      	beq.n	8005010 <USB_SetCurrentMode+0x84>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2b31      	cmp	r3, #49	; 0x31
 8004fd6:	d9f0      	bls.n	8004fba <USB_SetCurrentMode+0x2e>
 8004fd8:	e01a      	b.n	8005010 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fda:	78fb      	ldrb	r3, [r7, #3]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d115      	bne.n	800500c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fec:	2001      	movs	r0, #1
 8004fee:	f7fc fded 	bl	8001bcc <HAL_Delay>
      ms++;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f001 fa2c 	bl	8006456 <USB_GetMode>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d005      	beq.n	8005010 <USB_SetCurrentMode+0x84>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2b31      	cmp	r3, #49	; 0x31
 8005008:	d9f0      	bls.n	8004fec <USB_SetCurrentMode+0x60>
 800500a:	e001      	b.n	8005010 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e005      	b.n	800501c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2b32      	cmp	r3, #50	; 0x32
 8005014:	d101      	bne.n	800501a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e000      	b.n	800501c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005024:	b084      	sub	sp, #16
 8005026:	b580      	push	{r7, lr}
 8005028:	b086      	sub	sp, #24
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800503e:	2300      	movs	r3, #0
 8005040:	613b      	str	r3, [r7, #16]
 8005042:	e009      	b.n	8005058 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	3340      	adds	r3, #64	; 0x40
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	2200      	movs	r2, #0
 8005050:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	3301      	adds	r3, #1
 8005056:	613b      	str	r3, [r7, #16]
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	2b0e      	cmp	r3, #14
 800505c:	d9f2      	bls.n	8005044 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800505e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005060:	2b00      	cmp	r3, #0
 8005062:	d11c      	bne.n	800509e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005072:	f043 0302 	orr.w	r3, r3, #2
 8005076:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005088:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005094:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	639a      	str	r2, [r3, #56]	; 0x38
 800509c:	e00b      	b.n	80050b6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050bc:	461a      	mov	r2, r3
 80050be:	2300      	movs	r3, #0
 80050c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c8:	4619      	mov	r1, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d0:	461a      	mov	r2, r3
 80050d2:	680b      	ldr	r3, [r1, #0]
 80050d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d10c      	bne.n	80050f6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d104      	bne.n	80050ec <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050e2:	2100      	movs	r1, #0
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f965 	bl	80053b4 <USB_SetDevSpeed>
 80050ea:	e008      	b.n	80050fe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80050ec:	2101      	movs	r1, #1
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f960 	bl	80053b4 <USB_SetDevSpeed>
 80050f4:	e003      	b.n	80050fe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050f6:	2103      	movs	r1, #3
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f95b 	bl	80053b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050fe:	2110      	movs	r1, #16
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f8f3 	bl	80052ec <USB_FlushTxFifo>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f91f 	bl	8005354 <USB_FlushRxFifo>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005126:	461a      	mov	r2, r3
 8005128:	2300      	movs	r3, #0
 800512a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005132:	461a      	mov	r2, r3
 8005134:	2300      	movs	r3, #0
 8005136:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800513e:	461a      	mov	r2, r3
 8005140:	2300      	movs	r3, #0
 8005142:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005144:	2300      	movs	r3, #0
 8005146:	613b      	str	r3, [r7, #16]
 8005148:	e043      	b.n	80051d2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4413      	add	r3, r2
 8005152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800515c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005160:	d118      	bne.n	8005194 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10a      	bne.n	800517e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005174:	461a      	mov	r2, r3
 8005176:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800517a:	6013      	str	r3, [r2, #0]
 800517c:	e013      	b.n	80051a6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4413      	add	r3, r2
 8005186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518a:	461a      	mov	r2, r3
 800518c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005190:	6013      	str	r3, [r2, #0]
 8005192:	e008      	b.n	80051a6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4413      	add	r3, r2
 800519c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a0:	461a      	mov	r2, r3
 80051a2:	2300      	movs	r3, #0
 80051a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b2:	461a      	mov	r2, r3
 80051b4:	2300      	movs	r3, #0
 80051b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c4:	461a      	mov	r2, r3
 80051c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	3301      	adds	r3, #1
 80051d0:	613b      	str	r3, [r7, #16]
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d3b7      	bcc.n	800514a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051da:	2300      	movs	r3, #0
 80051dc:	613b      	str	r3, [r7, #16]
 80051de:	e043      	b.n	8005268 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051f6:	d118      	bne.n	800522a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10a      	bne.n	8005214 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520a:	461a      	mov	r2, r3
 800520c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005210:	6013      	str	r3, [r2, #0]
 8005212:	e013      	b.n	800523c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005220:	461a      	mov	r2, r3
 8005222:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	e008      	b.n	800523c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005236:	461a      	mov	r2, r3
 8005238:	2300      	movs	r3, #0
 800523a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4413      	add	r3, r2
 8005244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005248:	461a      	mov	r2, r3
 800524a:	2300      	movs	r3, #0
 800524c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525a:	461a      	mov	r2, r3
 800525c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005260:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	3301      	adds	r3, #1
 8005266:	613b      	str	r3, [r7, #16]
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	429a      	cmp	r2, r3
 800526e:	d3b7      	bcc.n	80051e0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800527e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005282:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005290:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005294:	2b00      	cmp	r3, #0
 8005296:	d105      	bne.n	80052a4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	f043 0210 	orr.w	r2, r3, #16
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	699a      	ldr	r2, [r3, #24]
 80052a8:	4b0f      	ldr	r3, [pc, #60]	; (80052e8 <USB_DevInit+0x2c4>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d005      	beq.n	80052c2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	f043 0208 	orr.w	r2, r3, #8
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d107      	bne.n	80052d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052d0:	f043 0304 	orr.w	r3, r3, #4
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3718      	adds	r7, #24
 80052de:	46bd      	mov	sp, r7
 80052e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052e4:	b004      	add	sp, #16
 80052e6:	4770      	bx	lr
 80052e8:	803c3800 	.word	0x803c3800

080052ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3301      	adds	r3, #1
 80052fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4a13      	ldr	r2, [pc, #76]	; (8005350 <USB_FlushTxFifo+0x64>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d901      	bls.n	800530c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e01b      	b.n	8005344 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	daf2      	bge.n	80052fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	019b      	lsls	r3, r3, #6
 800531c:	f043 0220 	orr.w	r2, r3, #32
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	3301      	adds	r3, #1
 8005328:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	4a08      	ldr	r2, [pc, #32]	; (8005350 <USB_FlushTxFifo+0x64>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d901      	bls.n	8005336 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e006      	b.n	8005344 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f003 0320 	and.w	r3, r3, #32
 800533e:	2b20      	cmp	r3, #32
 8005340:	d0f0      	beq.n	8005324 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	00030d40 	.word	0x00030d40

08005354 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	3301      	adds	r3, #1
 8005364:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4a11      	ldr	r2, [pc, #68]	; (80053b0 <USB_FlushRxFifo+0x5c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d901      	bls.n	8005372 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e018      	b.n	80053a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	2b00      	cmp	r3, #0
 8005378:	daf2      	bge.n	8005360 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800537a:	2300      	movs	r3, #0
 800537c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2210      	movs	r2, #16
 8005382:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	3301      	adds	r3, #1
 8005388:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4a08      	ldr	r2, [pc, #32]	; (80053b0 <USB_FlushRxFifo+0x5c>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d901      	bls.n	8005396 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e006      	b.n	80053a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f003 0310 	and.w	r3, r3, #16
 800539e:	2b10      	cmp	r3, #16
 80053a0:	d0f0      	beq.n	8005384 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	00030d40 	.word	0x00030d40

080053b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	460b      	mov	r3, r1
 80053be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	78fb      	ldrb	r3, [r7, #3]
 80053ce:	68f9      	ldr	r1, [r7, #12]
 80053d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053d4:	4313      	orrs	r3, r2
 80053d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b087      	sub	sp, #28
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f003 0306 	and.w	r3, r3, #6
 80053fe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d102      	bne.n	800540c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005406:	2300      	movs	r3, #0
 8005408:	75fb      	strb	r3, [r7, #23]
 800540a:	e00a      	b.n	8005422 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2b02      	cmp	r3, #2
 8005410:	d002      	beq.n	8005418 <USB_GetDevSpeed+0x32>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2b06      	cmp	r3, #6
 8005416:	d102      	bne.n	800541e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005418:	2302      	movs	r3, #2
 800541a:	75fb      	strb	r3, [r7, #23]
 800541c:	e001      	b.n	8005422 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800541e:	230f      	movs	r3, #15
 8005420:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005422:	7dfb      	ldrb	r3, [r7, #23]
}
 8005424:	4618      	mov	r0, r3
 8005426:	371c      	adds	r7, #28
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	785b      	ldrb	r3, [r3, #1]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d13a      	bne.n	80054c2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005452:	69da      	ldr	r2, [r3, #28]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	f003 030f 	and.w	r3, r3, #15
 800545c:	2101      	movs	r1, #1
 800545e:	fa01 f303 	lsl.w	r3, r1, r3
 8005462:	b29b      	uxth	r3, r3
 8005464:	68f9      	ldr	r1, [r7, #12]
 8005466:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800546a:	4313      	orrs	r3, r2
 800546c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	4413      	add	r3, r2
 8005476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d155      	bne.n	8005530 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	791b      	ldrb	r3, [r3, #4]
 800549e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	059b      	lsls	r3, r3, #22
 80054a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054a8:	4313      	orrs	r3, r2
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	0151      	lsls	r1, r2, #5
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	440a      	add	r2, r1
 80054b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	e036      	b.n	8005530 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c8:	69da      	ldr	r2, [r3, #28]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	f003 030f 	and.w	r3, r3, #15
 80054d2:	2101      	movs	r1, #1
 80054d4:	fa01 f303 	lsl.w	r3, r1, r3
 80054d8:	041b      	lsls	r3, r3, #16
 80054da:	68f9      	ldr	r1, [r7, #12]
 80054dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054e0:	4313      	orrs	r3, r2
 80054e2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d11a      	bne.n	8005530 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	791b      	ldrb	r3, [r3, #4]
 8005514:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005516:	430b      	orrs	r3, r1
 8005518:	4313      	orrs	r3, r2
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	0151      	lsls	r1, r2, #5
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	440a      	add	r2, r1
 8005522:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800552a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800552e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
	...

08005540 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	785b      	ldrb	r3, [r3, #1]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d161      	bne.n	8005620 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800556e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005572:	d11f      	bne.n	80055b4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	0151      	lsls	r1, r2, #5
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	440a      	add	r2, r1
 800558a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800558e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005592:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	0151      	lsls	r1, r2, #5
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	440a      	add	r2, r1
 80055aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	f003 030f 	and.w	r3, r3, #15
 80055c4:	2101      	movs	r1, #1
 80055c6:	fa01 f303 	lsl.w	r3, r1, r3
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	43db      	mvns	r3, r3
 80055ce:	68f9      	ldr	r1, [r7, #12]
 80055d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055d4:	4013      	ands	r3, r2
 80055d6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055de:	69da      	ldr	r2, [r3, #28]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	f003 030f 	and.w	r3, r3, #15
 80055e8:	2101      	movs	r1, #1
 80055ea:	fa01 f303 	lsl.w	r3, r1, r3
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	43db      	mvns	r3, r3
 80055f2:	68f9      	ldr	r1, [r7, #12]
 80055f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055f8:	4013      	ands	r3, r2
 80055fa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	0159      	lsls	r1, r3, #5
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	440b      	add	r3, r1
 8005612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005616:	4619      	mov	r1, r3
 8005618:	4b35      	ldr	r3, [pc, #212]	; (80056f0 <USB_DeactivateEndpoint+0x1b0>)
 800561a:	4013      	ands	r3, r2
 800561c:	600b      	str	r3, [r1, #0]
 800561e:	e060      	b.n	80056e2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005636:	d11f      	bne.n	8005678 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	0151      	lsls	r1, r2, #5
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	440a      	add	r2, r1
 800564e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005652:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005656:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4413      	add	r3, r2
 8005660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	0151      	lsls	r1, r2, #5
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	440a      	add	r2, r1
 800566e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005672:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005676:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800567e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	f003 030f 	and.w	r3, r3, #15
 8005688:	2101      	movs	r1, #1
 800568a:	fa01 f303 	lsl.w	r3, r1, r3
 800568e:	041b      	lsls	r3, r3, #16
 8005690:	43db      	mvns	r3, r3
 8005692:	68f9      	ldr	r1, [r7, #12]
 8005694:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005698:	4013      	ands	r3, r2
 800569a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a2:	69da      	ldr	r2, [r3, #28]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	f003 030f 	and.w	r3, r3, #15
 80056ac:	2101      	movs	r1, #1
 80056ae:	fa01 f303 	lsl.w	r3, r1, r3
 80056b2:	041b      	lsls	r3, r3, #16
 80056b4:	43db      	mvns	r3, r3
 80056b6:	68f9      	ldr	r1, [r7, #12]
 80056b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056bc:	4013      	ands	r3, r2
 80056be:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	0159      	lsls	r1, r3, #5
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	440b      	add	r3, r1
 80056d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056da:	4619      	mov	r1, r3
 80056dc:	4b05      	ldr	r3, [pc, #20]	; (80056f4 <USB_DeactivateEndpoint+0x1b4>)
 80056de:	4013      	ands	r3, r2
 80056e0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	ec337800 	.word	0xec337800
 80056f4:	eff37800 	.word	0xeff37800

080056f8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08a      	sub	sp, #40	; 0x28
 80056fc:	af02      	add	r7, sp, #8
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	4613      	mov	r3, r2
 8005704:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	785b      	ldrb	r3, [r3, #1]
 8005714:	2b01      	cmp	r3, #1
 8005716:	f040 815c 	bne.w	80059d2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d132      	bne.n	8005788 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	4413      	add	r3, r2
 800572a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	0151      	lsls	r1, r2, #5
 8005734:	69fa      	ldr	r2, [r7, #28]
 8005736:	440a      	add	r2, r1
 8005738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800573c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005740:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005744:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	4413      	add	r3, r2
 800574e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	0151      	lsls	r1, r2, #5
 8005758:	69fa      	ldr	r2, [r7, #28]
 800575a:	440a      	add	r2, r1
 800575c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005760:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005764:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	015a      	lsls	r2, r3, #5
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	4413      	add	r3, r2
 800576e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	0151      	lsls	r1, r2, #5
 8005778:	69fa      	ldr	r2, [r7, #28]
 800577a:	440a      	add	r2, r1
 800577c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005780:	0cdb      	lsrs	r3, r3, #19
 8005782:	04db      	lsls	r3, r3, #19
 8005784:	6113      	str	r3, [r2, #16]
 8005786:	e074      	b.n	8005872 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	4413      	add	r3, r2
 8005790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	0151      	lsls	r1, r2, #5
 800579a:	69fa      	ldr	r2, [r7, #28]
 800579c:	440a      	add	r2, r1
 800579e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a2:	0cdb      	lsrs	r3, r3, #19
 80057a4:	04db      	lsls	r3, r3, #19
 80057a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	0151      	lsls	r1, r2, #5
 80057ba:	69fa      	ldr	r2, [r7, #28]
 80057bc:	440a      	add	r2, r1
 80057be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	6999      	ldr	r1, [r3, #24]
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	440b      	add	r3, r1
 80057e4:	1e59      	subs	r1, r3, #1
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80057ee:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80057f0:	4b9d      	ldr	r3, [pc, #628]	; (8005a68 <USB_EPStartXfer+0x370>)
 80057f2:	400b      	ands	r3, r1
 80057f4:	69b9      	ldr	r1, [r7, #24]
 80057f6:	0148      	lsls	r0, r1, #5
 80057f8:	69f9      	ldr	r1, [r7, #28]
 80057fa:	4401      	add	r1, r0
 80057fc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005800:	4313      	orrs	r3, r2
 8005802:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005810:	691a      	ldr	r2, [r3, #16]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800581a:	69b9      	ldr	r1, [r7, #24]
 800581c:	0148      	lsls	r0, r1, #5
 800581e:	69f9      	ldr	r1, [r7, #28]
 8005820:	4401      	add	r1, r0
 8005822:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005826:	4313      	orrs	r3, r2
 8005828:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	791b      	ldrb	r3, [r3, #4]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d11f      	bne.n	8005872 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	0151      	lsls	r1, r2, #5
 8005844:	69fa      	ldr	r2, [r7, #28]
 8005846:	440a      	add	r2, r1
 8005848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800584c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005850:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	0151      	lsls	r1, r2, #5
 8005864:	69fa      	ldr	r2, [r7, #28]
 8005866:	440a      	add	r2, r1
 8005868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800586c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005870:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005872:	79fb      	ldrb	r3, [r7, #7]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d14b      	bne.n	8005910 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d009      	beq.n	8005894 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	4413      	add	r3, r2
 8005888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800588c:	461a      	mov	r2, r3
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	791b      	ldrb	r3, [r3, #4]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d128      	bne.n	80058ee <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d110      	bne.n	80058ce <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	0151      	lsls	r1, r2, #5
 80058be:	69fa      	ldr	r2, [r7, #28]
 80058c0:	440a      	add	r2, r1
 80058c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058ca:	6013      	str	r3, [r2, #0]
 80058cc:	e00f      	b.n	80058ee <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	0151      	lsls	r1, r2, #5
 80058e0:	69fa      	ldr	r2, [r7, #28]
 80058e2:	440a      	add	r2, r1
 80058e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ec:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	015a      	lsls	r2, r3, #5
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	0151      	lsls	r1, r2, #5
 8005900:	69fa      	ldr	r2, [r7, #28]
 8005902:	440a      	add	r2, r1
 8005904:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005908:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800590c:	6013      	str	r3, [r2, #0]
 800590e:	e133      	b.n	8005b78 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	0151      	lsls	r1, r2, #5
 8005922:	69fa      	ldr	r2, [r7, #28]
 8005924:	440a      	add	r2, r1
 8005926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800592a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800592e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	791b      	ldrb	r3, [r3, #4]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d015      	beq.n	8005964 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 811b 	beq.w	8005b78 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	2101      	movs	r1, #1
 8005954:	fa01 f303 	lsl.w	r3, r1, r3
 8005958:	69f9      	ldr	r1, [r7, #28]
 800595a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800595e:	4313      	orrs	r3, r2
 8005960:	634b      	str	r3, [r1, #52]	; 0x34
 8005962:	e109      	b.n	8005b78 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005970:	2b00      	cmp	r3, #0
 8005972:	d110      	bne.n	8005996 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	4413      	add	r3, r2
 800597c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	0151      	lsls	r1, r2, #5
 8005986:	69fa      	ldr	r2, [r7, #28]
 8005988:	440a      	add	r2, r1
 800598a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800598e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005992:	6013      	str	r3, [r2, #0]
 8005994:	e00f      	b.n	80059b6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	4413      	add	r3, r2
 800599e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	0151      	lsls	r1, r2, #5
 80059a8:	69fa      	ldr	r2, [r7, #28]
 80059aa:	440a      	add	r2, r1
 80059ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059b4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	6919      	ldr	r1, [r3, #16]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	781a      	ldrb	r2, [r3, #0]
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	b298      	uxth	r0, r3
 80059c4:	79fb      	ldrb	r3, [r7, #7]
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	4603      	mov	r3, r0
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 fade 	bl	8005f8c <USB_WritePacket>
 80059d0:	e0d2      	b.n	8005b78 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	0151      	lsls	r1, r2, #5
 80059e4:	69fa      	ldr	r2, [r7, #28]
 80059e6:	440a      	add	r2, r1
 80059e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ec:	0cdb      	lsrs	r3, r3, #19
 80059ee:	04db      	lsls	r3, r3, #19
 80059f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	0151      	lsls	r1, r2, #5
 8005a04:	69fa      	ldr	r2, [r7, #28]
 8005a06:	440a      	add	r2, r1
 8005a08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a14:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d126      	bne.n	8005a6c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2a:	691a      	ldr	r2, [r3, #16]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a34:	69b9      	ldr	r1, [r7, #24]
 8005a36:	0148      	lsls	r0, r1, #5
 8005a38:	69f9      	ldr	r1, [r7, #28]
 8005a3a:	4401      	add	r1, r0
 8005a3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a40:	4313      	orrs	r3, r2
 8005a42:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	0151      	lsls	r1, r2, #5
 8005a56:	69fa      	ldr	r2, [r7, #28]
 8005a58:	440a      	add	r2, r1
 8005a5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a62:	6113      	str	r3, [r2, #16]
 8005a64:	e03a      	b.n	8005adc <USB_EPStartXfer+0x3e4>
 8005a66:	bf00      	nop
 8005a68:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	699a      	ldr	r2, [r3, #24]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	4413      	add	r3, r2
 8005a76:	1e5a      	subs	r2, r3, #1
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a80:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	8afa      	ldrh	r2, [r7, #22]
 8005a88:	fb03 f202 	mul.w	r2, r3, r2
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9c:	691a      	ldr	r2, [r3, #16]
 8005a9e:	8afb      	ldrh	r3, [r7, #22]
 8005aa0:	04d9      	lsls	r1, r3, #19
 8005aa2:	4b38      	ldr	r3, [pc, #224]	; (8005b84 <USB_EPStartXfer+0x48c>)
 8005aa4:	400b      	ands	r3, r1
 8005aa6:	69b9      	ldr	r1, [r7, #24]
 8005aa8:	0148      	lsls	r0, r1, #5
 8005aaa:	69f9      	ldr	r1, [r7, #28]
 8005aac:	4401      	add	r1, r0
 8005aae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac2:	691a      	ldr	r2, [r3, #16]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	69db      	ldr	r3, [r3, #28]
 8005ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005acc:	69b9      	ldr	r1, [r7, #24]
 8005ace:	0148      	lsls	r0, r1, #5
 8005ad0:	69f9      	ldr	r1, [r7, #28]
 8005ad2:	4401      	add	r1, r0
 8005ad4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005adc:	79fb      	ldrb	r3, [r7, #7]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d10d      	bne.n	8005afe <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d009      	beq.n	8005afe <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	6919      	ldr	r1, [r3, #16]
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afa:	460a      	mov	r2, r1
 8005afc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	791b      	ldrb	r3, [r3, #4]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d128      	bne.n	8005b58 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d110      	bne.n	8005b38 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	0151      	lsls	r1, r2, #5
 8005b28:	69fa      	ldr	r2, [r7, #28]
 8005b2a:	440a      	add	r2, r1
 8005b2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b34:	6013      	str	r3, [r2, #0]
 8005b36:	e00f      	b.n	8005b58 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	69ba      	ldr	r2, [r7, #24]
 8005b48:	0151      	lsls	r1, r2, #5
 8005b4a:	69fa      	ldr	r2, [r7, #28]
 8005b4c:	440a      	add	r2, r1
 8005b4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b56:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	0151      	lsls	r1, r2, #5
 8005b6a:	69fa      	ldr	r2, [r7, #28]
 8005b6c:	440a      	add	r2, r1
 8005b6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3720      	adds	r7, #32
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	1ff80000 	.word	0x1ff80000

08005b88 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	4613      	mov	r3, r2
 8005b94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	785b      	ldrb	r3, [r3, #1]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	f040 80ce 	bne.w	8005d46 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d132      	bne.n	8005c18 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	0151      	lsls	r1, r2, #5
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	440a      	add	r2, r1
 8005bc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	0151      	lsls	r1, r2, #5
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	440a      	add	r2, r1
 8005bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	0151      	lsls	r1, r2, #5
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	440a      	add	r2, r1
 8005c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c10:	0cdb      	lsrs	r3, r3, #19
 8005c12:	04db      	lsls	r3, r3, #19
 8005c14:	6113      	str	r3, [r2, #16]
 8005c16:	e04e      	b.n	8005cb6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	0151      	lsls	r1, r2, #5
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	440a      	add	r2, r1
 8005c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c32:	0cdb      	lsrs	r3, r3, #19
 8005c34:	04db      	lsls	r3, r3, #19
 8005c36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	0151      	lsls	r1, r2, #5
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	440a      	add	r2, r1
 8005c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c5a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	699a      	ldr	r2, [r3, #24]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d903      	bls.n	8005c70 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	0151      	lsls	r1, r2, #5
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	440a      	add	r2, r1
 8005c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9c:	691a      	ldr	r2, [r3, #16]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ca6:	6939      	ldr	r1, [r7, #16]
 8005ca8:	0148      	lsls	r0, r1, #5
 8005caa:	6979      	ldr	r1, [r7, #20]
 8005cac:	4401      	add	r1, r0
 8005cae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005cb6:	79fb      	ldrb	r3, [r7, #7]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d11e      	bne.n	8005cfa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d009      	beq.n	8005cd8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	0151      	lsls	r1, r2, #5
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	440a      	add	r2, r1
 8005cee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cf6:	6013      	str	r3, [r2, #0]
 8005cf8:	e097      	b.n	8005e2a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	0151      	lsls	r1, r2, #5
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	440a      	add	r2, r1
 8005d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d18:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 8083 	beq.w	8005e2a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	f003 030f 	and.w	r3, r3, #15
 8005d34:	2101      	movs	r1, #1
 8005d36:	fa01 f303 	lsl.w	r3, r1, r3
 8005d3a:	6979      	ldr	r1, [r7, #20]
 8005d3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d40:	4313      	orrs	r3, r2
 8005d42:	634b      	str	r3, [r1, #52]	; 0x34
 8005d44:	e071      	b.n	8005e2a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	0151      	lsls	r1, r2, #5
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	440a      	add	r2, r1
 8005d5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d60:	0cdb      	lsrs	r3, r3, #19
 8005d62:	04db      	lsls	r3, r3, #19
 8005d64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	0151      	lsls	r1, r2, #5
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	440a      	add	r2, r1
 8005d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d88:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	68da      	ldr	r2, [r3, #12]
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	0151      	lsls	r1, r2, #5
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	440a      	add	r2, r1
 8005db8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dce:	691a      	ldr	r2, [r3, #16]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dd8:	6939      	ldr	r1, [r7, #16]
 8005dda:	0148      	lsls	r0, r1, #5
 8005ddc:	6979      	ldr	r1, [r7, #20]
 8005dde:	4401      	add	r1, r0
 8005de0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005de4:	4313      	orrs	r3, r2
 8005de6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005de8:	79fb      	ldrb	r3, [r7, #7]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d10d      	bne.n	8005e0a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d009      	beq.n	8005e0a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	6919      	ldr	r1, [r3, #16]
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e06:	460a      	mov	r2, r1
 8005e08:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	0151      	lsls	r1, r2, #5
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	440a      	add	r2, r1
 8005e20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e28:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	371c      	adds	r7, #28
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	785b      	ldrb	r3, [r3, #1]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d14a      	bne.n	8005eec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e6e:	f040 8086 	bne.w	8005f7e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	7812      	ldrb	r2, [r2, #0]
 8005e86:	0151      	lsls	r1, r2, #5
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	440a      	add	r2, r1
 8005e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e94:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	7812      	ldrb	r2, [r2, #0]
 8005eaa:	0151      	lsls	r1, r2, #5
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	440a      	add	r2, r1
 8005eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eb8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f242 7210 	movw	r2, #10000	; 0x2710
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d902      	bls.n	8005ed0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	75fb      	strb	r3, [r7, #23]
          break;
 8005ece:	e056      	b.n	8005f7e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ee8:	d0e7      	beq.n	8005eba <USB_EPStopXfer+0x82>
 8005eea:	e048      	b.n	8005f7e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f04:	d13b      	bne.n	8005f7e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	7812      	ldrb	r2, [r2, #0]
 8005f1a:	0151      	lsls	r1, r2, #5
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	440a      	add	r2, r1
 8005f20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f28:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	7812      	ldrb	r2, [r2, #0]
 8005f3e:	0151      	lsls	r1, r2, #5
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	440a      	add	r2, r1
 8005f44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f4c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	3301      	adds	r3, #1
 8005f52:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d902      	bls.n	8005f64 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	75fb      	strb	r3, [r7, #23]
          break;
 8005f62:	e00c      	b.n	8005f7e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f7c:	d0e7      	beq.n	8005f4e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	371c      	adds	r7, #28
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b089      	sub	sp, #36	; 0x24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	4611      	mov	r1, r2
 8005f98:	461a      	mov	r2, r3
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	71fb      	strb	r3, [r7, #7]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005faa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d123      	bne.n	8005ffa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005fb2:	88bb      	ldrh	r3, [r7, #4]
 8005fb4:	3303      	adds	r3, #3
 8005fb6:	089b      	lsrs	r3, r3, #2
 8005fb8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005fba:	2300      	movs	r3, #0
 8005fbc:	61bb      	str	r3, [r7, #24]
 8005fbe:	e018      	b.n	8005ff2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005fc0:	79fb      	ldrb	r3, [r7, #7]
 8005fc2:	031a      	lsls	r2, r3, #12
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fcc:	461a      	mov	r2, r3
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	61bb      	str	r3, [r7, #24]
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d3e2      	bcc.n	8005fc0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3724      	adds	r7, #36	; 0x24
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006008:	b480      	push	{r7}
 800600a:	b08b      	sub	sp, #44	; 0x2c
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	4613      	mov	r3, r2
 8006014:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800601e:	88fb      	ldrh	r3, [r7, #6]
 8006020:	089b      	lsrs	r3, r3, #2
 8006022:	b29b      	uxth	r3, r3
 8006024:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006026:	88fb      	ldrh	r3, [r7, #6]
 8006028:	f003 0303 	and.w	r3, r3, #3
 800602c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800602e:	2300      	movs	r3, #0
 8006030:	623b      	str	r3, [r7, #32]
 8006032:	e014      	b.n	800605e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	3301      	adds	r3, #1
 8006044:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	3301      	adds	r3, #1
 800604a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604e:	3301      	adds	r3, #1
 8006050:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	3301      	adds	r3, #1
 8006056:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	3301      	adds	r3, #1
 800605c:	623b      	str	r3, [r7, #32]
 800605e:	6a3a      	ldr	r2, [r7, #32]
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	429a      	cmp	r2, r3
 8006064:	d3e6      	bcc.n	8006034 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006066:	8bfb      	ldrh	r3, [r7, #30]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d01e      	beq.n	80060aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800606c:	2300      	movs	r3, #0
 800606e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006076:	461a      	mov	r2, r3
 8006078:	f107 0310 	add.w	r3, r7, #16
 800607c:	6812      	ldr	r2, [r2, #0]
 800607e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	b2db      	uxtb	r3, r3
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	fa22 f303 	lsr.w	r3, r2, r3
 800608c:	b2da      	uxtb	r2, r3
 800608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006090:	701a      	strb	r2, [r3, #0]
      i++;
 8006092:	6a3b      	ldr	r3, [r7, #32]
 8006094:	3301      	adds	r3, #1
 8006096:	623b      	str	r3, [r7, #32]
      pDest++;
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609a:	3301      	adds	r3, #1
 800609c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800609e:	8bfb      	ldrh	r3, [r7, #30]
 80060a0:	3b01      	subs	r3, #1
 80060a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80060a4:	8bfb      	ldrh	r3, [r7, #30]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1ea      	bne.n	8006080 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	372c      	adds	r7, #44	; 0x2c
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	785b      	ldrb	r3, [r3, #1]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d12c      	bne.n	800612e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	db12      	blt.n	800610c <USB_EPSetStall+0x54>
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00f      	beq.n	800610c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	0151      	lsls	r1, r2, #5
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	440a      	add	r2, r1
 8006102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006106:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800610a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	0151      	lsls	r1, r2, #5
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	440a      	add	r2, r1
 8006122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006126:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800612a:	6013      	str	r3, [r2, #0]
 800612c:	e02b      	b.n	8006186 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	db12      	blt.n	8006166 <USB_EPSetStall+0xae>
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00f      	beq.n	8006166 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4413      	add	r3, r2
 800614e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	0151      	lsls	r1, r2, #5
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	440a      	add	r2, r1
 800615c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006160:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006164:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	4413      	add	r3, r2
 800616e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	0151      	lsls	r1, r2, #5
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	440a      	add	r2, r1
 800617c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006180:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006184:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	785b      	ldrb	r3, [r3, #1]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d128      	bne.n	8006202 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	0151      	lsls	r1, r2, #5
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	440a      	add	r2, r1
 80061c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	791b      	ldrb	r3, [r3, #4]
 80061d4:	2b03      	cmp	r3, #3
 80061d6:	d003      	beq.n	80061e0 <USB_EPClearStall+0x4c>
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	791b      	ldrb	r3, [r3, #4]
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d138      	bne.n	8006252 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	0151      	lsls	r1, r2, #5
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	440a      	add	r2, r1
 80061f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061fe:	6013      	str	r3, [r2, #0]
 8006200:	e027      	b.n	8006252 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	015a      	lsls	r2, r3, #5
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	4413      	add	r3, r2
 800620a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	0151      	lsls	r1, r2, #5
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	440a      	add	r2, r1
 8006218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800621c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006220:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	791b      	ldrb	r3, [r3, #4]
 8006226:	2b03      	cmp	r3, #3
 8006228:	d003      	beq.n	8006232 <USB_EPClearStall+0x9e>
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	791b      	ldrb	r3, [r3, #4]
 800622e:	2b02      	cmp	r3, #2
 8006230:	d10f      	bne.n	8006252 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	4413      	add	r3, r2
 800623a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	0151      	lsls	r1, r2, #5
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	440a      	add	r2, r1
 8006248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800624c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006250:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800627e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006282:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	78fb      	ldrb	r3, [r7, #3]
 800628e:	011b      	lsls	r3, r3, #4
 8006290:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006294:	68f9      	ldr	r1, [r7, #12]
 8006296:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800629a:	4313      	orrs	r3, r2
 800629c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80062c6:	f023 0303 	bic.w	r3, r3, #3
 80062ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062da:	f023 0302 	bic.w	r3, r3, #2
 80062de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b085      	sub	sp, #20
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006308:	f023 0303 	bic.w	r3, r3, #3
 800630c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800631c:	f043 0302 	orr.w	r3, r3, #2
 8006320:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4013      	ands	r3, r2
 8006346:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006348:	68fb      	ldr	r3, [r7, #12]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006356:	b480      	push	{r7}
 8006358:	b085      	sub	sp, #20
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	4013      	ands	r3, r2
 8006378:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	0c1b      	lsrs	r3, r3, #16
}
 800637e:	4618      	mov	r0, r3
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800638a:	b480      	push	{r7}
 800638c:	b085      	sub	sp, #20
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a6:	69db      	ldr	r3, [r3, #28]
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	4013      	ands	r3, r2
 80063ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	b29b      	uxth	r3, r3
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063be:	b480      	push	{r7}
 80063c0:	b085      	sub	sp, #20
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	460b      	mov	r3, r1
 80063c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80063ce:	78fb      	ldrb	r3, [r7, #3]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	4013      	ands	r3, r2
 80063ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063ec:	68bb      	ldr	r3, [r7, #8]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b087      	sub	sp, #28
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	460b      	mov	r3, r1
 8006404:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800641a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800641c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800641e:	78fb      	ldrb	r3, [r7, #3]
 8006420:	f003 030f 	and.w	r3, r3, #15
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	fa22 f303 	lsr.w	r3, r2, r3
 800642a:	01db      	lsls	r3, r3, #7
 800642c:	b2db      	uxtb	r3, r3
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	4313      	orrs	r3, r2
 8006432:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006434:	78fb      	ldrb	r3, [r7, #3]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	4413      	add	r3, r2
 800643c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	4013      	ands	r3, r2
 8006446:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006448:	68bb      	ldr	r3, [r7, #8]
}
 800644a:	4618      	mov	r0, r3
 800644c:	371c      	adds	r7, #28
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006456:	b480      	push	{r7}
 8006458:	b083      	sub	sp, #12
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	f003 0301 	and.w	r3, r3, #1
}
 8006466:	4618      	mov	r0, r3
 8006468:	370c      	adds	r7, #12
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006472:	b480      	push	{r7}
 8006474:	b085      	sub	sp, #20
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800648c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006490:	f023 0307 	bic.w	r3, r3, #7
 8006494:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	460b      	mov	r3, r1
 80064c2:	607a      	str	r2, [r7, #4]
 80064c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	333c      	adds	r3, #60	; 0x3c
 80064ce:	3304      	adds	r3, #4
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	4a26      	ldr	r2, [pc, #152]	; (8006570 <USB_EP0_OutStart+0xb8>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d90a      	bls.n	80064f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064ec:	d101      	bne.n	80064f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	e037      	b.n	8006562 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f8:	461a      	mov	r2, r3
 80064fa:	2300      	movs	r3, #0
 80064fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800650c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006510:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006520:	f043 0318 	orr.w	r3, r3, #24
 8006524:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006534:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006538:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800653a:	7afb      	ldrb	r3, [r7, #11]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d10f      	bne.n	8006560 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006546:	461a      	mov	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800655a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800655e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	371c      	adds	r7, #28
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	4f54300a 	.word	0x4f54300a

08006574 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800657c:	2300      	movs	r3, #0
 800657e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	3301      	adds	r3, #1
 8006584:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4a13      	ldr	r2, [pc, #76]	; (80065d8 <USB_CoreReset+0x64>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d901      	bls.n	8006592 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e01b      	b.n	80065ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	2b00      	cmp	r3, #0
 8006598:	daf2      	bge.n	8006580 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800659a:	2300      	movs	r3, #0
 800659c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	f043 0201 	orr.w	r2, r3, #1
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	3301      	adds	r3, #1
 80065ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4a09      	ldr	r2, [pc, #36]	; (80065d8 <USB_CoreReset+0x64>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d901      	bls.n	80065bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e006      	b.n	80065ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d0f0      	beq.n	80065aa <USB_CoreReset+0x36>

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	00030d40 	.word	0x00030d40

080065dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	460b      	mov	r3, r1
 80065e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80065e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80065ec:	f002 fc90 	bl	8008f10 <USBD_static_malloc>
 80065f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d109      	bne.n	800660c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	32b0      	adds	r2, #176	; 0xb0
 8006602:	2100      	movs	r1, #0
 8006604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006608:	2302      	movs	r3, #2
 800660a:	e0d4      	b.n	80067b6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800660c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006610:	2100      	movs	r1, #0
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f002 fcc0 	bl	8008f98 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	32b0      	adds	r2, #176	; 0xb0
 8006622:	68f9      	ldr	r1, [r7, #12]
 8006624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	32b0      	adds	r2, #176	; 0xb0
 8006632:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	7c1b      	ldrb	r3, [r3, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d138      	bne.n	80066b6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006644:	4b5e      	ldr	r3, [pc, #376]	; (80067c0 <USBD_CDC_Init+0x1e4>)
 8006646:	7819      	ldrb	r1, [r3, #0]
 8006648:	f44f 7300 	mov.w	r3, #512	; 0x200
 800664c:	2202      	movs	r2, #2
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f002 fb3b 	bl	8008cca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006654:	4b5a      	ldr	r3, [pc, #360]	; (80067c0 <USBD_CDC_Init+0x1e4>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	f003 020f 	and.w	r2, r3, #15
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	4613      	mov	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	440b      	add	r3, r1
 8006668:	3324      	adds	r3, #36	; 0x24
 800666a:	2201      	movs	r2, #1
 800666c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800666e:	4b55      	ldr	r3, [pc, #340]	; (80067c4 <USBD_CDC_Init+0x1e8>)
 8006670:	7819      	ldrb	r1, [r3, #0]
 8006672:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006676:	2202      	movs	r2, #2
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f002 fb26 	bl	8008cca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800667e:	4b51      	ldr	r3, [pc, #324]	; (80067c4 <USBD_CDC_Init+0x1e8>)
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	f003 020f 	and.w	r2, r3, #15
 8006686:	6879      	ldr	r1, [r7, #4]
 8006688:	4613      	mov	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	440b      	add	r3, r1
 8006692:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006696:	2201      	movs	r2, #1
 8006698:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800669a:	4b4b      	ldr	r3, [pc, #300]	; (80067c8 <USBD_CDC_Init+0x1ec>)
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	f003 020f 	and.w	r2, r3, #15
 80066a2:	6879      	ldr	r1, [r7, #4]
 80066a4:	4613      	mov	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	440b      	add	r3, r1
 80066ae:	3326      	adds	r3, #38	; 0x26
 80066b0:	2210      	movs	r2, #16
 80066b2:	801a      	strh	r2, [r3, #0]
 80066b4:	e035      	b.n	8006722 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80066b6:	4b42      	ldr	r3, [pc, #264]	; (80067c0 <USBD_CDC_Init+0x1e4>)
 80066b8:	7819      	ldrb	r1, [r3, #0]
 80066ba:	2340      	movs	r3, #64	; 0x40
 80066bc:	2202      	movs	r2, #2
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f002 fb03 	bl	8008cca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80066c4:	4b3e      	ldr	r3, [pc, #248]	; (80067c0 <USBD_CDC_Init+0x1e4>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	f003 020f 	and.w	r2, r3, #15
 80066cc:	6879      	ldr	r1, [r7, #4]
 80066ce:	4613      	mov	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	440b      	add	r3, r1
 80066d8:	3324      	adds	r3, #36	; 0x24
 80066da:	2201      	movs	r2, #1
 80066dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80066de:	4b39      	ldr	r3, [pc, #228]	; (80067c4 <USBD_CDC_Init+0x1e8>)
 80066e0:	7819      	ldrb	r1, [r3, #0]
 80066e2:	2340      	movs	r3, #64	; 0x40
 80066e4:	2202      	movs	r2, #2
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f002 faef 	bl	8008cca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80066ec:	4b35      	ldr	r3, [pc, #212]	; (80067c4 <USBD_CDC_Init+0x1e8>)
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	f003 020f 	and.w	r2, r3, #15
 80066f4:	6879      	ldr	r1, [r7, #4]
 80066f6:	4613      	mov	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	440b      	add	r3, r1
 8006700:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006704:	2201      	movs	r2, #1
 8006706:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006708:	4b2f      	ldr	r3, [pc, #188]	; (80067c8 <USBD_CDC_Init+0x1ec>)
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	f003 020f 	and.w	r2, r3, #15
 8006710:	6879      	ldr	r1, [r7, #4]
 8006712:	4613      	mov	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	440b      	add	r3, r1
 800671c:	3326      	adds	r3, #38	; 0x26
 800671e:	2210      	movs	r2, #16
 8006720:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006722:	4b29      	ldr	r3, [pc, #164]	; (80067c8 <USBD_CDC_Init+0x1ec>)
 8006724:	7819      	ldrb	r1, [r3, #0]
 8006726:	2308      	movs	r3, #8
 8006728:	2203      	movs	r2, #3
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f002 facd 	bl	8008cca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006730:	4b25      	ldr	r3, [pc, #148]	; (80067c8 <USBD_CDC_Init+0x1ec>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	f003 020f 	and.w	r2, r3, #15
 8006738:	6879      	ldr	r1, [r7, #4]
 800673a:	4613      	mov	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	440b      	add	r3, r1
 8006744:	3324      	adds	r3, #36	; 0x24
 8006746:	2201      	movs	r2, #1
 8006748:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	33b0      	adds	r3, #176	; 0xb0
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006780:	2302      	movs	r3, #2
 8006782:	e018      	b.n	80067b6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	7c1b      	ldrb	r3, [r3, #16]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10a      	bne.n	80067a2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800678c:	4b0d      	ldr	r3, [pc, #52]	; (80067c4 <USBD_CDC_Init+0x1e8>)
 800678e:	7819      	ldrb	r1, [r3, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006796:	f44f 7300 	mov.w	r3, #512	; 0x200
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f002 fb84 	bl	8008ea8 <USBD_LL_PrepareReceive>
 80067a0:	e008      	b.n	80067b4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067a2:	4b08      	ldr	r3, [pc, #32]	; (80067c4 <USBD_CDC_Init+0x1e8>)
 80067a4:	7819      	ldrb	r1, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067ac:	2340      	movs	r3, #64	; 0x40
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f002 fb7a 	bl	8008ea8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	20000097 	.word	0x20000097
 80067c4:	20000098 	.word	0x20000098
 80067c8:	20000099 	.word	0x20000099

080067cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	460b      	mov	r3, r1
 80067d6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80067d8:	4b3a      	ldr	r3, [pc, #232]	; (80068c4 <USBD_CDC_DeInit+0xf8>)
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	4619      	mov	r1, r3
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f002 fa99 	bl	8008d16 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80067e4:	4b37      	ldr	r3, [pc, #220]	; (80068c4 <USBD_CDC_DeInit+0xf8>)
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	f003 020f 	and.w	r2, r3, #15
 80067ec:	6879      	ldr	r1, [r7, #4]
 80067ee:	4613      	mov	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	440b      	add	r3, r1
 80067f8:	3324      	adds	r3, #36	; 0x24
 80067fa:	2200      	movs	r2, #0
 80067fc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80067fe:	4b32      	ldr	r3, [pc, #200]	; (80068c8 <USBD_CDC_DeInit+0xfc>)
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	4619      	mov	r1, r3
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f002 fa86 	bl	8008d16 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800680a:	4b2f      	ldr	r3, [pc, #188]	; (80068c8 <USBD_CDC_DeInit+0xfc>)
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	f003 020f 	and.w	r2, r3, #15
 8006812:	6879      	ldr	r1, [r7, #4]
 8006814:	4613      	mov	r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	440b      	add	r3, r1
 800681e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006822:	2200      	movs	r2, #0
 8006824:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006826:	4b29      	ldr	r3, [pc, #164]	; (80068cc <USBD_CDC_DeInit+0x100>)
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	4619      	mov	r1, r3
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f002 fa72 	bl	8008d16 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006832:	4b26      	ldr	r3, [pc, #152]	; (80068cc <USBD_CDC_DeInit+0x100>)
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	f003 020f 	and.w	r2, r3, #15
 800683a:	6879      	ldr	r1, [r7, #4]
 800683c:	4613      	mov	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	440b      	add	r3, r1
 8006846:	3324      	adds	r3, #36	; 0x24
 8006848:	2200      	movs	r2, #0
 800684a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800684c:	4b1f      	ldr	r3, [pc, #124]	; (80068cc <USBD_CDC_DeInit+0x100>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	f003 020f 	and.w	r2, r3, #15
 8006854:	6879      	ldr	r1, [r7, #4]
 8006856:	4613      	mov	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	440b      	add	r3, r1
 8006860:	3326      	adds	r3, #38	; 0x26
 8006862:	2200      	movs	r2, #0
 8006864:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	32b0      	adds	r2, #176	; 0xb0
 8006870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d01f      	beq.n	80068b8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	33b0      	adds	r3, #176	; 0xb0
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	32b0      	adds	r2, #176	; 0xb0
 8006896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800689a:	4618      	mov	r0, r3
 800689c:	f002 fb46 	bl	8008f2c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	32b0      	adds	r2, #176	; 0xb0
 80068aa:	2100      	movs	r1, #0
 80068ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	20000097 	.word	0x20000097
 80068c8:	20000098 	.word	0x20000098
 80068cc:	20000099 	.word	0x20000099

080068d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	32b0      	adds	r2, #176	; 0xb0
 80068e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80068ee:	2300      	movs	r3, #0
 80068f0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80068f2:	2300      	movs	r3, #0
 80068f4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d101      	bne.n	8006900 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e0bf      	b.n	8006a80 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006908:	2b00      	cmp	r3, #0
 800690a:	d050      	beq.n	80069ae <USBD_CDC_Setup+0xde>
 800690c:	2b20      	cmp	r3, #32
 800690e:	f040 80af 	bne.w	8006a70 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	88db      	ldrh	r3, [r3, #6]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d03a      	beq.n	8006990 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	b25b      	sxtb	r3, r3
 8006920:	2b00      	cmp	r3, #0
 8006922:	da1b      	bge.n	800695c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	33b0      	adds	r3, #176	; 0xb0
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	683a      	ldr	r2, [r7, #0]
 8006938:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800693a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800693c:	683a      	ldr	r2, [r7, #0]
 800693e:	88d2      	ldrh	r2, [r2, #6]
 8006940:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	88db      	ldrh	r3, [r3, #6]
 8006946:	2b07      	cmp	r3, #7
 8006948:	bf28      	it	cs
 800694a:	2307      	movcs	r3, #7
 800694c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	89fa      	ldrh	r2, [r7, #14]
 8006952:	4619      	mov	r1, r3
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f001 fd89 	bl	800846c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800695a:	e090      	b.n	8006a7e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	785a      	ldrb	r2, [r3, #1]
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	88db      	ldrh	r3, [r3, #6]
 800696a:	2b3f      	cmp	r3, #63	; 0x3f
 800696c:	d803      	bhi.n	8006976 <USBD_CDC_Setup+0xa6>
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	88db      	ldrh	r3, [r3, #6]
 8006972:	b2da      	uxtb	r2, r3
 8006974:	e000      	b.n	8006978 <USBD_CDC_Setup+0xa8>
 8006976:	2240      	movs	r2, #64	; 0x40
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800697e:	6939      	ldr	r1, [r7, #16]
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006986:	461a      	mov	r2, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f001 fd9b 	bl	80084c4 <USBD_CtlPrepareRx>
      break;
 800698e:	e076      	b.n	8006a7e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	33b0      	adds	r3, #176	; 0xb0
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	7850      	ldrb	r0, [r2, #1]
 80069a6:	2200      	movs	r2, #0
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	4798      	blx	r3
      break;
 80069ac:	e067      	b.n	8006a7e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	785b      	ldrb	r3, [r3, #1]
 80069b2:	2b0b      	cmp	r3, #11
 80069b4:	d851      	bhi.n	8006a5a <USBD_CDC_Setup+0x18a>
 80069b6:	a201      	add	r2, pc, #4	; (adr r2, 80069bc <USBD_CDC_Setup+0xec>)
 80069b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069bc:	080069ed 	.word	0x080069ed
 80069c0:	08006a69 	.word	0x08006a69
 80069c4:	08006a5b 	.word	0x08006a5b
 80069c8:	08006a5b 	.word	0x08006a5b
 80069cc:	08006a5b 	.word	0x08006a5b
 80069d0:	08006a5b 	.word	0x08006a5b
 80069d4:	08006a5b 	.word	0x08006a5b
 80069d8:	08006a5b 	.word	0x08006a5b
 80069dc:	08006a5b 	.word	0x08006a5b
 80069e0:	08006a5b 	.word	0x08006a5b
 80069e4:	08006a17 	.word	0x08006a17
 80069e8:	08006a41 	.word	0x08006a41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	2b03      	cmp	r3, #3
 80069f6:	d107      	bne.n	8006a08 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80069f8:	f107 030a 	add.w	r3, r7, #10
 80069fc:	2202      	movs	r2, #2
 80069fe:	4619      	mov	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f001 fd33 	bl	800846c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a06:	e032      	b.n	8006a6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a08:	6839      	ldr	r1, [r7, #0]
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f001 fcbd 	bl	800838a <USBD_CtlError>
            ret = USBD_FAIL;
 8006a10:	2303      	movs	r3, #3
 8006a12:	75fb      	strb	r3, [r7, #23]
          break;
 8006a14:	e02b      	b.n	8006a6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	d107      	bne.n	8006a32 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a22:	f107 030d 	add.w	r3, r7, #13
 8006a26:	2201      	movs	r2, #1
 8006a28:	4619      	mov	r1, r3
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f001 fd1e 	bl	800846c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a30:	e01d      	b.n	8006a6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f001 fca8 	bl	800838a <USBD_CtlError>
            ret = USBD_FAIL;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	75fb      	strb	r3, [r7, #23]
          break;
 8006a3e:	e016      	b.n	8006a6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b03      	cmp	r3, #3
 8006a4a:	d00f      	beq.n	8006a6c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006a4c:	6839      	ldr	r1, [r7, #0]
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f001 fc9b 	bl	800838a <USBD_CtlError>
            ret = USBD_FAIL;
 8006a54:	2303      	movs	r3, #3
 8006a56:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a58:	e008      	b.n	8006a6c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a5a:	6839      	ldr	r1, [r7, #0]
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f001 fc94 	bl	800838a <USBD_CtlError>
          ret = USBD_FAIL;
 8006a62:	2303      	movs	r3, #3
 8006a64:	75fb      	strb	r3, [r7, #23]
          break;
 8006a66:	e002      	b.n	8006a6e <USBD_CDC_Setup+0x19e>
          break;
 8006a68:	bf00      	nop
 8006a6a:	e008      	b.n	8006a7e <USBD_CDC_Setup+0x1ae>
          break;
 8006a6c:	bf00      	nop
      }
      break;
 8006a6e:	e006      	b.n	8006a7e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f001 fc89 	bl	800838a <USBD_CtlError>
      ret = USBD_FAIL;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a7c:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3718      	adds	r7, #24
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	460b      	mov	r3, r1
 8006a92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	32b0      	adds	r2, #176	; 0xb0
 8006aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e065      	b.n	8006b7e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	32b0      	adds	r2, #176	; 0xb0
 8006abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006ac2:	78fb      	ldrb	r3, [r7, #3]
 8006ac4:	f003 020f 	and.w	r2, r3, #15
 8006ac8:	6879      	ldr	r1, [r7, #4]
 8006aca:	4613      	mov	r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	4413      	add	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	440b      	add	r3, r1
 8006ad4:	3318      	adds	r3, #24
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d02f      	beq.n	8006b3c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006adc:	78fb      	ldrb	r3, [r7, #3]
 8006ade:	f003 020f 	and.w	r2, r3, #15
 8006ae2:	6879      	ldr	r1, [r7, #4]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	440b      	add	r3, r1
 8006aee:	3318      	adds	r3, #24
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	78fb      	ldrb	r3, [r7, #3]
 8006af4:	f003 010f 	and.w	r1, r3, #15
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	460b      	mov	r3, r1
 8006afc:	00db      	lsls	r3, r3, #3
 8006afe:	440b      	add	r3, r1
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4403      	add	r3, r0
 8006b04:	3348      	adds	r3, #72	; 0x48
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b0c:	fb01 f303 	mul.w	r3, r1, r3
 8006b10:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d112      	bne.n	8006b3c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006b16:	78fb      	ldrb	r3, [r7, #3]
 8006b18:	f003 020f 	and.w	r2, r3, #15
 8006b1c:	6879      	ldr	r1, [r7, #4]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	440b      	add	r3, r1
 8006b28:	3318      	adds	r3, #24
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b2e:	78f9      	ldrb	r1, [r7, #3]
 8006b30:	2300      	movs	r3, #0
 8006b32:	2200      	movs	r2, #0
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f002 f996 	bl	8008e66 <USBD_LL_Transmit>
 8006b3a:	e01f      	b.n	8006b7c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	33b0      	adds	r3, #176	; 0xb0
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d010      	beq.n	8006b7c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	33b0      	adds	r3, #176	; 0xb0
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	4413      	add	r3, r2
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006b78:	78fa      	ldrb	r2, [r7, #3]
 8006b7a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b084      	sub	sp, #16
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	460b      	mov	r3, r1
 8006b90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	32b0      	adds	r2, #176	; 0xb0
 8006b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	32b0      	adds	r2, #176	; 0xb0
 8006bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e01a      	b.n	8006bee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006bb8:	78fb      	ldrb	r3, [r7, #3]
 8006bba:	4619      	mov	r1, r3
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f002 f994 	bl	8008eea <USBD_LL_GetRxDataSize>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	33b0      	adds	r3, #176	; 0xb0
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006be8:	4611      	mov	r1, r2
 8006bea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b084      	sub	sp, #16
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	32b0      	adds	r2, #176	; 0xb0
 8006c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c0c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e025      	b.n	8006c64 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	33b0      	adds	r3, #176	; 0xb0
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d01a      	beq.n	8006c62 <USBD_CDC_EP0_RxReady+0x6c>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c32:	2bff      	cmp	r3, #255	; 0xff
 8006c34:	d015      	beq.n	8006c62 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	33b0      	adds	r3, #176	; 0xb0
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006c4e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c56:	b292      	uxth	r2, r2
 8006c58:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	22ff      	movs	r2, #255	; 0xff
 8006c5e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b086      	sub	sp, #24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c74:	2182      	movs	r1, #130	; 0x82
 8006c76:	4818      	ldr	r0, [pc, #96]	; (8006cd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c78:	f000 fd4f 	bl	800771a <USBD_GetEpDesc>
 8006c7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c7e:	2101      	movs	r1, #1
 8006c80:	4815      	ldr	r0, [pc, #84]	; (8006cd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c82:	f000 fd4a 	bl	800771a <USBD_GetEpDesc>
 8006c86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c88:	2181      	movs	r1, #129	; 0x81
 8006c8a:	4813      	ldr	r0, [pc, #76]	; (8006cd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c8c:	f000 fd45 	bl	800771a <USBD_GetEpDesc>
 8006c90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d002      	beq.n	8006c9e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	2210      	movs	r2, #16
 8006c9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d006      	beq.n	8006cb2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cac:	711a      	strb	r2, [r3, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d006      	beq.n	8006cc6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cc0:	711a      	strb	r2, [r3, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2243      	movs	r2, #67	; 0x43
 8006cca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006ccc:	4b02      	ldr	r3, [pc, #8]	; (8006cd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3718      	adds	r7, #24
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20000054 	.word	0x20000054

08006cdc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ce4:	2182      	movs	r1, #130	; 0x82
 8006ce6:	4818      	ldr	r0, [pc, #96]	; (8006d48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ce8:	f000 fd17 	bl	800771a <USBD_GetEpDesc>
 8006cec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006cee:	2101      	movs	r1, #1
 8006cf0:	4815      	ldr	r0, [pc, #84]	; (8006d48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006cf2:	f000 fd12 	bl	800771a <USBD_GetEpDesc>
 8006cf6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006cf8:	2181      	movs	r1, #129	; 0x81
 8006cfa:	4813      	ldr	r0, [pc, #76]	; (8006d48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006cfc:	f000 fd0d 	bl	800771a <USBD_GetEpDesc>
 8006d00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d002      	beq.n	8006d0e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	2210      	movs	r2, #16
 8006d0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d006      	beq.n	8006d22 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	2200      	movs	r2, #0
 8006d18:	711a      	strb	r2, [r3, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f042 0202 	orr.w	r2, r2, #2
 8006d20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d006      	beq.n	8006d36 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	711a      	strb	r2, [r3, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f042 0202 	orr.w	r2, r2, #2
 8006d34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2243      	movs	r2, #67	; 0x43
 8006d3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d3c:	4b02      	ldr	r3, [pc, #8]	; (8006d48 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3718      	adds	r7, #24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	20000054 	.word	0x20000054

08006d4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d54:	2182      	movs	r1, #130	; 0x82
 8006d56:	4818      	ldr	r0, [pc, #96]	; (8006db8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d58:	f000 fcdf 	bl	800771a <USBD_GetEpDesc>
 8006d5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d5e:	2101      	movs	r1, #1
 8006d60:	4815      	ldr	r0, [pc, #84]	; (8006db8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d62:	f000 fcda 	bl	800771a <USBD_GetEpDesc>
 8006d66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d68:	2181      	movs	r1, #129	; 0x81
 8006d6a:	4813      	ldr	r0, [pc, #76]	; (8006db8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d6c:	f000 fcd5 	bl	800771a <USBD_GetEpDesc>
 8006d70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d002      	beq.n	8006d7e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	2210      	movs	r2, #16
 8006d7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d006      	beq.n	8006d92 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d8c:	711a      	strb	r2, [r3, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d006      	beq.n	8006da6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006da0:	711a      	strb	r2, [r3, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2243      	movs	r2, #67	; 0x43
 8006daa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006dac:	4b02      	ldr	r3, [pc, #8]	; (8006db8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3718      	adds	r7, #24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	20000054 	.word	0x20000054

08006dbc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	220a      	movs	r2, #10
 8006dc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006dca:	4b03      	ldr	r3, [pc, #12]	; (8006dd8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	20000010 	.word	0x20000010

08006ddc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e009      	b.n	8006e04 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	33b0      	adds	r3, #176	; 0xb0
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4413      	add	r3, r2
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b087      	sub	sp, #28
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	32b0      	adds	r2, #176	; 0xb0
 8006e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e2a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e008      	b.n	8006e48 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	371c      	adds	r7, #28
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	32b0      	adds	r2, #176	; 0xb0
 8006e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e6c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d101      	bne.n	8006e78 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e004      	b.n	8006e82 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
	...

08006e90 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	32b0      	adds	r2, #176	; 0xb0
 8006ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	32b0      	adds	r2, #176	; 0xb0
 8006eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e025      	b.n	8006f0e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d11f      	bne.n	8006f0c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006ed4:	4b10      	ldr	r3, [pc, #64]	; (8006f18 <USBD_CDC_TransmitPacket+0x88>)
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	f003 020f 	and.w	r2, r3, #15
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4403      	add	r3, r0
 8006eee:	3318      	adds	r3, #24
 8006ef0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006ef2:	4b09      	ldr	r3, [pc, #36]	; (8006f18 <USBD_CDC_TransmitPacket+0x88>)
 8006ef4:	7819      	ldrb	r1, [r3, #0]
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f001 ffaf 	bl	8008e66 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	20000097 	.word	0x20000097

08006f1c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	32b0      	adds	r2, #176	; 0xb0
 8006f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f32:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	32b0      	adds	r2, #176	; 0xb0
 8006f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e018      	b.n	8006f7c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	7c1b      	ldrb	r3, [r3, #16]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10a      	bne.n	8006f68 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f52:	4b0c      	ldr	r3, [pc, #48]	; (8006f84 <USBD_CDC_ReceivePacket+0x68>)
 8006f54:	7819      	ldrb	r1, [r3, #0]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f001 ffa1 	bl	8008ea8 <USBD_LL_PrepareReceive>
 8006f66:	e008      	b.n	8006f7a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f68:	4b06      	ldr	r3, [pc, #24]	; (8006f84 <USBD_CDC_ReceivePacket+0x68>)
 8006f6a:	7819      	ldrb	r1, [r3, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f72:	2340      	movs	r3, #64	; 0x40
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f001 ff97 	bl	8008ea8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	20000098 	.word	0x20000098

08006f88 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	4613      	mov	r3, r2
 8006f94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d101      	bne.n	8006fa0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e01f      	b.n	8006fe0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	79fa      	ldrb	r2, [r7, #7]
 8006fd2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f001 fe11 	bl	8008bfc <USBD_LL_Init>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3718      	adds	r7, #24
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d101      	bne.n	8007000 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e025      	b.n	800704c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	32ae      	adds	r2, #174	; 0xae
 8007012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00f      	beq.n	800703c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	32ae      	adds	r2, #174	; 0xae
 8007026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800702a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702c:	f107 020e 	add.w	r2, r7, #14
 8007030:	4610      	mov	r0, r2
 8007032:	4798      	blx	r3
 8007034:	4602      	mov	r2, r0
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007042:	1c5a      	adds	r2, r3, #1
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f001 fe19 	bl	8008c94 <USBD_LL_Start>
 8007062:	4603      	mov	r3, r0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007074:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007076:	4618      	mov	r0, r3
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b084      	sub	sp, #16
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	460b      	mov	r3, r1
 800708c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007098:	2b00      	cmp	r3, #0
 800709a:	d009      	beq.n	80070b0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	78fa      	ldrb	r2, [r7, #3]
 80070a6:	4611      	mov	r1, r2
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	4798      	blx	r3
 80070ac:	4603      	mov	r3, r0
 80070ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b084      	sub	sp, #16
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	460b      	mov	r3, r1
 80070c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	78fa      	ldrb	r2, [r7, #3]
 80070d4:	4611      	mov	r1, r2
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	4798      	blx	r3
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d001      	beq.n	80070e4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80070e0:	2303      	movs	r3, #3
 80070e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b084      	sub	sp, #16
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070fe:	6839      	ldr	r1, [r7, #0]
 8007100:	4618      	mov	r0, r3
 8007102:	f001 f908 	bl	8008316 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2201      	movs	r2, #1
 800710a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007114:	461a      	mov	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007122:	f003 031f 	and.w	r3, r3, #31
 8007126:	2b02      	cmp	r3, #2
 8007128:	d01a      	beq.n	8007160 <USBD_LL_SetupStage+0x72>
 800712a:	2b02      	cmp	r3, #2
 800712c:	d822      	bhi.n	8007174 <USBD_LL_SetupStage+0x86>
 800712e:	2b00      	cmp	r3, #0
 8007130:	d002      	beq.n	8007138 <USBD_LL_SetupStage+0x4a>
 8007132:	2b01      	cmp	r3, #1
 8007134:	d00a      	beq.n	800714c <USBD_LL_SetupStage+0x5e>
 8007136:	e01d      	b.n	8007174 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800713e:	4619      	mov	r1, r3
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 fb5f 	bl	8007804 <USBD_StdDevReq>
 8007146:	4603      	mov	r3, r0
 8007148:	73fb      	strb	r3, [r7, #15]
      break;
 800714a:	e020      	b.n	800718e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007152:	4619      	mov	r1, r3
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fbc7 	bl	80078e8 <USBD_StdItfReq>
 800715a:	4603      	mov	r3, r0
 800715c:	73fb      	strb	r3, [r7, #15]
      break;
 800715e:	e016      	b.n	800718e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007166:	4619      	mov	r1, r3
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fc29 	bl	80079c0 <USBD_StdEPReq>
 800716e:	4603      	mov	r3, r0
 8007170:	73fb      	strb	r3, [r7, #15]
      break;
 8007172:	e00c      	b.n	800718e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800717a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800717e:	b2db      	uxtb	r3, r3
 8007180:	4619      	mov	r1, r3
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f001 fde6 	bl	8008d54 <USBD_LL_StallEP>
 8007188:	4603      	mov	r3, r0
 800718a:	73fb      	strb	r3, [r7, #15]
      break;
 800718c:	bf00      	nop
  }

  return ret;
 800718e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	460b      	mov	r3, r1
 80071a2:	607a      	str	r2, [r7, #4]
 80071a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80071aa:	7afb      	ldrb	r3, [r7, #11]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d16e      	bne.n	800728e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80071b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071be:	2b03      	cmp	r3, #3
 80071c0:	f040 8098 	bne.w	80072f4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	689a      	ldr	r2, [r3, #8]
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d913      	bls.n	80071f8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	689a      	ldr	r2, [r3, #8]
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	1ad2      	subs	r2, r2, r3
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	68da      	ldr	r2, [r3, #12]
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	4293      	cmp	r3, r2
 80071e8:	bf28      	it	cs
 80071ea:	4613      	movcs	r3, r2
 80071ec:	461a      	mov	r2, r3
 80071ee:	6879      	ldr	r1, [r7, #4]
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f001 f984 	bl	80084fe <USBD_CtlContinueRx>
 80071f6:	e07d      	b.n	80072f4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071fe:	f003 031f 	and.w	r3, r3, #31
 8007202:	2b02      	cmp	r3, #2
 8007204:	d014      	beq.n	8007230 <USBD_LL_DataOutStage+0x98>
 8007206:	2b02      	cmp	r3, #2
 8007208:	d81d      	bhi.n	8007246 <USBD_LL_DataOutStage+0xae>
 800720a:	2b00      	cmp	r3, #0
 800720c:	d002      	beq.n	8007214 <USBD_LL_DataOutStage+0x7c>
 800720e:	2b01      	cmp	r3, #1
 8007210:	d003      	beq.n	800721a <USBD_LL_DataOutStage+0x82>
 8007212:	e018      	b.n	8007246 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007214:	2300      	movs	r3, #0
 8007216:	75bb      	strb	r3, [r7, #22]
            break;
 8007218:	e018      	b.n	800724c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007220:	b2db      	uxtb	r3, r3
 8007222:	4619      	mov	r1, r3
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f000 fa5e 	bl	80076e6 <USBD_CoreFindIF>
 800722a:	4603      	mov	r3, r0
 800722c:	75bb      	strb	r3, [r7, #22]
            break;
 800722e:	e00d      	b.n	800724c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007236:	b2db      	uxtb	r3, r3
 8007238:	4619      	mov	r1, r3
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 fa60 	bl	8007700 <USBD_CoreFindEP>
 8007240:	4603      	mov	r3, r0
 8007242:	75bb      	strb	r3, [r7, #22]
            break;
 8007244:	e002      	b.n	800724c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007246:	2300      	movs	r3, #0
 8007248:	75bb      	strb	r3, [r7, #22]
            break;
 800724a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800724c:	7dbb      	ldrb	r3, [r7, #22]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d119      	bne.n	8007286 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b03      	cmp	r3, #3
 800725c:	d113      	bne.n	8007286 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800725e:	7dba      	ldrb	r2, [r7, #22]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	32ae      	adds	r2, #174	; 0xae
 8007264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00b      	beq.n	8007286 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800726e:	7dba      	ldrb	r2, [r7, #22]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007276:	7dba      	ldrb	r2, [r7, #22]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	32ae      	adds	r2, #174	; 0xae
 800727c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f001 f94a 	bl	8008520 <USBD_CtlSendStatus>
 800728c:	e032      	b.n	80072f4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800728e:	7afb      	ldrb	r3, [r7, #11]
 8007290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007294:	b2db      	uxtb	r3, r3
 8007296:	4619      	mov	r1, r3
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 fa31 	bl	8007700 <USBD_CoreFindEP>
 800729e:	4603      	mov	r3, r0
 80072a0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072a2:	7dbb      	ldrb	r3, [r7, #22]
 80072a4:	2bff      	cmp	r3, #255	; 0xff
 80072a6:	d025      	beq.n	80072f4 <USBD_LL_DataOutStage+0x15c>
 80072a8:	7dbb      	ldrb	r3, [r7, #22]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d122      	bne.n	80072f4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d117      	bne.n	80072ea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80072ba:	7dba      	ldrb	r2, [r7, #22]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	32ae      	adds	r2, #174	; 0xae
 80072c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00f      	beq.n	80072ea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80072ca:	7dba      	ldrb	r2, [r7, #22]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80072d2:	7dba      	ldrb	r2, [r7, #22]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	32ae      	adds	r2, #174	; 0xae
 80072d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	7afa      	ldrb	r2, [r7, #11]
 80072e0:	4611      	mov	r1, r2
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	4798      	blx	r3
 80072e6:	4603      	mov	r3, r0
 80072e8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80072ea:	7dfb      	ldrb	r3, [r7, #23]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d001      	beq.n	80072f4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80072f0:	7dfb      	ldrb	r3, [r7, #23]
 80072f2:	e000      	b.n	80072f6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3718      	adds	r7, #24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b086      	sub	sp, #24
 8007302:	af00      	add	r7, sp, #0
 8007304:	60f8      	str	r0, [r7, #12]
 8007306:	460b      	mov	r3, r1
 8007308:	607a      	str	r2, [r7, #4]
 800730a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800730c:	7afb      	ldrb	r3, [r7, #11]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d16f      	bne.n	80073f2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	3314      	adds	r3, #20
 8007316:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800731e:	2b02      	cmp	r3, #2
 8007320:	d15a      	bne.n	80073d8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	689a      	ldr	r2, [r3, #8]
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	429a      	cmp	r2, r3
 800732c:	d914      	bls.n	8007358 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	689a      	ldr	r2, [r3, #8]
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	1ad2      	subs	r2, r2, r3
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	461a      	mov	r2, r3
 8007342:	6879      	ldr	r1, [r7, #4]
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f001 f8ac 	bl	80084a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800734a:	2300      	movs	r3, #0
 800734c:	2200      	movs	r2, #0
 800734e:	2100      	movs	r1, #0
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f001 fda9 	bl	8008ea8 <USBD_LL_PrepareReceive>
 8007356:	e03f      	b.n	80073d8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	68da      	ldr	r2, [r3, #12]
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	429a      	cmp	r2, r3
 8007362:	d11c      	bne.n	800739e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800736c:	429a      	cmp	r2, r3
 800736e:	d316      	bcc.n	800739e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800737a:	429a      	cmp	r2, r3
 800737c:	d20f      	bcs.n	800739e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800737e:	2200      	movs	r2, #0
 8007380:	2100      	movs	r1, #0
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f001 f88d 	bl	80084a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007390:	2300      	movs	r3, #0
 8007392:	2200      	movs	r2, #0
 8007394:	2100      	movs	r1, #0
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f001 fd86 	bl	8008ea8 <USBD_LL_PrepareReceive>
 800739c:	e01c      	b.n	80073d8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d10f      	bne.n	80073ca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d009      	beq.n	80073ca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80073ca:	2180      	movs	r1, #128	; 0x80
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f001 fcc1 	bl	8008d54 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f001 f8b7 	bl	8008546 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d03a      	beq.n	8007458 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f7ff fe42 	bl	800706c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80073f0:	e032      	b.n	8007458 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80073f2:	7afb      	ldrb	r3, [r7, #11]
 80073f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	4619      	mov	r1, r3
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f000 f97f 	bl	8007700 <USBD_CoreFindEP>
 8007402:	4603      	mov	r3, r0
 8007404:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007406:	7dfb      	ldrb	r3, [r7, #23]
 8007408:	2bff      	cmp	r3, #255	; 0xff
 800740a:	d025      	beq.n	8007458 <USBD_LL_DataInStage+0x15a>
 800740c:	7dfb      	ldrb	r3, [r7, #23]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d122      	bne.n	8007458 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b03      	cmp	r3, #3
 800741c:	d11c      	bne.n	8007458 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800741e:	7dfa      	ldrb	r2, [r7, #23]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	32ae      	adds	r2, #174	; 0xae
 8007424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d014      	beq.n	8007458 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800742e:	7dfa      	ldrb	r2, [r7, #23]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007436:	7dfa      	ldrb	r2, [r7, #23]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	32ae      	adds	r2, #174	; 0xae
 800743c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	7afa      	ldrb	r2, [r7, #11]
 8007444:	4611      	mov	r1, r2
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	4798      	blx	r3
 800744a:	4603      	mov	r3, r0
 800744c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800744e:	7dbb      	ldrb	r3, [r7, #22]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d001      	beq.n	8007458 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007454:	7dbb      	ldrb	r3, [r7, #22]
 8007456:	e000      	b.n	800745a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3718      	adds	r7, #24
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b084      	sub	sp, #16
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800746a:	2300      	movs	r3, #0
 800746c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800749a:	2b00      	cmp	r3, #0
 800749c:	d014      	beq.n	80074c8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00e      	beq.n	80074c8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	6852      	ldr	r2, [r2, #4]
 80074b6:	b2d2      	uxtb	r2, r2
 80074b8:	4611      	mov	r1, r2
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	4798      	blx	r3
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d001      	beq.n	80074c8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80074c4:	2303      	movs	r3, #3
 80074c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074c8:	2340      	movs	r3, #64	; 0x40
 80074ca:	2200      	movs	r2, #0
 80074cc:	2100      	movs	r1, #0
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f001 fbfb 	bl	8008cca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2240      	movs	r2, #64	; 0x40
 80074e0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074e4:	2340      	movs	r3, #64	; 0x40
 80074e6:	2200      	movs	r2, #0
 80074e8:	2180      	movs	r1, #128	; 0x80
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f001 fbed 	bl	8008cca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2240      	movs	r2, #64	; 0x40
 80074fa:	621a      	str	r2, [r3, #32]

  return ret;
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007506:	b480      	push	{r7}
 8007508:	b083      	sub	sp, #12
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	460b      	mov	r3, r1
 8007510:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	78fa      	ldrb	r2, [r7, #3]
 8007516:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr

08007526 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007526:	b480      	push	{r7}
 8007528:	b083      	sub	sp, #12
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007534:	b2da      	uxtb	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2204      	movs	r2, #4
 8007540:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	370c      	adds	r7, #12
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr

08007552 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007552:	b480      	push	{r7}
 8007554:	b083      	sub	sp, #12
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b04      	cmp	r3, #4
 8007564:	d106      	bne.n	8007574 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800756c:	b2da      	uxtb	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b082      	sub	sp, #8
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b03      	cmp	r3, #3
 8007594:	d110      	bne.n	80075b8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00b      	beq.n	80075b8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075a6:	69db      	ldr	r3, [r3, #28]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d005      	beq.n	80075b8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b2:	69db      	ldr	r3, [r3, #28]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b082      	sub	sp, #8
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	460b      	mov	r3, r1
 80075cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	32ae      	adds	r2, #174	; 0xae
 80075d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d101      	bne.n	80075e4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80075e0:	2303      	movs	r3, #3
 80075e2:	e01c      	b.n	800761e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b03      	cmp	r3, #3
 80075ee:	d115      	bne.n	800761c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	32ae      	adds	r2, #174	; 0xae
 80075fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075fe:	6a1b      	ldr	r3, [r3, #32]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00b      	beq.n	800761c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	32ae      	adds	r2, #174	; 0xae
 800760e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007612:	6a1b      	ldr	r3, [r3, #32]
 8007614:	78fa      	ldrb	r2, [r7, #3]
 8007616:	4611      	mov	r1, r2
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b082      	sub	sp, #8
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	460b      	mov	r3, r1
 8007630:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	32ae      	adds	r2, #174	; 0xae
 800763c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d101      	bne.n	8007648 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007644:	2303      	movs	r3, #3
 8007646:	e01c      	b.n	8007682 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b03      	cmp	r3, #3
 8007652:	d115      	bne.n	8007680 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	32ae      	adds	r2, #174	; 0xae
 800765e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00b      	beq.n	8007680 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	32ae      	adds	r2, #174	; 0xae
 8007672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	78fa      	ldrb	r2, [r7, #3]
 800767a:	4611      	mov	r1, r2
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3708      	adds	r7, #8
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800768a:	b480      	push	{r7}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80076a8:	2300      	movs	r3, #0
 80076aa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00e      	beq.n	80076dc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	6852      	ldr	r2, [r2, #4]
 80076ca:	b2d2      	uxtb	r2, r2
 80076cc:	4611      	mov	r1, r2
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	4798      	blx	r3
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80076d8:	2303      	movs	r3, #3
 80076da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80076e6:	b480      	push	{r7}
 80076e8:	b083      	sub	sp, #12
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	460b      	mov	r3, r1
 80076f0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80076f2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	460b      	mov	r3, r1
 800770a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800770c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800770e:	4618      	mov	r0, r3
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b086      	sub	sp, #24
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
 8007722:	460b      	mov	r3, r1
 8007724:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800772e:	2300      	movs	r3, #0
 8007730:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	885b      	ldrh	r3, [r3, #2]
 8007736:	b29a      	uxth	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	b29b      	uxth	r3, r3
 800773e:	429a      	cmp	r2, r3
 8007740:	d920      	bls.n	8007784 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	b29b      	uxth	r3, r3
 8007748:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800774a:	e013      	b.n	8007774 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800774c:	f107 030a 	add.w	r3, r7, #10
 8007750:	4619      	mov	r1, r3
 8007752:	6978      	ldr	r0, [r7, #20]
 8007754:	f000 f81b 	bl	800778e <USBD_GetNextDesc>
 8007758:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	785b      	ldrb	r3, [r3, #1]
 800775e:	2b05      	cmp	r3, #5
 8007760:	d108      	bne.n	8007774 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	789b      	ldrb	r3, [r3, #2]
 800776a:	78fa      	ldrb	r2, [r7, #3]
 800776c:	429a      	cmp	r2, r3
 800776e:	d008      	beq.n	8007782 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007770:	2300      	movs	r3, #0
 8007772:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	885b      	ldrh	r3, [r3, #2]
 8007778:	b29a      	uxth	r2, r3
 800777a:	897b      	ldrh	r3, [r7, #10]
 800777c:	429a      	cmp	r2, r3
 800777e:	d8e5      	bhi.n	800774c <USBD_GetEpDesc+0x32>
 8007780:	e000      	b.n	8007784 <USBD_GetEpDesc+0x6a>
          break;
 8007782:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007784:	693b      	ldr	r3, [r7, #16]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3718      	adds	r7, #24
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800778e:	b480      	push	{r7}
 8007790:	b085      	sub	sp, #20
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	881a      	ldrh	r2, [r3, #0]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	4413      	add	r3, r2
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	461a      	mov	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4413      	add	r3, r2
 80077b8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80077ba:	68fb      	ldr	r3, [r7, #12]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	3301      	adds	r3, #1
 80077de:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80077e6:	8a3b      	ldrh	r3, [r7, #16]
 80077e8:	021b      	lsls	r3, r3, #8
 80077ea:	b21a      	sxth	r2, r3
 80077ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	b21b      	sxth	r3, r3
 80077f4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80077f6:	89fb      	ldrh	r3, [r7, #14]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	371c      	adds	r7, #28
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800781a:	2b40      	cmp	r3, #64	; 0x40
 800781c:	d005      	beq.n	800782a <USBD_StdDevReq+0x26>
 800781e:	2b40      	cmp	r3, #64	; 0x40
 8007820:	d857      	bhi.n	80078d2 <USBD_StdDevReq+0xce>
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00f      	beq.n	8007846 <USBD_StdDevReq+0x42>
 8007826:	2b20      	cmp	r3, #32
 8007828:	d153      	bne.n	80078d2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	32ae      	adds	r2, #174	; 0xae
 8007834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	6839      	ldr	r1, [r7, #0]
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	4798      	blx	r3
 8007840:	4603      	mov	r3, r0
 8007842:	73fb      	strb	r3, [r7, #15]
      break;
 8007844:	e04a      	b.n	80078dc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	785b      	ldrb	r3, [r3, #1]
 800784a:	2b09      	cmp	r3, #9
 800784c:	d83b      	bhi.n	80078c6 <USBD_StdDevReq+0xc2>
 800784e:	a201      	add	r2, pc, #4	; (adr r2, 8007854 <USBD_StdDevReq+0x50>)
 8007850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007854:	080078a9 	.word	0x080078a9
 8007858:	080078bd 	.word	0x080078bd
 800785c:	080078c7 	.word	0x080078c7
 8007860:	080078b3 	.word	0x080078b3
 8007864:	080078c7 	.word	0x080078c7
 8007868:	08007887 	.word	0x08007887
 800786c:	0800787d 	.word	0x0800787d
 8007870:	080078c7 	.word	0x080078c7
 8007874:	0800789f 	.word	0x0800789f
 8007878:	08007891 	.word	0x08007891
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800787c:	6839      	ldr	r1, [r7, #0]
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 fa3c 	bl	8007cfc <USBD_GetDescriptor>
          break;
 8007884:	e024      	b.n	80078d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fba1 	bl	8007fd0 <USBD_SetAddress>
          break;
 800788e:	e01f      	b.n	80078d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fbe0 	bl	8008058 <USBD_SetConfig>
 8007898:	4603      	mov	r3, r0
 800789a:	73fb      	strb	r3, [r7, #15]
          break;
 800789c:	e018      	b.n	80078d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fc83 	bl	80081ac <USBD_GetConfig>
          break;
 80078a6:	e013      	b.n	80078d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fcb4 	bl	8008218 <USBD_GetStatus>
          break;
 80078b0:	e00e      	b.n	80078d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fce3 	bl	8008280 <USBD_SetFeature>
          break;
 80078ba:	e009      	b.n	80078d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80078bc:	6839      	ldr	r1, [r7, #0]
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fd07 	bl	80082d2 <USBD_ClrFeature>
          break;
 80078c4:	e004      	b.n	80078d0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80078c6:	6839      	ldr	r1, [r7, #0]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fd5e 	bl	800838a <USBD_CtlError>
          break;
 80078ce:	bf00      	nop
      }
      break;
 80078d0:	e004      	b.n	80078dc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fd58 	bl	800838a <USBD_CtlError>
      break;
 80078da:	bf00      	nop
  }

  return ret;
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop

080078e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078fe:	2b40      	cmp	r3, #64	; 0x40
 8007900:	d005      	beq.n	800790e <USBD_StdItfReq+0x26>
 8007902:	2b40      	cmp	r3, #64	; 0x40
 8007904:	d852      	bhi.n	80079ac <USBD_StdItfReq+0xc4>
 8007906:	2b00      	cmp	r3, #0
 8007908:	d001      	beq.n	800790e <USBD_StdItfReq+0x26>
 800790a:	2b20      	cmp	r3, #32
 800790c:	d14e      	bne.n	80079ac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007914:	b2db      	uxtb	r3, r3
 8007916:	3b01      	subs	r3, #1
 8007918:	2b02      	cmp	r3, #2
 800791a:	d840      	bhi.n	800799e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	889b      	ldrh	r3, [r3, #4]
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b01      	cmp	r3, #1
 8007924:	d836      	bhi.n	8007994 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	889b      	ldrh	r3, [r3, #4]
 800792a:	b2db      	uxtb	r3, r3
 800792c:	4619      	mov	r1, r3
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7ff fed9 	bl	80076e6 <USBD_CoreFindIF>
 8007934:	4603      	mov	r3, r0
 8007936:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007938:	7bbb      	ldrb	r3, [r7, #14]
 800793a:	2bff      	cmp	r3, #255	; 0xff
 800793c:	d01d      	beq.n	800797a <USBD_StdItfReq+0x92>
 800793e:	7bbb      	ldrb	r3, [r7, #14]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d11a      	bne.n	800797a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007944:	7bba      	ldrb	r2, [r7, #14]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	32ae      	adds	r2, #174	; 0xae
 800794a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00f      	beq.n	8007974 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007954:	7bba      	ldrb	r2, [r7, #14]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800795c:	7bba      	ldrb	r2, [r7, #14]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	32ae      	adds	r2, #174	; 0xae
 8007962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	4798      	blx	r3
 800796e:	4603      	mov	r3, r0
 8007970:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007972:	e004      	b.n	800797e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007974:	2303      	movs	r3, #3
 8007976:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007978:	e001      	b.n	800797e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800797a:	2303      	movs	r3, #3
 800797c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	88db      	ldrh	r3, [r3, #6]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d110      	bne.n	80079a8 <USBD_StdItfReq+0xc0>
 8007986:	7bfb      	ldrb	r3, [r7, #15]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10d      	bne.n	80079a8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fdc7 	bl	8008520 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007992:	e009      	b.n	80079a8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fcf7 	bl	800838a <USBD_CtlError>
          break;
 800799c:	e004      	b.n	80079a8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fcf2 	bl	800838a <USBD_CtlError>
          break;
 80079a6:	e000      	b.n	80079aa <USBD_StdItfReq+0xc2>
          break;
 80079a8:	bf00      	nop
      }
      break;
 80079aa:	e004      	b.n	80079b6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fceb 	bl	800838a <USBD_CtlError>
      break;
 80079b4:	bf00      	nop
  }

  return ret;
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80079ca:	2300      	movs	r3, #0
 80079cc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	889b      	ldrh	r3, [r3, #4]
 80079d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079dc:	2b40      	cmp	r3, #64	; 0x40
 80079de:	d007      	beq.n	80079f0 <USBD_StdEPReq+0x30>
 80079e0:	2b40      	cmp	r3, #64	; 0x40
 80079e2:	f200 817f 	bhi.w	8007ce4 <USBD_StdEPReq+0x324>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d02a      	beq.n	8007a40 <USBD_StdEPReq+0x80>
 80079ea:	2b20      	cmp	r3, #32
 80079ec:	f040 817a 	bne.w	8007ce4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80079f0:	7bbb      	ldrb	r3, [r7, #14]
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f7ff fe83 	bl	8007700 <USBD_CoreFindEP>
 80079fa:	4603      	mov	r3, r0
 80079fc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079fe:	7b7b      	ldrb	r3, [r7, #13]
 8007a00:	2bff      	cmp	r3, #255	; 0xff
 8007a02:	f000 8174 	beq.w	8007cee <USBD_StdEPReq+0x32e>
 8007a06:	7b7b      	ldrb	r3, [r7, #13]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f040 8170 	bne.w	8007cee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007a0e:	7b7a      	ldrb	r2, [r7, #13]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007a16:	7b7a      	ldrb	r2, [r7, #13]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	32ae      	adds	r2, #174	; 0xae
 8007a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f000 8163 	beq.w	8007cee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007a28:	7b7a      	ldrb	r2, [r7, #13]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	32ae      	adds	r2, #174	; 0xae
 8007a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	6839      	ldr	r1, [r7, #0]
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	4798      	blx	r3
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a3e:	e156      	b.n	8007cee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	785b      	ldrb	r3, [r3, #1]
 8007a44:	2b03      	cmp	r3, #3
 8007a46:	d008      	beq.n	8007a5a <USBD_StdEPReq+0x9a>
 8007a48:	2b03      	cmp	r3, #3
 8007a4a:	f300 8145 	bgt.w	8007cd8 <USBD_StdEPReq+0x318>
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f000 809b 	beq.w	8007b8a <USBD_StdEPReq+0x1ca>
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d03c      	beq.n	8007ad2 <USBD_StdEPReq+0x112>
 8007a58:	e13e      	b.n	8007cd8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d002      	beq.n	8007a6c <USBD_StdEPReq+0xac>
 8007a66:	2b03      	cmp	r3, #3
 8007a68:	d016      	beq.n	8007a98 <USBD_StdEPReq+0xd8>
 8007a6a:	e02c      	b.n	8007ac6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00d      	beq.n	8007a8e <USBD_StdEPReq+0xce>
 8007a72:	7bbb      	ldrb	r3, [r7, #14]
 8007a74:	2b80      	cmp	r3, #128	; 0x80
 8007a76:	d00a      	beq.n	8007a8e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a78:	7bbb      	ldrb	r3, [r7, #14]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f001 f969 	bl	8008d54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a82:	2180      	movs	r1, #128	; 0x80
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 f965 	bl	8008d54 <USBD_LL_StallEP>
 8007a8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a8c:	e020      	b.n	8007ad0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fc7a 	bl	800838a <USBD_CtlError>
              break;
 8007a96:	e01b      	b.n	8007ad0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	885b      	ldrh	r3, [r3, #2]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10e      	bne.n	8007abe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00b      	beq.n	8007abe <USBD_StdEPReq+0xfe>
 8007aa6:	7bbb      	ldrb	r3, [r7, #14]
 8007aa8:	2b80      	cmp	r3, #128	; 0x80
 8007aaa:	d008      	beq.n	8007abe <USBD_StdEPReq+0xfe>
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	88db      	ldrh	r3, [r3, #6]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d104      	bne.n	8007abe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ab4:	7bbb      	ldrb	r3, [r7, #14]
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f001 f94b 	bl	8008d54 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fd2e 	bl	8008520 <USBD_CtlSendStatus>

              break;
 8007ac4:	e004      	b.n	8007ad0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fc5e 	bl	800838a <USBD_CtlError>
              break;
 8007ace:	bf00      	nop
          }
          break;
 8007ad0:	e107      	b.n	8007ce2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d002      	beq.n	8007ae4 <USBD_StdEPReq+0x124>
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	d016      	beq.n	8007b10 <USBD_StdEPReq+0x150>
 8007ae2:	e04b      	b.n	8007b7c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ae4:	7bbb      	ldrb	r3, [r7, #14]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00d      	beq.n	8007b06 <USBD_StdEPReq+0x146>
 8007aea:	7bbb      	ldrb	r3, [r7, #14]
 8007aec:	2b80      	cmp	r3, #128	; 0x80
 8007aee:	d00a      	beq.n	8007b06 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007af0:	7bbb      	ldrb	r3, [r7, #14]
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f001 f92d 	bl	8008d54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007afa:	2180      	movs	r1, #128	; 0x80
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f001 f929 	bl	8008d54 <USBD_LL_StallEP>
 8007b02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b04:	e040      	b.n	8007b88 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007b06:	6839      	ldr	r1, [r7, #0]
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fc3e 	bl	800838a <USBD_CtlError>
              break;
 8007b0e:	e03b      	b.n	8007b88 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	885b      	ldrh	r3, [r3, #2]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d136      	bne.n	8007b86 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b18:	7bbb      	ldrb	r3, [r7, #14]
 8007b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d004      	beq.n	8007b2c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b22:	7bbb      	ldrb	r3, [r7, #14]
 8007b24:	4619      	mov	r1, r3
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f001 f933 	bl	8008d92 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fcf7 	bl	8008520 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	4619      	mov	r1, r3
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7ff fde2 	bl	8007700 <USBD_CoreFindEP>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b40:	7b7b      	ldrb	r3, [r7, #13]
 8007b42:	2bff      	cmp	r3, #255	; 0xff
 8007b44:	d01f      	beq.n	8007b86 <USBD_StdEPReq+0x1c6>
 8007b46:	7b7b      	ldrb	r3, [r7, #13]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d11c      	bne.n	8007b86 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007b4c:	7b7a      	ldrb	r2, [r7, #13]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007b54:	7b7a      	ldrb	r2, [r7, #13]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	32ae      	adds	r2, #174	; 0xae
 8007b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d010      	beq.n	8007b86 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b64:	7b7a      	ldrb	r2, [r7, #13]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	32ae      	adds	r2, #174	; 0xae
 8007b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	4798      	blx	r3
 8007b76:	4603      	mov	r3, r0
 8007b78:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007b7a:	e004      	b.n	8007b86 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fc03 	bl	800838a <USBD_CtlError>
              break;
 8007b84:	e000      	b.n	8007b88 <USBD_StdEPReq+0x1c8>
              break;
 8007b86:	bf00      	nop
          }
          break;
 8007b88:	e0ab      	b.n	8007ce2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d002      	beq.n	8007b9c <USBD_StdEPReq+0x1dc>
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d032      	beq.n	8007c00 <USBD_StdEPReq+0x240>
 8007b9a:	e097      	b.n	8007ccc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b9c:	7bbb      	ldrb	r3, [r7, #14]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d007      	beq.n	8007bb2 <USBD_StdEPReq+0x1f2>
 8007ba2:	7bbb      	ldrb	r3, [r7, #14]
 8007ba4:	2b80      	cmp	r3, #128	; 0x80
 8007ba6:	d004      	beq.n	8007bb2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007ba8:	6839      	ldr	r1, [r7, #0]
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fbed 	bl	800838a <USBD_CtlError>
                break;
 8007bb0:	e091      	b.n	8007cd6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	da0b      	bge.n	8007bd2 <USBD_StdEPReq+0x212>
 8007bba:	7bbb      	ldrb	r3, [r7, #14]
 8007bbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	3310      	adds	r3, #16
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	4413      	add	r3, r2
 8007bce:	3304      	adds	r3, #4
 8007bd0:	e00b      	b.n	8007bea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bd2:	7bbb      	ldrb	r3, [r7, #14]
 8007bd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bd8:	4613      	mov	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4413      	add	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	4413      	add	r3, r2
 8007be8:	3304      	adds	r3, #4
 8007bea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	2202      	movs	r2, #2
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fc37 	bl	800846c <USBD_CtlSendData>
              break;
 8007bfe:	e06a      	b.n	8007cd6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	da11      	bge.n	8007c2c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c08:	7bbb      	ldrb	r3, [r7, #14]
 8007c0a:	f003 020f 	and.w	r2, r3, #15
 8007c0e:	6879      	ldr	r1, [r7, #4]
 8007c10:	4613      	mov	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	440b      	add	r3, r1
 8007c1a:	3324      	adds	r3, #36	; 0x24
 8007c1c:	881b      	ldrh	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d117      	bne.n	8007c52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 fbb0 	bl	800838a <USBD_CtlError>
                  break;
 8007c2a:	e054      	b.n	8007cd6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c2c:	7bbb      	ldrb	r3, [r7, #14]
 8007c2e:	f003 020f 	and.w	r2, r3, #15
 8007c32:	6879      	ldr	r1, [r7, #4]
 8007c34:	4613      	mov	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	440b      	add	r3, r1
 8007c3e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c42:	881b      	ldrh	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d104      	bne.n	8007c52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fb9d 	bl	800838a <USBD_CtlError>
                  break;
 8007c50:	e041      	b.n	8007cd6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	da0b      	bge.n	8007c72 <USBD_StdEPReq+0x2b2>
 8007c5a:	7bbb      	ldrb	r3, [r7, #14]
 8007c5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c60:	4613      	mov	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	3310      	adds	r3, #16
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	3304      	adds	r3, #4
 8007c70:	e00b      	b.n	8007c8a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
 8007c74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c78:	4613      	mov	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	4413      	add	r3, r2
 8007c88:	3304      	adds	r3, #4
 8007c8a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c8c:	7bbb      	ldrb	r3, [r7, #14]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d002      	beq.n	8007c98 <USBD_StdEPReq+0x2d8>
 8007c92:	7bbb      	ldrb	r3, [r7, #14]
 8007c94:	2b80      	cmp	r3, #128	; 0x80
 8007c96:	d103      	bne.n	8007ca0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	601a      	str	r2, [r3, #0]
 8007c9e:	e00e      	b.n	8007cbe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007ca0:	7bbb      	ldrb	r3, [r7, #14]
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f001 f893 	bl	8008dd0 <USBD_LL_IsStallEP>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d003      	beq.n	8007cb8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	601a      	str	r2, [r3, #0]
 8007cb6:	e002      	b.n	8007cbe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fbd1 	bl	800846c <USBD_CtlSendData>
              break;
 8007cca:	e004      	b.n	8007cd6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fb5b 	bl	800838a <USBD_CtlError>
              break;
 8007cd4:	bf00      	nop
          }
          break;
 8007cd6:	e004      	b.n	8007ce2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fb55 	bl	800838a <USBD_CtlError>
          break;
 8007ce0:	bf00      	nop
      }
      break;
 8007ce2:	e005      	b.n	8007cf0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fb4f 	bl	800838a <USBD_CtlError>
      break;
 8007cec:	e000      	b.n	8007cf0 <USBD_StdEPReq+0x330>
      break;
 8007cee:	bf00      	nop
  }

  return ret;
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
	...

08007cfc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d06:	2300      	movs	r3, #0
 8007d08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	885b      	ldrh	r3, [r3, #2]
 8007d16:	0a1b      	lsrs	r3, r3, #8
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	2b06      	cmp	r3, #6
 8007d1e:	f200 8128 	bhi.w	8007f72 <USBD_GetDescriptor+0x276>
 8007d22:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <USBD_GetDescriptor+0x2c>)
 8007d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d28:	08007d45 	.word	0x08007d45
 8007d2c:	08007d5d 	.word	0x08007d5d
 8007d30:	08007d9d 	.word	0x08007d9d
 8007d34:	08007f73 	.word	0x08007f73
 8007d38:	08007f73 	.word	0x08007f73
 8007d3c:	08007f13 	.word	0x08007f13
 8007d40:	08007f3f 	.word	0x08007f3f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	7c12      	ldrb	r2, [r2, #16]
 8007d50:	f107 0108 	add.w	r1, r7, #8
 8007d54:	4610      	mov	r0, r2
 8007d56:	4798      	blx	r3
 8007d58:	60f8      	str	r0, [r7, #12]
      break;
 8007d5a:	e112      	b.n	8007f82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	7c1b      	ldrb	r3, [r3, #16]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10d      	bne.n	8007d80 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6c:	f107 0208 	add.w	r2, r7, #8
 8007d70:	4610      	mov	r0, r2
 8007d72:	4798      	blx	r3
 8007d74:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d7e:	e100      	b.n	8007f82 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d88:	f107 0208 	add.w	r2, r7, #8
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	4798      	blx	r3
 8007d90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	3301      	adds	r3, #1
 8007d96:	2202      	movs	r2, #2
 8007d98:	701a      	strb	r2, [r3, #0]
      break;
 8007d9a:	e0f2      	b.n	8007f82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	885b      	ldrh	r3, [r3, #2]
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	2b05      	cmp	r3, #5
 8007da4:	f200 80ac 	bhi.w	8007f00 <USBD_GetDescriptor+0x204>
 8007da8:	a201      	add	r2, pc, #4	; (adr r2, 8007db0 <USBD_GetDescriptor+0xb4>)
 8007daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dae:	bf00      	nop
 8007db0:	08007dc9 	.word	0x08007dc9
 8007db4:	08007dfd 	.word	0x08007dfd
 8007db8:	08007e31 	.word	0x08007e31
 8007dbc:	08007e65 	.word	0x08007e65
 8007dc0:	08007e99 	.word	0x08007e99
 8007dc4:	08007ecd 	.word	0x08007ecd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00b      	beq.n	8007dec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	7c12      	ldrb	r2, [r2, #16]
 8007de0:	f107 0108 	add.w	r1, r7, #8
 8007de4:	4610      	mov	r0, r2
 8007de6:	4798      	blx	r3
 8007de8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dea:	e091      	b.n	8007f10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 facb 	bl	800838a <USBD_CtlError>
            err++;
 8007df4:	7afb      	ldrb	r3, [r7, #11]
 8007df6:	3301      	adds	r3, #1
 8007df8:	72fb      	strb	r3, [r7, #11]
          break;
 8007dfa:	e089      	b.n	8007f10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00b      	beq.n	8007e20 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	7c12      	ldrb	r2, [r2, #16]
 8007e14:	f107 0108 	add.w	r1, r7, #8
 8007e18:	4610      	mov	r0, r2
 8007e1a:	4798      	blx	r3
 8007e1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e1e:	e077      	b.n	8007f10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e20:	6839      	ldr	r1, [r7, #0]
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fab1 	bl	800838a <USBD_CtlError>
            err++;
 8007e28:	7afb      	ldrb	r3, [r7, #11]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e2e:	e06f      	b.n	8007f10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00b      	beq.n	8007e54 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	7c12      	ldrb	r2, [r2, #16]
 8007e48:	f107 0108 	add.w	r1, r7, #8
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	4798      	blx	r3
 8007e50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e52:	e05d      	b.n	8007f10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fa97 	bl	800838a <USBD_CtlError>
            err++;
 8007e5c:	7afb      	ldrb	r3, [r7, #11]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	72fb      	strb	r3, [r7, #11]
          break;
 8007e62:	e055      	b.n	8007f10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00b      	beq.n	8007e88 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	7c12      	ldrb	r2, [r2, #16]
 8007e7c:	f107 0108 	add.w	r1, r7, #8
 8007e80:	4610      	mov	r0, r2
 8007e82:	4798      	blx	r3
 8007e84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e86:	e043      	b.n	8007f10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fa7d 	bl	800838a <USBD_CtlError>
            err++;
 8007e90:	7afb      	ldrb	r3, [r7, #11]
 8007e92:	3301      	adds	r3, #1
 8007e94:	72fb      	strb	r3, [r7, #11]
          break;
 8007e96:	e03b      	b.n	8007f10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00b      	beq.n	8007ebc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eaa:	695b      	ldr	r3, [r3, #20]
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	7c12      	ldrb	r2, [r2, #16]
 8007eb0:	f107 0108 	add.w	r1, r7, #8
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	4798      	blx	r3
 8007eb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eba:	e029      	b.n	8007f10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ebc:	6839      	ldr	r1, [r7, #0]
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fa63 	bl	800838a <USBD_CtlError>
            err++;
 8007ec4:	7afb      	ldrb	r3, [r7, #11]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	72fb      	strb	r3, [r7, #11]
          break;
 8007eca:	e021      	b.n	8007f10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ed2:	699b      	ldr	r3, [r3, #24]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00b      	beq.n	8007ef0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ede:	699b      	ldr	r3, [r3, #24]
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	7c12      	ldrb	r2, [r2, #16]
 8007ee4:	f107 0108 	add.w	r1, r7, #8
 8007ee8:	4610      	mov	r0, r2
 8007eea:	4798      	blx	r3
 8007eec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eee:	e00f      	b.n	8007f10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 fa49 	bl	800838a <USBD_CtlError>
            err++;
 8007ef8:	7afb      	ldrb	r3, [r7, #11]
 8007efa:	3301      	adds	r3, #1
 8007efc:	72fb      	strb	r3, [r7, #11]
          break;
 8007efe:	e007      	b.n	8007f10 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fa41 	bl	800838a <USBD_CtlError>
          err++;
 8007f08:	7afb      	ldrb	r3, [r7, #11]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007f0e:	bf00      	nop
      }
      break;
 8007f10:	e037      	b.n	8007f82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	7c1b      	ldrb	r3, [r3, #16]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d109      	bne.n	8007f2e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f22:	f107 0208 	add.w	r2, r7, #8
 8007f26:	4610      	mov	r0, r2
 8007f28:	4798      	blx	r3
 8007f2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f2c:	e029      	b.n	8007f82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f2e:	6839      	ldr	r1, [r7, #0]
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fa2a 	bl	800838a <USBD_CtlError>
        err++;
 8007f36:	7afb      	ldrb	r3, [r7, #11]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f3c:	e021      	b.n	8007f82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	7c1b      	ldrb	r3, [r3, #16]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d10d      	bne.n	8007f62 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4e:	f107 0208 	add.w	r2, r7, #8
 8007f52:	4610      	mov	r0, r2
 8007f54:	4798      	blx	r3
 8007f56:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	2207      	movs	r2, #7
 8007f5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f60:	e00f      	b.n	8007f82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f62:	6839      	ldr	r1, [r7, #0]
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fa10 	bl	800838a <USBD_CtlError>
        err++;
 8007f6a:	7afb      	ldrb	r3, [r7, #11]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	72fb      	strb	r3, [r7, #11]
      break;
 8007f70:	e007      	b.n	8007f82 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fa08 	bl	800838a <USBD_CtlError>
      err++;
 8007f7a:	7afb      	ldrb	r3, [r7, #11]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	72fb      	strb	r3, [r7, #11]
      break;
 8007f80:	bf00      	nop
  }

  if (err != 0U)
 8007f82:	7afb      	ldrb	r3, [r7, #11]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d11e      	bne.n	8007fc6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	88db      	ldrh	r3, [r3, #6]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d016      	beq.n	8007fbe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007f90:	893b      	ldrh	r3, [r7, #8]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00e      	beq.n	8007fb4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	88da      	ldrh	r2, [r3, #6]
 8007f9a:	893b      	ldrh	r3, [r7, #8]
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	bf28      	it	cs
 8007fa0:	4613      	movcs	r3, r2
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007fa6:	893b      	ldrh	r3, [r7, #8]
 8007fa8:	461a      	mov	r2, r3
 8007faa:	68f9      	ldr	r1, [r7, #12]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fa5d 	bl	800846c <USBD_CtlSendData>
 8007fb2:	e009      	b.n	8007fc8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007fb4:	6839      	ldr	r1, [r7, #0]
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f9e7 	bl	800838a <USBD_CtlError>
 8007fbc:	e004      	b.n	8007fc8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 faae 	bl	8008520 <USBD_CtlSendStatus>
 8007fc4:	e000      	b.n	8007fc8 <USBD_GetDescriptor+0x2cc>
    return;
 8007fc6:	bf00      	nop
  }
}
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop

08007fd0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	889b      	ldrh	r3, [r3, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d131      	bne.n	8008046 <USBD_SetAddress+0x76>
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	88db      	ldrh	r3, [r3, #6]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d12d      	bne.n	8008046 <USBD_SetAddress+0x76>
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	885b      	ldrh	r3, [r3, #2]
 8007fee:	2b7f      	cmp	r3, #127	; 0x7f
 8007ff0:	d829      	bhi.n	8008046 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	885b      	ldrh	r3, [r3, #2]
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ffc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b03      	cmp	r3, #3
 8008008:	d104      	bne.n	8008014 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f9bc 	bl	800838a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008012:	e01d      	b.n	8008050 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	7bfa      	ldrb	r2, [r7, #15]
 8008018:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800801c:	7bfb      	ldrb	r3, [r7, #15]
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 ff01 	bl	8008e28 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fa7a 	bl	8008520 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800802c:	7bfb      	ldrb	r3, [r7, #15]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d004      	beq.n	800803c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2202      	movs	r2, #2
 8008036:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800803a:	e009      	b.n	8008050 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008044:	e004      	b.n	8008050 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f99e 	bl	800838a <USBD_CtlError>
  }
}
 800804e:	bf00      	nop
 8008050:	bf00      	nop
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	885b      	ldrh	r3, [r3, #2]
 800806a:	b2da      	uxtb	r2, r3
 800806c:	4b4e      	ldr	r3, [pc, #312]	; (80081a8 <USBD_SetConfig+0x150>)
 800806e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008070:	4b4d      	ldr	r3, [pc, #308]	; (80081a8 <USBD_SetConfig+0x150>)
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d905      	bls.n	8008084 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f985 	bl	800838a <USBD_CtlError>
    return USBD_FAIL;
 8008080:	2303      	movs	r3, #3
 8008082:	e08c      	b.n	800819e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800808a:	b2db      	uxtb	r3, r3
 800808c:	2b02      	cmp	r3, #2
 800808e:	d002      	beq.n	8008096 <USBD_SetConfig+0x3e>
 8008090:	2b03      	cmp	r3, #3
 8008092:	d029      	beq.n	80080e8 <USBD_SetConfig+0x90>
 8008094:	e075      	b.n	8008182 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008096:	4b44      	ldr	r3, [pc, #272]	; (80081a8 <USBD_SetConfig+0x150>)
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d020      	beq.n	80080e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800809e:	4b42      	ldr	r3, [pc, #264]	; (80081a8 <USBD_SetConfig+0x150>)
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	461a      	mov	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080a8:	4b3f      	ldr	r3, [pc, #252]	; (80081a8 <USBD_SetConfig+0x150>)
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7fe ffe7 	bl	8007082 <USBD_SetClassConfig>
 80080b4:	4603      	mov	r3, r0
 80080b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d008      	beq.n	80080d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f962 	bl	800838a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2202      	movs	r2, #2
 80080ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080ce:	e065      	b.n	800819c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fa25 	bl	8008520 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2203      	movs	r2, #3
 80080da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80080de:	e05d      	b.n	800819c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fa1d 	bl	8008520 <USBD_CtlSendStatus>
      break;
 80080e6:	e059      	b.n	800819c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80080e8:	4b2f      	ldr	r3, [pc, #188]	; (80081a8 <USBD_SetConfig+0x150>)
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d112      	bne.n	8008116 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2202      	movs	r2, #2
 80080f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80080f8:	4b2b      	ldr	r3, [pc, #172]	; (80081a8 <USBD_SetConfig+0x150>)
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	461a      	mov	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008102:	4b29      	ldr	r3, [pc, #164]	; (80081a8 <USBD_SetConfig+0x150>)
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	4619      	mov	r1, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7fe ffd6 	bl	80070ba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fa06 	bl	8008520 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008114:	e042      	b.n	800819c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008116:	4b24      	ldr	r3, [pc, #144]	; (80081a8 <USBD_SetConfig+0x150>)
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	461a      	mov	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	429a      	cmp	r2, r3
 8008122:	d02a      	beq.n	800817a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	b2db      	uxtb	r3, r3
 800812a:	4619      	mov	r1, r3
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7fe ffc4 	bl	80070ba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008132:	4b1d      	ldr	r3, [pc, #116]	; (80081a8 <USBD_SetConfig+0x150>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	461a      	mov	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800813c:	4b1a      	ldr	r3, [pc, #104]	; (80081a8 <USBD_SetConfig+0x150>)
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	4619      	mov	r1, r3
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f7fe ff9d 	bl	8007082 <USBD_SetClassConfig>
 8008148:	4603      	mov	r3, r0
 800814a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800814c:	7bfb      	ldrb	r3, [r7, #15]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00f      	beq.n	8008172 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008152:	6839      	ldr	r1, [r7, #0]
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 f918 	bl	800838a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	b2db      	uxtb	r3, r3
 8008160:	4619      	mov	r1, r3
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7fe ffa9 	bl	80070ba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2202      	movs	r2, #2
 800816c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008170:	e014      	b.n	800819c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f9d4 	bl	8008520 <USBD_CtlSendStatus>
      break;
 8008178:	e010      	b.n	800819c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f9d0 	bl	8008520 <USBD_CtlSendStatus>
      break;
 8008180:	e00c      	b.n	800819c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f900 	bl	800838a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800818a:	4b07      	ldr	r3, [pc, #28]	; (80081a8 <USBD_SetConfig+0x150>)
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	4619      	mov	r1, r3
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f7fe ff92 	bl	80070ba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008196:	2303      	movs	r3, #3
 8008198:	73fb      	strb	r3, [r7, #15]
      break;
 800819a:	bf00      	nop
  }

  return ret;
 800819c:	7bfb      	ldrb	r3, [r7, #15]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	2000032c 	.word	0x2000032c

080081ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	88db      	ldrh	r3, [r3, #6]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d004      	beq.n	80081c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80081be:	6839      	ldr	r1, [r7, #0]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f8e2 	bl	800838a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80081c6:	e023      	b.n	8008210 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b02      	cmp	r3, #2
 80081d2:	dc02      	bgt.n	80081da <USBD_GetConfig+0x2e>
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	dc03      	bgt.n	80081e0 <USBD_GetConfig+0x34>
 80081d8:	e015      	b.n	8008206 <USBD_GetConfig+0x5a>
 80081da:	2b03      	cmp	r3, #3
 80081dc:	d00b      	beq.n	80081f6 <USBD_GetConfig+0x4a>
 80081de:	e012      	b.n	8008206 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	3308      	adds	r3, #8
 80081ea:	2201      	movs	r2, #1
 80081ec:	4619      	mov	r1, r3
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f93c 	bl	800846c <USBD_CtlSendData>
        break;
 80081f4:	e00c      	b.n	8008210 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	3304      	adds	r3, #4
 80081fa:	2201      	movs	r2, #1
 80081fc:	4619      	mov	r1, r3
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 f934 	bl	800846c <USBD_CtlSendData>
        break;
 8008204:	e004      	b.n	8008210 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008206:	6839      	ldr	r1, [r7, #0]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f8be 	bl	800838a <USBD_CtlError>
        break;
 800820e:	bf00      	nop
}
 8008210:	bf00      	nop
 8008212:	3708      	adds	r7, #8
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008228:	b2db      	uxtb	r3, r3
 800822a:	3b01      	subs	r3, #1
 800822c:	2b02      	cmp	r3, #2
 800822e:	d81e      	bhi.n	800826e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	88db      	ldrh	r3, [r3, #6]
 8008234:	2b02      	cmp	r3, #2
 8008236:	d004      	beq.n	8008242 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f8a5 	bl	800838a <USBD_CtlError>
        break;
 8008240:	e01a      	b.n	8008278 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800824e:	2b00      	cmp	r3, #0
 8008250:	d005      	beq.n	800825e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	f043 0202 	orr.w	r2, r3, #2
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	330c      	adds	r3, #12
 8008262:	2202      	movs	r2, #2
 8008264:	4619      	mov	r1, r3
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f900 	bl	800846c <USBD_CtlSendData>
      break;
 800826c:	e004      	b.n	8008278 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800826e:	6839      	ldr	r1, [r7, #0]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f88a 	bl	800838a <USBD_CtlError>
      break;
 8008276:	bf00      	nop
  }
}
 8008278:	bf00      	nop
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	885b      	ldrh	r3, [r3, #2]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d107      	bne.n	80082a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2201      	movs	r2, #1
 8008296:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f940 	bl	8008520 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80082a0:	e013      	b.n	80082ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	885b      	ldrh	r3, [r3, #2]
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d10b      	bne.n	80082c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	889b      	ldrh	r3, [r3, #4]
 80082ae:	0a1b      	lsrs	r3, r3, #8
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	b2da      	uxtb	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f930 	bl	8008520 <USBD_CtlSendStatus>
}
 80082c0:	e003      	b.n	80082ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f860 	bl	800838a <USBD_CtlError>
}
 80082ca:	bf00      	nop
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b082      	sub	sp, #8
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
 80082da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	3b01      	subs	r3, #1
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d80b      	bhi.n	8008302 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	885b      	ldrh	r3, [r3, #2]
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d10c      	bne.n	800830c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f910 	bl	8008520 <USBD_CtlSendStatus>
      }
      break;
 8008300:	e004      	b.n	800830c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008302:	6839      	ldr	r1, [r7, #0]
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f840 	bl	800838a <USBD_CtlError>
      break;
 800830a:	e000      	b.n	800830e <USBD_ClrFeature+0x3c>
      break;
 800830c:	bf00      	nop
  }
}
 800830e:	bf00      	nop
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b084      	sub	sp, #16
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	781a      	ldrb	r2, [r3, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	3301      	adds	r3, #1
 8008330:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	781a      	ldrb	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	3301      	adds	r3, #1
 800833e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f7ff fa41 	bl	80077c8 <SWAPBYTE>
 8008346:	4603      	mov	r3, r0
 8008348:	461a      	mov	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	3301      	adds	r3, #1
 8008352:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	3301      	adds	r3, #1
 8008358:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f7ff fa34 	bl	80077c8 <SWAPBYTE>
 8008360:	4603      	mov	r3, r0
 8008362:	461a      	mov	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	3301      	adds	r3, #1
 800836c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	3301      	adds	r3, #1
 8008372:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f7ff fa27 	bl	80077c8 <SWAPBYTE>
 800837a:	4603      	mov	r3, r0
 800837c:	461a      	mov	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	80da      	strh	r2, [r3, #6]
}
 8008382:	bf00      	nop
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b082      	sub	sp, #8
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
 8008392:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008394:	2180      	movs	r1, #128	; 0x80
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fcdc 	bl	8008d54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800839c:	2100      	movs	r1, #0
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fcd8 	bl	8008d54 <USBD_LL_StallEP>
}
 80083a4:	bf00      	nop
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80083b8:	2300      	movs	r3, #0
 80083ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d036      	beq.n	8008430 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80083c6:	6938      	ldr	r0, [r7, #16]
 80083c8:	f000 f836 	bl	8008438 <USBD_GetLen>
 80083cc:	4603      	mov	r3, r0
 80083ce:	3301      	adds	r3, #1
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	005b      	lsls	r3, r3, #1
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80083da:	7dfb      	ldrb	r3, [r7, #23]
 80083dc:	68ba      	ldr	r2, [r7, #8]
 80083de:	4413      	add	r3, r2
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	7812      	ldrb	r2, [r2, #0]
 80083e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80083e6:	7dfb      	ldrb	r3, [r7, #23]
 80083e8:	3301      	adds	r3, #1
 80083ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80083ec:	7dfb      	ldrb	r3, [r7, #23]
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	4413      	add	r3, r2
 80083f2:	2203      	movs	r2, #3
 80083f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80083f6:	7dfb      	ldrb	r3, [r7, #23]
 80083f8:	3301      	adds	r3, #1
 80083fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80083fc:	e013      	b.n	8008426 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80083fe:	7dfb      	ldrb	r3, [r7, #23]
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	4413      	add	r3, r2
 8008404:	693a      	ldr	r2, [r7, #16]
 8008406:	7812      	ldrb	r2, [r2, #0]
 8008408:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	3301      	adds	r3, #1
 800840e:	613b      	str	r3, [r7, #16]
    idx++;
 8008410:	7dfb      	ldrb	r3, [r7, #23]
 8008412:	3301      	adds	r3, #1
 8008414:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008416:	7dfb      	ldrb	r3, [r7, #23]
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	4413      	add	r3, r2
 800841c:	2200      	movs	r2, #0
 800841e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008420:	7dfb      	ldrb	r3, [r7, #23]
 8008422:	3301      	adds	r3, #1
 8008424:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1e7      	bne.n	80083fe <USBD_GetString+0x52>
 800842e:	e000      	b.n	8008432 <USBD_GetString+0x86>
    return;
 8008430:	bf00      	nop
  }
}
 8008432:	3718      	adds	r7, #24
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008440:	2300      	movs	r3, #0
 8008442:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008448:	e005      	b.n	8008456 <USBD_GetLen+0x1e>
  {
    len++;
 800844a:	7bfb      	ldrb	r3, [r7, #15]
 800844c:	3301      	adds	r3, #1
 800844e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	3301      	adds	r3, #1
 8008454:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1f5      	bne.n	800844a <USBD_GetLen+0x12>
  }

  return len;
 800845e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2202      	movs	r2, #2
 800847c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	68ba      	ldr	r2, [r7, #8]
 8008490:	2100      	movs	r1, #0
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 fce7 	bl	8008e66 <USBD_LL_Transmit>

  return USBD_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b084      	sub	sp, #16
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	60f8      	str	r0, [r7, #12]
 80084aa:	60b9      	str	r1, [r7, #8]
 80084ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	2100      	movs	r1, #0
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f000 fcd6 	bl	8008e66 <USBD_LL_Transmit>

  return USBD_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2203      	movs	r2, #3
 80084d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	68ba      	ldr	r2, [r7, #8]
 80084ec:	2100      	movs	r1, #0
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f000 fcda 	bl	8008ea8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b084      	sub	sp, #16
 8008502:	af00      	add	r7, sp, #0
 8008504:	60f8      	str	r0, [r7, #12]
 8008506:	60b9      	str	r1, [r7, #8]
 8008508:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	2100      	movs	r1, #0
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f000 fcc9 	bl	8008ea8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2204      	movs	r2, #4
 800852c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008530:	2300      	movs	r3, #0
 8008532:	2200      	movs	r2, #0
 8008534:	2100      	movs	r1, #0
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fc95 	bl	8008e66 <USBD_LL_Transmit>

  return USBD_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3708      	adds	r7, #8
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b082      	sub	sp, #8
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2205      	movs	r2, #5
 8008552:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008556:	2300      	movs	r3, #0
 8008558:	2200      	movs	r2, #0
 800855a:	2100      	movs	r1, #0
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fca3 	bl	8008ea8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008570:	2200      	movs	r2, #0
 8008572:	4912      	ldr	r1, [pc, #72]	; (80085bc <MX_USB_DEVICE_Init+0x50>)
 8008574:	4812      	ldr	r0, [pc, #72]	; (80085c0 <MX_USB_DEVICE_Init+0x54>)
 8008576:	f7fe fd07 	bl	8006f88 <USBD_Init>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d001      	beq.n	8008584 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008580:	f7f8 fce2 	bl	8000f48 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008584:	490f      	ldr	r1, [pc, #60]	; (80085c4 <MX_USB_DEVICE_Init+0x58>)
 8008586:	480e      	ldr	r0, [pc, #56]	; (80085c0 <MX_USB_DEVICE_Init+0x54>)
 8008588:	f7fe fd2e 	bl	8006fe8 <USBD_RegisterClass>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d001      	beq.n	8008596 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008592:	f7f8 fcd9 	bl	8000f48 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008596:	490c      	ldr	r1, [pc, #48]	; (80085c8 <MX_USB_DEVICE_Init+0x5c>)
 8008598:	4809      	ldr	r0, [pc, #36]	; (80085c0 <MX_USB_DEVICE_Init+0x54>)
 800859a:	f7fe fc1f 	bl	8006ddc <USBD_CDC_RegisterInterface>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d001      	beq.n	80085a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80085a4:	f7f8 fcd0 	bl	8000f48 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80085a8:	4805      	ldr	r0, [pc, #20]	; (80085c0 <MX_USB_DEVICE_Init+0x54>)
 80085aa:	f7fe fd53 	bl	8007054 <USBD_Start>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d001      	beq.n	80085b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80085b4:	f7f8 fcc8 	bl	8000f48 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80085b8:	bf00      	nop
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	200000b0 	.word	0x200000b0
 80085c0:	20000330 	.word	0x20000330
 80085c4:	2000001c 	.word	0x2000001c
 80085c8:	2000009c 	.word	0x2000009c

080085cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80085d0:	2200      	movs	r2, #0
 80085d2:	4905      	ldr	r1, [pc, #20]	; (80085e8 <CDC_Init_FS+0x1c>)
 80085d4:	4805      	ldr	r0, [pc, #20]	; (80085ec <CDC_Init_FS+0x20>)
 80085d6:	f7fe fc1b 	bl	8006e10 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80085da:	4905      	ldr	r1, [pc, #20]	; (80085f0 <CDC_Init_FS+0x24>)
 80085dc:	4803      	ldr	r0, [pc, #12]	; (80085ec <CDC_Init_FS+0x20>)
 80085de:	f7fe fc39 	bl	8006e54 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80085e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	20000e0c 	.word	0x20000e0c
 80085ec:	20000330 	.word	0x20000330
 80085f0:	2000060c 	.word	0x2000060c

080085f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80085f4:	b480      	push	{r7}
 80085f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80085f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	4603      	mov	r3, r0
 800860c:	6039      	str	r1, [r7, #0]
 800860e:	71fb      	strb	r3, [r7, #7]
 8008610:	4613      	mov	r3, r2
 8008612:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008614:	79fb      	ldrb	r3, [r7, #7]
 8008616:	2b23      	cmp	r3, #35	; 0x23
 8008618:	d84a      	bhi.n	80086b0 <CDC_Control_FS+0xac>
 800861a:	a201      	add	r2, pc, #4	; (adr r2, 8008620 <CDC_Control_FS+0x1c>)
 800861c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008620:	080086b1 	.word	0x080086b1
 8008624:	080086b1 	.word	0x080086b1
 8008628:	080086b1 	.word	0x080086b1
 800862c:	080086b1 	.word	0x080086b1
 8008630:	080086b1 	.word	0x080086b1
 8008634:	080086b1 	.word	0x080086b1
 8008638:	080086b1 	.word	0x080086b1
 800863c:	080086b1 	.word	0x080086b1
 8008640:	080086b1 	.word	0x080086b1
 8008644:	080086b1 	.word	0x080086b1
 8008648:	080086b1 	.word	0x080086b1
 800864c:	080086b1 	.word	0x080086b1
 8008650:	080086b1 	.word	0x080086b1
 8008654:	080086b1 	.word	0x080086b1
 8008658:	080086b1 	.word	0x080086b1
 800865c:	080086b1 	.word	0x080086b1
 8008660:	080086b1 	.word	0x080086b1
 8008664:	080086b1 	.word	0x080086b1
 8008668:	080086b1 	.word	0x080086b1
 800866c:	080086b1 	.word	0x080086b1
 8008670:	080086b1 	.word	0x080086b1
 8008674:	080086b1 	.word	0x080086b1
 8008678:	080086b1 	.word	0x080086b1
 800867c:	080086b1 	.word	0x080086b1
 8008680:	080086b1 	.word	0x080086b1
 8008684:	080086b1 	.word	0x080086b1
 8008688:	080086b1 	.word	0x080086b1
 800868c:	080086b1 	.word	0x080086b1
 8008690:	080086b1 	.word	0x080086b1
 8008694:	080086b1 	.word	0x080086b1
 8008698:	080086b1 	.word	0x080086b1
 800869c:	080086b1 	.word	0x080086b1
 80086a0:	080086b1 	.word	0x080086b1
 80086a4:	080086b1 	.word	0x080086b1
 80086a8:	080086b1 	.word	0x080086b1
 80086ac:	080086b1 	.word	0x080086b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80086b0:	bf00      	nop
  }

  return (USBD_OK);
 80086b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  tmcl_receive(Buf, (*Len));
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4619      	mov	r1, r3
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f7f9 f813 	bl	80016fc <tmcl_receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80086d6:	6879      	ldr	r1, [r7, #4]
 80086d8:	4805      	ldr	r0, [pc, #20]	; (80086f0 <CDC_Receive_FS+0x30>)
 80086da:	f7fe fbbb 	bl	8006e54 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80086de:	4804      	ldr	r0, [pc, #16]	; (80086f0 <CDC_Receive_FS+0x30>)
 80086e0:	f7fe fc1c 	bl	8006f1c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80086e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	20000330 	.word	0x20000330

080086f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	460b      	mov	r3, r1
 80086fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008704:	4b0d      	ldr	r3, [pc, #52]	; (800873c <CDC_Transmit_FS+0x48>)
 8008706:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800870a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008712:	2b00      	cmp	r3, #0
 8008714:	d001      	beq.n	800871a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008716:	2301      	movs	r3, #1
 8008718:	e00b      	b.n	8008732 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800871a:	887b      	ldrh	r3, [r7, #2]
 800871c:	461a      	mov	r2, r3
 800871e:	6879      	ldr	r1, [r7, #4]
 8008720:	4806      	ldr	r0, [pc, #24]	; (800873c <CDC_Transmit_FS+0x48>)
 8008722:	f7fe fb75 	bl	8006e10 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008726:	4805      	ldr	r0, [pc, #20]	; (800873c <CDC_Transmit_FS+0x48>)
 8008728:	f7fe fbb2 	bl	8006e90 <USBD_CDC_TransmitPacket>
 800872c:	4603      	mov	r3, r0
 800872e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008730:	7bfb      	ldrb	r3, [r7, #15]
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	20000330 	.word	0x20000330

08008740 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008740:	b480      	push	{r7}
 8008742:	b087      	sub	sp, #28
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	4613      	mov	r3, r2
 800874c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800874e:	2300      	movs	r3, #0
 8008750:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008752:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008756:	4618      	mov	r0, r3
 8008758:	371c      	adds	r7, #28
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
	...

08008764 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	4603      	mov	r3, r0
 800876c:	6039      	str	r1, [r7, #0]
 800876e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	2212      	movs	r2, #18
 8008774:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008776:	4b03      	ldr	r3, [pc, #12]	; (8008784 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008778:	4618      	mov	r0, r3
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr
 8008784:	200000cc 	.word	0x200000cc

08008788 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	4603      	mov	r3, r0
 8008790:	6039      	str	r1, [r7, #0]
 8008792:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	2204      	movs	r2, #4
 8008798:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800879a:	4b03      	ldr	r3, [pc, #12]	; (80087a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800879c:	4618      	mov	r0, r3
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr
 80087a8:	200000e0 	.word	0x200000e0

080087ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	4603      	mov	r3, r0
 80087b4:	6039      	str	r1, [r7, #0]
 80087b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087b8:	79fb      	ldrb	r3, [r7, #7]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d105      	bne.n	80087ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087be:	683a      	ldr	r2, [r7, #0]
 80087c0:	4907      	ldr	r1, [pc, #28]	; (80087e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80087c2:	4808      	ldr	r0, [pc, #32]	; (80087e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80087c4:	f7ff fdf2 	bl	80083ac <USBD_GetString>
 80087c8:	e004      	b.n	80087d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	4904      	ldr	r1, [pc, #16]	; (80087e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80087ce:	4805      	ldr	r0, [pc, #20]	; (80087e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80087d0:	f7ff fdec 	bl	80083ac <USBD_GetString>
  }
  return USBD_StrDesc;
 80087d4:	4b02      	ldr	r3, [pc, #8]	; (80087e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3708      	adds	r7, #8
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	2000160c 	.word	0x2000160c
 80087e4:	08009030 	.word	0x08009030

080087e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	4603      	mov	r3, r0
 80087f0:	6039      	str	r1, [r7, #0]
 80087f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80087f4:	683a      	ldr	r2, [r7, #0]
 80087f6:	4904      	ldr	r1, [pc, #16]	; (8008808 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80087f8:	4804      	ldr	r0, [pc, #16]	; (800880c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80087fa:	f7ff fdd7 	bl	80083ac <USBD_GetString>
  return USBD_StrDesc;
 80087fe:	4b02      	ldr	r3, [pc, #8]	; (8008808 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008800:	4618      	mov	r0, r3
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	2000160c 	.word	0x2000160c
 800880c:	0800903c 	.word	0x0800903c

08008810 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	4603      	mov	r3, r0
 8008818:	6039      	str	r1, [r7, #0]
 800881a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	221a      	movs	r2, #26
 8008820:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008822:	f000 f843 	bl	80088ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008826:	4b02      	ldr	r3, [pc, #8]	; (8008830 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008828:	4618      	mov	r0, r3
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	200000e4 	.word	0x200000e4

08008834 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	4603      	mov	r3, r0
 800883c:	6039      	str	r1, [r7, #0]
 800883e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008840:	79fb      	ldrb	r3, [r7, #7]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d105      	bne.n	8008852 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	4907      	ldr	r1, [pc, #28]	; (8008868 <USBD_FS_ConfigStrDescriptor+0x34>)
 800884a:	4808      	ldr	r0, [pc, #32]	; (800886c <USBD_FS_ConfigStrDescriptor+0x38>)
 800884c:	f7ff fdae 	bl	80083ac <USBD_GetString>
 8008850:	e004      	b.n	800885c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008852:	683a      	ldr	r2, [r7, #0]
 8008854:	4904      	ldr	r1, [pc, #16]	; (8008868 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008856:	4805      	ldr	r0, [pc, #20]	; (800886c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008858:	f7ff fda8 	bl	80083ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800885c:	4b02      	ldr	r3, [pc, #8]	; (8008868 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800885e:	4618      	mov	r0, r3
 8008860:	3708      	adds	r7, #8
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	2000160c 	.word	0x2000160c
 800886c:	08009044 	.word	0x08009044

08008870 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	4603      	mov	r3, r0
 8008878:	6039      	str	r1, [r7, #0]
 800887a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800887c:	79fb      	ldrb	r3, [r7, #7]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d105      	bne.n	800888e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	4907      	ldr	r1, [pc, #28]	; (80088a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008886:	4808      	ldr	r0, [pc, #32]	; (80088a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008888:	f7ff fd90 	bl	80083ac <USBD_GetString>
 800888c:	e004      	b.n	8008898 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800888e:	683a      	ldr	r2, [r7, #0]
 8008890:	4904      	ldr	r1, [pc, #16]	; (80088a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008892:	4805      	ldr	r0, [pc, #20]	; (80088a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008894:	f7ff fd8a 	bl	80083ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8008898:	4b02      	ldr	r3, [pc, #8]	; (80088a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800889a:	4618      	mov	r0, r3
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	2000160c 	.word	0x2000160c
 80088a8:	08009050 	.word	0x08009050

080088ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80088b2:	4b0f      	ldr	r3, [pc, #60]	; (80088f0 <Get_SerialNum+0x44>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80088b8:	4b0e      	ldr	r3, [pc, #56]	; (80088f4 <Get_SerialNum+0x48>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80088be:	4b0e      	ldr	r3, [pc, #56]	; (80088f8 <Get_SerialNum+0x4c>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4413      	add	r3, r2
 80088ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d009      	beq.n	80088e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80088d2:	2208      	movs	r2, #8
 80088d4:	4909      	ldr	r1, [pc, #36]	; (80088fc <Get_SerialNum+0x50>)
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f000 f814 	bl	8008904 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80088dc:	2204      	movs	r2, #4
 80088de:	4908      	ldr	r1, [pc, #32]	; (8008900 <Get_SerialNum+0x54>)
 80088e0:	68b8      	ldr	r0, [r7, #8]
 80088e2:	f000 f80f 	bl	8008904 <IntToUnicode>
  }
}
 80088e6:	bf00      	nop
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	1fff7a10 	.word	0x1fff7a10
 80088f4:	1fff7a14 	.word	0x1fff7a14
 80088f8:	1fff7a18 	.word	0x1fff7a18
 80088fc:	200000e6 	.word	0x200000e6
 8008900:	200000f6 	.word	0x200000f6

08008904 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008904:	b480      	push	{r7}
 8008906:	b087      	sub	sp, #28
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	4613      	mov	r3, r2
 8008910:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008912:	2300      	movs	r3, #0
 8008914:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008916:	2300      	movs	r3, #0
 8008918:	75fb      	strb	r3, [r7, #23]
 800891a:	e027      	b.n	800896c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	0f1b      	lsrs	r3, r3, #28
 8008920:	2b09      	cmp	r3, #9
 8008922:	d80b      	bhi.n	800893c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	0f1b      	lsrs	r3, r3, #28
 8008928:	b2da      	uxtb	r2, r3
 800892a:	7dfb      	ldrb	r3, [r7, #23]
 800892c:	005b      	lsls	r3, r3, #1
 800892e:	4619      	mov	r1, r3
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	440b      	add	r3, r1
 8008934:	3230      	adds	r2, #48	; 0x30
 8008936:	b2d2      	uxtb	r2, r2
 8008938:	701a      	strb	r2, [r3, #0]
 800893a:	e00a      	b.n	8008952 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	0f1b      	lsrs	r3, r3, #28
 8008940:	b2da      	uxtb	r2, r3
 8008942:	7dfb      	ldrb	r3, [r7, #23]
 8008944:	005b      	lsls	r3, r3, #1
 8008946:	4619      	mov	r1, r3
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	440b      	add	r3, r1
 800894c:	3237      	adds	r2, #55	; 0x37
 800894e:	b2d2      	uxtb	r2, r2
 8008950:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	011b      	lsls	r3, r3, #4
 8008956:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008958:	7dfb      	ldrb	r3, [r7, #23]
 800895a:	005b      	lsls	r3, r3, #1
 800895c:	3301      	adds	r3, #1
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	4413      	add	r3, r2
 8008962:	2200      	movs	r2, #0
 8008964:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008966:	7dfb      	ldrb	r3, [r7, #23]
 8008968:	3301      	adds	r3, #1
 800896a:	75fb      	strb	r3, [r7, #23]
 800896c:	7dfa      	ldrb	r2, [r7, #23]
 800896e:	79fb      	ldrb	r3, [r7, #7]
 8008970:	429a      	cmp	r2, r3
 8008972:	d3d3      	bcc.n	800891c <IntToUnicode+0x18>
  }
}
 8008974:	bf00      	nop
 8008976:	bf00      	nop
 8008978:	371c      	adds	r7, #28
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
	...

08008984 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b08a      	sub	sp, #40	; 0x28
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800898c:	f107 0314 	add.w	r3, r7, #20
 8008990:	2200      	movs	r2, #0
 8008992:	601a      	str	r2, [r3, #0]
 8008994:	605a      	str	r2, [r3, #4]
 8008996:	609a      	str	r2, [r3, #8]
 8008998:	60da      	str	r2, [r3, #12]
 800899a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089a4:	d13a      	bne.n	8008a1c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089a6:	2300      	movs	r3, #0
 80089a8:	613b      	str	r3, [r7, #16]
 80089aa:	4b1e      	ldr	r3, [pc, #120]	; (8008a24 <HAL_PCD_MspInit+0xa0>)
 80089ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ae:	4a1d      	ldr	r2, [pc, #116]	; (8008a24 <HAL_PCD_MspInit+0xa0>)
 80089b0:	f043 0301 	orr.w	r3, r3, #1
 80089b4:	6313      	str	r3, [r2, #48]	; 0x30
 80089b6:	4b1b      	ldr	r3, [pc, #108]	; (8008a24 <HAL_PCD_MspInit+0xa0>)
 80089b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ba:	f003 0301 	and.w	r3, r3, #1
 80089be:	613b      	str	r3, [r7, #16]
 80089c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80089c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80089c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089c8:	2302      	movs	r3, #2
 80089ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089cc:	2300      	movs	r3, #0
 80089ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089d0:	2303      	movs	r3, #3
 80089d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80089d4:	230a      	movs	r3, #10
 80089d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089d8:	f107 0314 	add.w	r3, r7, #20
 80089dc:	4619      	mov	r1, r3
 80089de:	4812      	ldr	r0, [pc, #72]	; (8008a28 <HAL_PCD_MspInit+0xa4>)
 80089e0:	f7f9 fd36 	bl	8002450 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80089e4:	4b0f      	ldr	r3, [pc, #60]	; (8008a24 <HAL_PCD_MspInit+0xa0>)
 80089e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e8:	4a0e      	ldr	r2, [pc, #56]	; (8008a24 <HAL_PCD_MspInit+0xa0>)
 80089ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089ee:	6353      	str	r3, [r2, #52]	; 0x34
 80089f0:	2300      	movs	r3, #0
 80089f2:	60fb      	str	r3, [r7, #12]
 80089f4:	4b0b      	ldr	r3, [pc, #44]	; (8008a24 <HAL_PCD_MspInit+0xa0>)
 80089f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089f8:	4a0a      	ldr	r2, [pc, #40]	; (8008a24 <HAL_PCD_MspInit+0xa0>)
 80089fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089fe:	6453      	str	r3, [r2, #68]	; 0x44
 8008a00:	4b08      	ldr	r3, [pc, #32]	; (8008a24 <HAL_PCD_MspInit+0xa0>)
 8008a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a08:	60fb      	str	r3, [r7, #12]
 8008a0a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	2100      	movs	r1, #0
 8008a10:	2043      	movs	r0, #67	; 0x43
 8008a12:	f7f9 f9da 	bl	8001dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a16:	2043      	movs	r0, #67	; 0x43
 8008a18:	f7f9 f9f3 	bl	8001e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008a1c:	bf00      	nop
 8008a1e:	3728      	adds	r7, #40	; 0x28
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	40023800 	.word	0x40023800
 8008a28:	40020000 	.word	0x40020000

08008a2c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a40:	4619      	mov	r1, r3
 8008a42:	4610      	mov	r0, r2
 8008a44:	f7fe fb53 	bl	80070ee <USBD_LL_SetupStage>
}
 8008a48:	bf00      	nop
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	460b      	mov	r3, r1
 8008a5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008a62:	78fa      	ldrb	r2, [r7, #3]
 8008a64:	6879      	ldr	r1, [r7, #4]
 8008a66:	4613      	mov	r3, r2
 8008a68:	00db      	lsls	r3, r3, #3
 8008a6a:	4413      	add	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	440b      	add	r3, r1
 8008a70:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	78fb      	ldrb	r3, [r7, #3]
 8008a78:	4619      	mov	r1, r3
 8008a7a:	f7fe fb8d 	bl	8007198 <USBD_LL_DataOutStage>
}
 8008a7e:	bf00      	nop
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b082      	sub	sp, #8
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	460b      	mov	r3, r1
 8008a90:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008a98:	78fa      	ldrb	r2, [r7, #3]
 8008a9a:	6879      	ldr	r1, [r7, #4]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	00db      	lsls	r3, r3, #3
 8008aa0:	4413      	add	r3, r2
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	440b      	add	r3, r1
 8008aa6:	334c      	adds	r3, #76	; 0x4c
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	78fb      	ldrb	r3, [r7, #3]
 8008aac:	4619      	mov	r1, r3
 8008aae:	f7fe fc26 	bl	80072fe <USBD_LL_DataInStage>
}
 8008ab2:	bf00      	nop
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b082      	sub	sp, #8
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7fe fd5a 	bl	8007582 <USBD_LL_SOF>
}
 8008ace:	bf00      	nop
 8008ad0:	3708      	adds	r7, #8
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b084      	sub	sp, #16
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d001      	beq.n	8008aee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008aea:	f7f8 fa2d 	bl	8000f48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008af4:	7bfa      	ldrb	r2, [r7, #15]
 8008af6:	4611      	mov	r1, r2
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7fe fd04 	bl	8007506 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7fe fcac 	bl	8007462 <USBD_LL_Reset>
}
 8008b0a:	bf00      	nop
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
	...

08008b14 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7fe fcff 	bl	8007526 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	6812      	ldr	r2, [r2, #0]
 8008b36:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b3a:	f043 0301 	orr.w	r3, r3, #1
 8008b3e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a1b      	ldr	r3, [r3, #32]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d005      	beq.n	8008b54 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b48:	4b04      	ldr	r3, [pc, #16]	; (8008b5c <HAL_PCD_SuspendCallback+0x48>)
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	4a03      	ldr	r2, [pc, #12]	; (8008b5c <HAL_PCD_SuspendCallback+0x48>)
 8008b4e:	f043 0306 	orr.w	r3, r3, #6
 8008b52:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b54:	bf00      	nop
 8008b56:	3708      	adds	r7, #8
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	e000ed00 	.word	0xe000ed00

08008b60 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7fe fcef 	bl	8007552 <USBD_LL_Resume>
}
 8008b74:	bf00      	nop
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	460b      	mov	r3, r1
 8008b86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b8e:	78fa      	ldrb	r2, [r7, #3]
 8008b90:	4611      	mov	r1, r2
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fe fd47 	bl	8007626 <USBD_LL_IsoOUTIncomplete>
}
 8008b98:	bf00      	nop
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	460b      	mov	r3, r1
 8008baa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bb2:	78fa      	ldrb	r2, [r7, #3]
 8008bb4:	4611      	mov	r1, r2
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7fe fd03 	bl	80075c2 <USBD_LL_IsoINIncomplete>
}
 8008bbc:	bf00      	nop
 8008bbe:	3708      	adds	r7, #8
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7fe fd59 	bl	800768a <USBD_LL_DevConnected>
}
 8008bd8:	bf00      	nop
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7fe fd56 	bl	80076a0 <USBD_LL_DevDisconnected>
}
 8008bf4:	bf00      	nop
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d13c      	bne.n	8008c86 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008c0c:	4a20      	ldr	r2, [pc, #128]	; (8008c90 <USBD_LL_Init+0x94>)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a1e      	ldr	r2, [pc, #120]	; (8008c90 <USBD_LL_Init+0x94>)
 8008c18:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008c1c:	4b1c      	ldr	r3, [pc, #112]	; (8008c90 <USBD_LL_Init+0x94>)
 8008c1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008c22:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008c24:	4b1a      	ldr	r3, [pc, #104]	; (8008c90 <USBD_LL_Init+0x94>)
 8008c26:	2204      	movs	r2, #4
 8008c28:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008c2a:	4b19      	ldr	r3, [pc, #100]	; (8008c90 <USBD_LL_Init+0x94>)
 8008c2c:	2202      	movs	r2, #2
 8008c2e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008c30:	4b17      	ldr	r3, [pc, #92]	; (8008c90 <USBD_LL_Init+0x94>)
 8008c32:	2200      	movs	r2, #0
 8008c34:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008c36:	4b16      	ldr	r3, [pc, #88]	; (8008c90 <USBD_LL_Init+0x94>)
 8008c38:	2202      	movs	r2, #2
 8008c3a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c3c:	4b14      	ldr	r3, [pc, #80]	; (8008c90 <USBD_LL_Init+0x94>)
 8008c3e:	2200      	movs	r2, #0
 8008c40:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008c42:	4b13      	ldr	r3, [pc, #76]	; (8008c90 <USBD_LL_Init+0x94>)
 8008c44:	2200      	movs	r2, #0
 8008c46:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008c48:	4b11      	ldr	r3, [pc, #68]	; (8008c90 <USBD_LL_Init+0x94>)
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008c4e:	4b10      	ldr	r3, [pc, #64]	; (8008c90 <USBD_LL_Init+0x94>)
 8008c50:	2200      	movs	r2, #0
 8008c52:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008c54:	4b0e      	ldr	r3, [pc, #56]	; (8008c90 <USBD_LL_Init+0x94>)
 8008c56:	2200      	movs	r2, #0
 8008c58:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008c5a:	480d      	ldr	r0, [pc, #52]	; (8008c90 <USBD_LL_Init+0x94>)
 8008c5c:	f7f9 fd95 	bl	800278a <HAL_PCD_Init>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d001      	beq.n	8008c6a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008c66:	f7f8 f96f 	bl	8000f48 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008c6a:	2180      	movs	r1, #128	; 0x80
 8008c6c:	4808      	ldr	r0, [pc, #32]	; (8008c90 <USBD_LL_Init+0x94>)
 8008c6e:	f7fa ffec 	bl	8003c4a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008c72:	2240      	movs	r2, #64	; 0x40
 8008c74:	2100      	movs	r1, #0
 8008c76:	4806      	ldr	r0, [pc, #24]	; (8008c90 <USBD_LL_Init+0x94>)
 8008c78:	f7fa ffa0 	bl	8003bbc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008c7c:	2280      	movs	r2, #128	; 0x80
 8008c7e:	2101      	movs	r1, #1
 8008c80:	4803      	ldr	r0, [pc, #12]	; (8008c90 <USBD_LL_Init+0x94>)
 8008c82:	f7fa ff9b 	bl	8003bbc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	2000180c 	.word	0x2000180c

08008c94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7f9 fe8a 	bl	80029c4 <HAL_PCD_Start>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cb4:	7bfb      	ldrb	r3, [r7, #15]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f000 f942 	bl	8008f40 <USBD_Get_USB_Status>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b084      	sub	sp, #16
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	4608      	mov	r0, r1
 8008cd4:	4611      	mov	r1, r2
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	4603      	mov	r3, r0
 8008cda:	70fb      	strb	r3, [r7, #3]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	70bb      	strb	r3, [r7, #2]
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008cf2:	78bb      	ldrb	r3, [r7, #2]
 8008cf4:	883a      	ldrh	r2, [r7, #0]
 8008cf6:	78f9      	ldrb	r1, [r7, #3]
 8008cf8:	f7fa fb5b 	bl	80033b2 <HAL_PCD_EP_Open>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d00:	7bfb      	ldrb	r3, [r7, #15]
 8008d02:	4618      	mov	r0, r3
 8008d04:	f000 f91c 	bl	8008f40 <USBD_Get_USB_Status>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b084      	sub	sp, #16
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	460b      	mov	r3, r1
 8008d20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d22:	2300      	movs	r3, #0
 8008d24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d26:	2300      	movs	r3, #0
 8008d28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d30:	78fa      	ldrb	r2, [r7, #3]
 8008d32:	4611      	mov	r1, r2
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7fa fba4 	bl	8003482 <HAL_PCD_EP_Close>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d3e:	7bfb      	ldrb	r3, [r7, #15]
 8008d40:	4618      	mov	r0, r3
 8008d42:	f000 f8fd 	bl	8008f40 <USBD_Get_USB_Status>
 8008d46:	4603      	mov	r3, r0
 8008d48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d60:	2300      	movs	r3, #0
 8008d62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d64:	2300      	movs	r3, #0
 8008d66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d6e:	78fa      	ldrb	r2, [r7, #3]
 8008d70:	4611      	mov	r1, r2
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7fa fc7c 	bl	8003670 <HAL_PCD_EP_SetStall>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d7c:	7bfb      	ldrb	r3, [r7, #15]
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f000 f8de 	bl	8008f40 <USBD_Get_USB_Status>
 8008d84:	4603      	mov	r3, r0
 8008d86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d88:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b084      	sub	sp, #16
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008da2:	2300      	movs	r3, #0
 8008da4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008dac:	78fa      	ldrb	r2, [r7, #3]
 8008dae:	4611      	mov	r1, r2
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7fa fcc1 	bl	8003738 <HAL_PCD_EP_ClrStall>
 8008db6:	4603      	mov	r3, r0
 8008db8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dba:	7bfb      	ldrb	r3, [r7, #15]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f000 f8bf 	bl	8008f40 <USBD_Get_USB_Status>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	460b      	mov	r3, r1
 8008dda:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008de2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008de4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	da0b      	bge.n	8008e04 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008dec:	78fb      	ldrb	r3, [r7, #3]
 8008dee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008df2:	68f9      	ldr	r1, [r7, #12]
 8008df4:	4613      	mov	r3, r2
 8008df6:	00db      	lsls	r3, r3, #3
 8008df8:	4413      	add	r3, r2
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	440b      	add	r3, r1
 8008dfe:	333e      	adds	r3, #62	; 0x3e
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	e00b      	b.n	8008e1c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e04:	78fb      	ldrb	r3, [r7, #3]
 8008e06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e0a:	68f9      	ldr	r1, [r7, #12]
 8008e0c:	4613      	mov	r3, r2
 8008e0e:	00db      	lsls	r3, r3, #3
 8008e10:	4413      	add	r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	440b      	add	r3, r1
 8008e16:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008e1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3714      	adds	r7, #20
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	460b      	mov	r3, r1
 8008e32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e42:	78fa      	ldrb	r2, [r7, #3]
 8008e44:	4611      	mov	r1, r2
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7fa fa8e 	bl	8003368 <HAL_PCD_SetAddress>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e50:	7bfb      	ldrb	r3, [r7, #15]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f000 f874 	bl	8008f40 <USBD_Get_USB_Status>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b086      	sub	sp, #24
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	60f8      	str	r0, [r7, #12]
 8008e6e:	607a      	str	r2, [r7, #4]
 8008e70:	603b      	str	r3, [r7, #0]
 8008e72:	460b      	mov	r3, r1
 8008e74:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e76:	2300      	movs	r3, #0
 8008e78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e84:	7af9      	ldrb	r1, [r7, #11]
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	f7fa fba7 	bl	80035dc <HAL_PCD_EP_Transmit>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e92:	7dfb      	ldrb	r3, [r7, #23]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f000 f853 	bl	8008f40 <USBD_Get_USB_Status>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e9e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3718      	adds	r7, #24
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b086      	sub	sp, #24
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	607a      	str	r2, [r7, #4]
 8008eb2:	603b      	str	r3, [r7, #0]
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008ec6:	7af9      	ldrb	r1, [r7, #11]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	f7fa fb23 	bl	8003516 <HAL_PCD_EP_Receive>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ed4:	7dfb      	ldrb	r3, [r7, #23]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f000 f832 	bl	8008f40 <USBD_Get_USB_Status>
 8008edc:	4603      	mov	r3, r0
 8008ede:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ee0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3718      	adds	r7, #24
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b082      	sub	sp, #8
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008efc:	78fa      	ldrb	r2, [r7, #3]
 8008efe:	4611      	mov	r1, r2
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7fa fb53 	bl	80035ac <HAL_PCD_EP_GetRxCount>
 8008f06:	4603      	mov	r3, r0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008f18:	4b03      	ldr	r3, [pc, #12]	; (8008f28 <USBD_static_malloc+0x18>)
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	370c      	adds	r7, #12
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	20001d18 	.word	0x20001d18

08008f2c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]

}
 8008f34:	bf00      	nop
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b085      	sub	sp, #20
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	4603      	mov	r3, r0
 8008f48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008f4e:	79fb      	ldrb	r3, [r7, #7]
 8008f50:	2b03      	cmp	r3, #3
 8008f52:	d817      	bhi.n	8008f84 <USBD_Get_USB_Status+0x44>
 8008f54:	a201      	add	r2, pc, #4	; (adr r2, 8008f5c <USBD_Get_USB_Status+0x1c>)
 8008f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f5a:	bf00      	nop
 8008f5c:	08008f6d 	.word	0x08008f6d
 8008f60:	08008f73 	.word	0x08008f73
 8008f64:	08008f79 	.word	0x08008f79
 8008f68:	08008f7f 	.word	0x08008f7f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f70:	e00b      	b.n	8008f8a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f72:	2303      	movs	r3, #3
 8008f74:	73fb      	strb	r3, [r7, #15]
    break;
 8008f76:	e008      	b.n	8008f8a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f7c:	e005      	b.n	8008f8a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f7e:	2303      	movs	r3, #3
 8008f80:	73fb      	strb	r3, [r7, #15]
    break;
 8008f82:	e002      	b.n	8008f8a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008f84:	2303      	movs	r3, #3
 8008f86:	73fb      	strb	r3, [r7, #15]
    break;
 8008f88:	bf00      	nop
  }
  return usb_status;
 8008f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3714      	adds	r7, #20
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <memset>:
 8008f98:	4402      	add	r2, r0
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d100      	bne.n	8008fa2 <memset+0xa>
 8008fa0:	4770      	bx	lr
 8008fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8008fa6:	e7f9      	b.n	8008f9c <memset+0x4>

08008fa8 <__libc_init_array>:
 8008fa8:	b570      	push	{r4, r5, r6, lr}
 8008faa:	4d0d      	ldr	r5, [pc, #52]	; (8008fe0 <__libc_init_array+0x38>)
 8008fac:	4c0d      	ldr	r4, [pc, #52]	; (8008fe4 <__libc_init_array+0x3c>)
 8008fae:	1b64      	subs	r4, r4, r5
 8008fb0:	10a4      	asrs	r4, r4, #2
 8008fb2:	2600      	movs	r6, #0
 8008fb4:	42a6      	cmp	r6, r4
 8008fb6:	d109      	bne.n	8008fcc <__libc_init_array+0x24>
 8008fb8:	4d0b      	ldr	r5, [pc, #44]	; (8008fe8 <__libc_init_array+0x40>)
 8008fba:	4c0c      	ldr	r4, [pc, #48]	; (8008fec <__libc_init_array+0x44>)
 8008fbc:	f000 f826 	bl	800900c <_init>
 8008fc0:	1b64      	subs	r4, r4, r5
 8008fc2:	10a4      	asrs	r4, r4, #2
 8008fc4:	2600      	movs	r6, #0
 8008fc6:	42a6      	cmp	r6, r4
 8008fc8:	d105      	bne.n	8008fd6 <__libc_init_array+0x2e>
 8008fca:	bd70      	pop	{r4, r5, r6, pc}
 8008fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fd0:	4798      	blx	r3
 8008fd2:	3601      	adds	r6, #1
 8008fd4:	e7ee      	b.n	8008fb4 <__libc_init_array+0xc>
 8008fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fda:	4798      	blx	r3
 8008fdc:	3601      	adds	r6, #1
 8008fde:	e7f2      	b.n	8008fc6 <__libc_init_array+0x1e>
 8008fe0:	08009080 	.word	0x08009080
 8008fe4:	08009080 	.word	0x08009080
 8008fe8:	08009080 	.word	0x08009080
 8008fec:	08009084 	.word	0x08009084

08008ff0 <memcpy>:
 8008ff0:	440a      	add	r2, r1
 8008ff2:	4291      	cmp	r1, r2
 8008ff4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ff8:	d100      	bne.n	8008ffc <memcpy+0xc>
 8008ffa:	4770      	bx	lr
 8008ffc:	b510      	push	{r4, lr}
 8008ffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009002:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009006:	4291      	cmp	r1, r2
 8009008:	d1f9      	bne.n	8008ffe <memcpy+0xe>
 800900a:	bd10      	pop	{r4, pc}

0800900c <_init>:
 800900c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800900e:	bf00      	nop
 8009010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009012:	bc08      	pop	{r3}
 8009014:	469e      	mov	lr, r3
 8009016:	4770      	bx	lr

08009018 <_fini>:
 8009018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901a:	bf00      	nop
 800901c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800901e:	bc08      	pop	{r3}
 8009020:	469e      	mov	lr, r3
 8009022:	4770      	bx	lr
