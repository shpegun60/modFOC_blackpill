
blackpill_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e4c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08008fe4  08008fe4  00018fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009038  08009038  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08009038  08009038  00019038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009040  08009040  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009040  08009040  00019040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009044  08009044  00019044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08009048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010da8  20000100  08009148  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010ea8  08009148  00020ea8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013bff  00000000  00000000  00020173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c38  00000000  00000000  00033d72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b8  00000000  00000000  000379b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c52  00000000  00000000  00038a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b8e5  00000000  00000000  000396ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017201  00000000  00000000  00054f9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000934d6  00000000  00000000  0006c1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004334  00000000  00000000  000ff678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001039ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000100 	.word	0x20000100
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008fcc 	.word	0x08008fcc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000104 	.word	0x20000104
 80001d4:	08008fcc 	.word	0x08008fcc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295
 80009d8:	f000 b970 	b.w	8000cbc <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9e08      	ldr	r6, [sp, #32]
 80009fa:	460d      	mov	r5, r1
 80009fc:	4604      	mov	r4, r0
 80009fe:	460f      	mov	r7, r1
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d14a      	bne.n	8000a9a <__udivmoddi4+0xa6>
 8000a04:	428a      	cmp	r2, r1
 8000a06:	4694      	mov	ip, r2
 8000a08:	d965      	bls.n	8000ad6 <__udivmoddi4+0xe2>
 8000a0a:	fab2 f382 	clz	r3, r2
 8000a0e:	b143      	cbz	r3, 8000a22 <__udivmoddi4+0x2e>
 8000a10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a14:	f1c3 0220 	rsb	r2, r3, #32
 8000a18:	409f      	lsls	r7, r3
 8000a1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a1e:	4317      	orrs	r7, r2
 8000a20:	409c      	lsls	r4, r3
 8000a22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a26:	fa1f f58c 	uxth.w	r5, ip
 8000a2a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a2e:	0c22      	lsrs	r2, r4, #16
 8000a30:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a38:	fb01 f005 	mul.w	r0, r1, r5
 8000a3c:	4290      	cmp	r0, r2
 8000a3e:	d90a      	bls.n	8000a56 <__udivmoddi4+0x62>
 8000a40:	eb1c 0202 	adds.w	r2, ip, r2
 8000a44:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a48:	f080 811c 	bcs.w	8000c84 <__udivmoddi4+0x290>
 8000a4c:	4290      	cmp	r0, r2
 8000a4e:	f240 8119 	bls.w	8000c84 <__udivmoddi4+0x290>
 8000a52:	3902      	subs	r1, #2
 8000a54:	4462      	add	r2, ip
 8000a56:	1a12      	subs	r2, r2, r0
 8000a58:	b2a4      	uxth	r4, r4
 8000a5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a66:	fb00 f505 	mul.w	r5, r0, r5
 8000a6a:	42a5      	cmp	r5, r4
 8000a6c:	d90a      	bls.n	8000a84 <__udivmoddi4+0x90>
 8000a6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a72:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a76:	f080 8107 	bcs.w	8000c88 <__udivmoddi4+0x294>
 8000a7a:	42a5      	cmp	r5, r4
 8000a7c:	f240 8104 	bls.w	8000c88 <__udivmoddi4+0x294>
 8000a80:	4464      	add	r4, ip
 8000a82:	3802      	subs	r0, #2
 8000a84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a88:	1b64      	subs	r4, r4, r5
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	b11e      	cbz	r6, 8000a96 <__udivmoddi4+0xa2>
 8000a8e:	40dc      	lsrs	r4, r3
 8000a90:	2300      	movs	r3, #0
 8000a92:	e9c6 4300 	strd	r4, r3, [r6]
 8000a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d908      	bls.n	8000ab0 <__udivmoddi4+0xbc>
 8000a9e:	2e00      	cmp	r6, #0
 8000aa0:	f000 80ed 	beq.w	8000c7e <__udivmoddi4+0x28a>
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	e9c6 0500 	strd	r0, r5, [r6]
 8000aaa:	4608      	mov	r0, r1
 8000aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab0:	fab3 f183 	clz	r1, r3
 8000ab4:	2900      	cmp	r1, #0
 8000ab6:	d149      	bne.n	8000b4c <__udivmoddi4+0x158>
 8000ab8:	42ab      	cmp	r3, r5
 8000aba:	d302      	bcc.n	8000ac2 <__udivmoddi4+0xce>
 8000abc:	4282      	cmp	r2, r0
 8000abe:	f200 80f8 	bhi.w	8000cb2 <__udivmoddi4+0x2be>
 8000ac2:	1a84      	subs	r4, r0, r2
 8000ac4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ac8:	2001      	movs	r0, #1
 8000aca:	4617      	mov	r7, r2
 8000acc:	2e00      	cmp	r6, #0
 8000ace:	d0e2      	beq.n	8000a96 <__udivmoddi4+0xa2>
 8000ad0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ad4:	e7df      	b.n	8000a96 <__udivmoddi4+0xa2>
 8000ad6:	b902      	cbnz	r2, 8000ada <__udivmoddi4+0xe6>
 8000ad8:	deff      	udf	#255	; 0xff
 8000ada:	fab2 f382 	clz	r3, r2
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f040 8090 	bne.w	8000c04 <__udivmoddi4+0x210>
 8000ae4:	1a8a      	subs	r2, r1, r2
 8000ae6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aea:	fa1f fe8c 	uxth.w	lr, ip
 8000aee:	2101      	movs	r1, #1
 8000af0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000af4:	fb07 2015 	mls	r0, r7, r5, r2
 8000af8:	0c22      	lsrs	r2, r4, #16
 8000afa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000afe:	fb0e f005 	mul.w	r0, lr, r5
 8000b02:	4290      	cmp	r0, r2
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x124>
 8000b06:	eb1c 0202 	adds.w	r2, ip, r2
 8000b0a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x122>
 8000b10:	4290      	cmp	r0, r2
 8000b12:	f200 80cb 	bhi.w	8000cac <__udivmoddi4+0x2b8>
 8000b16:	4645      	mov	r5, r8
 8000b18:	1a12      	subs	r2, r2, r0
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b20:	fb07 2210 	mls	r2, r7, r0, r2
 8000b24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b28:	fb0e fe00 	mul.w	lr, lr, r0
 8000b2c:	45a6      	cmp	lr, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x14e>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b38:	d202      	bcs.n	8000b40 <__udivmoddi4+0x14c>
 8000b3a:	45a6      	cmp	lr, r4
 8000b3c:	f200 80bb 	bhi.w	8000cb6 <__udivmoddi4+0x2c2>
 8000b40:	4610      	mov	r0, r2
 8000b42:	eba4 040e 	sub.w	r4, r4, lr
 8000b46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b4a:	e79f      	b.n	8000a8c <__udivmoddi4+0x98>
 8000b4c:	f1c1 0720 	rsb	r7, r1, #32
 8000b50:	408b      	lsls	r3, r1
 8000b52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b5a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b62:	40fd      	lsrs	r5, r7
 8000b64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b68:	4323      	orrs	r3, r4
 8000b6a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b6e:	fa1f fe8c 	uxth.w	lr, ip
 8000b72:	fb09 5518 	mls	r5, r9, r8, r5
 8000b76:	0c1c      	lsrs	r4, r3, #16
 8000b78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b7c:	fb08 f50e 	mul.w	r5, r8, lr
 8000b80:	42a5      	cmp	r5, r4
 8000b82:	fa02 f201 	lsl.w	r2, r2, r1
 8000b86:	fa00 f001 	lsl.w	r0, r0, r1
 8000b8a:	d90b      	bls.n	8000ba4 <__udivmoddi4+0x1b0>
 8000b8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b94:	f080 8088 	bcs.w	8000ca8 <__udivmoddi4+0x2b4>
 8000b98:	42a5      	cmp	r5, r4
 8000b9a:	f240 8085 	bls.w	8000ca8 <__udivmoddi4+0x2b4>
 8000b9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ba2:	4464      	add	r4, ip
 8000ba4:	1b64      	subs	r4, r4, r5
 8000ba6:	b29d      	uxth	r5, r3
 8000ba8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bac:	fb09 4413 	mls	r4, r9, r3, r4
 8000bb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bb4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bb8:	45a6      	cmp	lr, r4
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x1da>
 8000bbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bc4:	d26c      	bcs.n	8000ca0 <__udivmoddi4+0x2ac>
 8000bc6:	45a6      	cmp	lr, r4
 8000bc8:	d96a      	bls.n	8000ca0 <__udivmoddi4+0x2ac>
 8000bca:	3b02      	subs	r3, #2
 8000bcc:	4464      	add	r4, ip
 8000bce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bd2:	fba3 9502 	umull	r9, r5, r3, r2
 8000bd6:	eba4 040e 	sub.w	r4, r4, lr
 8000bda:	42ac      	cmp	r4, r5
 8000bdc:	46c8      	mov	r8, r9
 8000bde:	46ae      	mov	lr, r5
 8000be0:	d356      	bcc.n	8000c90 <__udivmoddi4+0x29c>
 8000be2:	d053      	beq.n	8000c8c <__udivmoddi4+0x298>
 8000be4:	b156      	cbz	r6, 8000bfc <__udivmoddi4+0x208>
 8000be6:	ebb0 0208 	subs.w	r2, r0, r8
 8000bea:	eb64 040e 	sbc.w	r4, r4, lr
 8000bee:	fa04 f707 	lsl.w	r7, r4, r7
 8000bf2:	40ca      	lsrs	r2, r1
 8000bf4:	40cc      	lsrs	r4, r1
 8000bf6:	4317      	orrs	r7, r2
 8000bf8:	e9c6 7400 	strd	r7, r4, [r6]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	2100      	movs	r1, #0
 8000c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c04:	f1c3 0120 	rsb	r1, r3, #32
 8000c08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c0c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c10:	fa25 f101 	lsr.w	r1, r5, r1
 8000c14:	409d      	lsls	r5, r3
 8000c16:	432a      	orrs	r2, r5
 8000c18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1c:	fa1f fe8c 	uxth.w	lr, ip
 8000c20:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c24:	fb07 1510 	mls	r5, r7, r0, r1
 8000c28:	0c11      	lsrs	r1, r2, #16
 8000c2a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c2e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c32:	428d      	cmp	r5, r1
 8000c34:	fa04 f403 	lsl.w	r4, r4, r3
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x258>
 8000c3a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c42:	d22f      	bcs.n	8000ca4 <__udivmoddi4+0x2b0>
 8000c44:	428d      	cmp	r5, r1
 8000c46:	d92d      	bls.n	8000ca4 <__udivmoddi4+0x2b0>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	4461      	add	r1, ip
 8000c4c:	1b49      	subs	r1, r1, r5
 8000c4e:	b292      	uxth	r2, r2
 8000c50:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c54:	fb07 1115 	mls	r1, r7, r5, r1
 8000c58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c5c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c60:	4291      	cmp	r1, r2
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x282>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c6c:	d216      	bcs.n	8000c9c <__udivmoddi4+0x2a8>
 8000c6e:	4291      	cmp	r1, r2
 8000c70:	d914      	bls.n	8000c9c <__udivmoddi4+0x2a8>
 8000c72:	3d02      	subs	r5, #2
 8000c74:	4462      	add	r2, ip
 8000c76:	1a52      	subs	r2, r2, r1
 8000c78:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c7c:	e738      	b.n	8000af0 <__udivmoddi4+0xfc>
 8000c7e:	4631      	mov	r1, r6
 8000c80:	4630      	mov	r0, r6
 8000c82:	e708      	b.n	8000a96 <__udivmoddi4+0xa2>
 8000c84:	4639      	mov	r1, r7
 8000c86:	e6e6      	b.n	8000a56 <__udivmoddi4+0x62>
 8000c88:	4610      	mov	r0, r2
 8000c8a:	e6fb      	b.n	8000a84 <__udivmoddi4+0x90>
 8000c8c:	4548      	cmp	r0, r9
 8000c8e:	d2a9      	bcs.n	8000be4 <__udivmoddi4+0x1f0>
 8000c90:	ebb9 0802 	subs.w	r8, r9, r2
 8000c94:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	e7a3      	b.n	8000be4 <__udivmoddi4+0x1f0>
 8000c9c:	4645      	mov	r5, r8
 8000c9e:	e7ea      	b.n	8000c76 <__udivmoddi4+0x282>
 8000ca0:	462b      	mov	r3, r5
 8000ca2:	e794      	b.n	8000bce <__udivmoddi4+0x1da>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	e7d1      	b.n	8000c4c <__udivmoddi4+0x258>
 8000ca8:	46d0      	mov	r8, sl
 8000caa:	e77b      	b.n	8000ba4 <__udivmoddi4+0x1b0>
 8000cac:	3d02      	subs	r5, #2
 8000cae:	4462      	add	r2, ip
 8000cb0:	e732      	b.n	8000b18 <__udivmoddi4+0x124>
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e70a      	b.n	8000acc <__udivmoddi4+0xd8>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	e742      	b.n	8000b42 <__udivmoddi4+0x14e>

08000cbc <__aeabi_idiv0>:
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <MX_DMA_Init+0x4c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a0f      	ldr	r2, [pc, #60]	; (8000d0c <MX_DMA_Init+0x4c>)
 8000cd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <MX_DMA_Init+0x4c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2038      	movs	r0, #56	; 0x38
 8000ce8:	f000 ffeb 	bl	8001cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000cec:	2038      	movs	r0, #56	; 0x38
 8000cee:	f001 f804 	bl	8001cfa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	203a      	movs	r0, #58	; 0x3a
 8000cf8:	f000 ffe3 	bl	8001cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000cfc:	203a      	movs	r0, #58	; 0x3a
 8000cfe:	f000 fffc 	bl	8001cfa <HAL_NVIC_EnableIRQ>

}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800

08000d10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d16:	f107 030c 	add.w	r3, r7, #12
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <MX_GPIO_Init+0x7c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <MX_GPIO_Init+0x7c>)
 8000d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <MX_GPIO_Init+0x7c>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_GPIO_Init+0x7c>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a10      	ldr	r2, [pc, #64]	; (8000d8c <MX_GPIO_Init+0x7c>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <MX_GPIO_Init+0x7c>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CTRL_EN_Pin|CS_CTRL_Pin|CS_DRV_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	211c      	movs	r1, #28
 8000d62:	480b      	ldr	r0, [pc, #44]	; (8000d90 <MX_GPIO_Init+0x80>)
 8000d64:	f001 fc74 	bl	8002650 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CTRL_EN_Pin|CS_CTRL_Pin|CS_DRV_Pin;
 8000d68:	231c      	movs	r3, #28
 8000d6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4804      	ldr	r0, [pc, #16]	; (8000d90 <MX_GPIO_Init+0x80>)
 8000d80:	f001 fae2 	bl	8002348 <HAL_GPIO_Init>

}
 8000d84:	bf00      	nop
 8000d86:	3720      	adds	r7, #32
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020000 	.word	0x40020000

08000d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d9a:	f000 fe21 	bl	80019e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d9e:	f000 f859 	bl	8000e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da2:	f7ff ffb5 	bl	8000d10 <MX_GPIO_Init>
  MX_DMA_Init();
 8000da6:	f7ff ff8b 	bl	8000cc0 <MX_DMA_Init>
  MX_SPI1_Init();
 8000daa:	f000 f8c3 	bl	8000f34 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000dae:	f007 fb59 	bl	8008464 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint64_t value = 0x8100000000;
 8000db2:	f04f 0200 	mov.w	r2, #0
 8000db6:	f04f 0381 	mov.w	r3, #129	; 0x81
 8000dba:	e9c7 2300 	strd	r2, r3, [r7]

  tx_data[0] = (value >> 32) & 0xFF;
 8000dbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000dc2:	f04f 0200 	mov.w	r2, #0
 8000dc6:	f04f 0300 	mov.w	r3, #0
 8000dca:	000a      	movs	r2, r1
 8000dcc:	2300      	movs	r3, #0
 8000dce:	b2d2      	uxtb	r2, r2
 8000dd0:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <main+0xb8>)
 8000dd2:	701a      	strb	r2, [r3, #0]
  tx_data[1] = (value >> 24) & 0xFF;
 8000dd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000dd8:	f04f 0200 	mov.w	r2, #0
 8000ddc:	f04f 0300 	mov.w	r3, #0
 8000de0:	0e02      	lsrs	r2, r0, #24
 8000de2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000de6:	0e0b      	lsrs	r3, r1, #24
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <main+0xb8>)
 8000dec:	705a      	strb	r2, [r3, #1]
  tx_data[2] = (value >> 16) & 0xFF;
 8000dee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	f04f 0300 	mov.w	r3, #0
 8000dfa:	0c02      	lsrs	r2, r0, #16
 8000dfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e00:	0c0b      	lsrs	r3, r1, #16
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <main+0xb8>)
 8000e06:	709a      	strb	r2, [r3, #2]
  tx_data[3] = (value >>  8) & 0xFF;
 8000e08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e0c:	f04f 0200 	mov.w	r2, #0
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	0a02      	lsrs	r2, r0, #8
 8000e16:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000e1a:	0a0b      	lsrs	r3, r1, #8
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <main+0xb8>)
 8000e20:	70da      	strb	r2, [r3, #3]
  tx_data[4] = (value >>  0) & 0xFF;
 8000e22:	783a      	ldrb	r2, [r7, #0]
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <main+0xb8>)
 8000e26:	711a      	strb	r2, [r3, #4]
  HAL_GPIO_WritePin(CTRL_EN_GPIO_Port, CS_CTRL_Pin, GPIO_PIN_SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2108      	movs	r1, #8
 8000e2c:	4808      	ldr	r0, [pc, #32]	; (8000e50 <main+0xbc>)
 8000e2e:	f001 fc0f 	bl	8002650 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS_DRV_GPIO_Port, CS_DRV_Pin, GPIO_PIN_SET);
 8000e32:	2201      	movs	r2, #1
 8000e34:	2110      	movs	r1, #16
 8000e36:	4806      	ldr	r0, [pc, #24]	; (8000e50 <main+0xbc>)
 8000e38:	f001 fc0a 	bl	8002650 <HAL_GPIO_WritePin>
  StartupConfig();
 8000e3c:	f000 fd66 	bl	800190c <StartupConfig>
  openloop_test_drive(0x00);
 8000e40:	2000      	movs	r0, #0
 8000e42:	f000 fda3 	bl	800198c <openloop_test_drive>

  while (1)
  {
//	  tmc4671_writeInt(0, TMC4671_CHIPINFO_ADDR, 0x00000000);
//	  val = tmc4671_readInt(0, TMC4671_CHIPINFO_DATA);
	  tmcl_processCommand();
 8000e46:	f000 fb45 	bl	80014d4 <tmcl_processCommand>
 8000e4a:	e7fc      	b.n	8000e46 <main+0xb2>
 8000e4c:	2000011c 	.word	0x2000011c
 8000e50:	40020000 	.word	0x40020000

08000e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b094      	sub	sp, #80	; 0x50
 8000e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5a:	f107 0320 	add.w	r3, r7, #32
 8000e5e:	2230      	movs	r2, #48	; 0x30
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f008 f878 	bl	8008f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	4b28      	ldr	r3, [pc, #160]	; (8000f20 <SystemClock_Config+0xcc>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	4a27      	ldr	r2, [pc, #156]	; (8000f20 <SystemClock_Config+0xcc>)
 8000e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e86:	6413      	str	r3, [r2, #64]	; 0x40
 8000e88:	4b25      	ldr	r3, [pc, #148]	; (8000f20 <SystemClock_Config+0xcc>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e94:	2300      	movs	r3, #0
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <SystemClock_Config+0xd0>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a21      	ldr	r2, [pc, #132]	; (8000f24 <SystemClock_Config+0xd0>)
 8000e9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <SystemClock_Config+0xd0>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ebe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000ec4:	230f      	movs	r3, #15
 8000ec6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000ec8:	2390      	movs	r3, #144	; 0x90
 8000eca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ecc:	2304      	movs	r3, #4
 8000ece:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000ed0:	2305      	movs	r3, #5
 8000ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed4:	f107 0320 	add.w	r3, r7, #32
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f002 fe4f 	bl	8003b7c <HAL_RCC_OscConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ee4:	f000 f820 	bl	8000f28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee8:	230f      	movs	r3, #15
 8000eea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eec:	2302      	movs	r3, #2
 8000eee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000efe:	f107 030c 	add.w	r3, r7, #12
 8000f02:	2101      	movs	r1, #1
 8000f04:	4618      	mov	r0, r3
 8000f06:	f003 f8b1 	bl	800406c <HAL_RCC_ClockConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f10:	f000 f80a 	bl	8000f28 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000f14:	f003 f990 	bl	8004238 <HAL_RCC_EnableCSS>
}
 8000f18:	bf00      	nop
 8000f1a:	3750      	adds	r7, #80	; 0x50
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40007000 	.word	0x40007000

08000f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f2c:	b672      	cpsid	i
}
 8000f2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <Error_Handler+0x8>
	...

08000f34 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f38:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f3a:	4a18      	ldr	r2, [pc, #96]	; (8000f9c <MX_SPI1_Init+0x68>)
 8000f3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f3e:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f54:	2202      	movs	r2, #2
 8000f56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f68:	2220      	movs	r2, #32
 8000f6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f78:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f80:	220a      	movs	r2, #10
 8000f82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f84:	4804      	ldr	r0, [pc, #16]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f86:	f003 fa50 	bl	800442a <HAL_SPI_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f90:	f7ff ffca 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000124 	.word	0x20000124
 8000f9c:	40013000 	.word	0x40013000

08000fa0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a4b      	ldr	r2, [pc, #300]	; (80010ec <HAL_SPI_MspInit+0x14c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	f040 8090 	bne.w	80010e4 <HAL_SPI_MspInit+0x144>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	4b49      	ldr	r3, [pc, #292]	; (80010f0 <HAL_SPI_MspInit+0x150>)
 8000fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fcc:	4a48      	ldr	r2, [pc, #288]	; (80010f0 <HAL_SPI_MspInit+0x150>)
 8000fce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fd2:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd4:	4b46      	ldr	r3, [pc, #280]	; (80010f0 <HAL_SPI_MspInit+0x150>)
 8000fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	4b42      	ldr	r3, [pc, #264]	; (80010f0 <HAL_SPI_MspInit+0x150>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	4a41      	ldr	r2, [pc, #260]	; (80010f0 <HAL_SPI_MspInit+0x150>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff0:	4b3f      	ldr	r3, [pc, #252]	; (80010f0 <HAL_SPI_MspInit+0x150>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ffc:	23e0      	movs	r3, #224	; 0xe0
 8000ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800100c:	2305      	movs	r3, #5
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	4837      	ldr	r0, [pc, #220]	; (80010f4 <HAL_SPI_MspInit+0x154>)
 8001018:	f001 f996 	bl	8002348 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800101c:	4b36      	ldr	r3, [pc, #216]	; (80010f8 <HAL_SPI_MspInit+0x158>)
 800101e:	4a37      	ldr	r2, [pc, #220]	; (80010fc <HAL_SPI_MspInit+0x15c>)
 8001020:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001022:	4b35      	ldr	r3, [pc, #212]	; (80010f8 <HAL_SPI_MspInit+0x158>)
 8001024:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001028:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800102a:	4b33      	ldr	r3, [pc, #204]	; (80010f8 <HAL_SPI_MspInit+0x158>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001030:	4b31      	ldr	r3, [pc, #196]	; (80010f8 <HAL_SPI_MspInit+0x158>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001036:	4b30      	ldr	r3, [pc, #192]	; (80010f8 <HAL_SPI_MspInit+0x158>)
 8001038:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800103c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800103e:	4b2e      	ldr	r3, [pc, #184]	; (80010f8 <HAL_SPI_MspInit+0x158>)
 8001040:	2200      	movs	r2, #0
 8001042:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001044:	4b2c      	ldr	r3, [pc, #176]	; (80010f8 <HAL_SPI_MspInit+0x158>)
 8001046:	2200      	movs	r2, #0
 8001048:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800104a:	4b2b      	ldr	r3, [pc, #172]	; (80010f8 <HAL_SPI_MspInit+0x158>)
 800104c:	2200      	movs	r2, #0
 800104e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001050:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <HAL_SPI_MspInit+0x158>)
 8001052:	2200      	movs	r2, #0
 8001054:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001056:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <HAL_SPI_MspInit+0x158>)
 8001058:	2200      	movs	r2, #0
 800105a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800105c:	4826      	ldr	r0, [pc, #152]	; (80010f8 <HAL_SPI_MspInit+0x158>)
 800105e:	f000 fe67 	bl	8001d30 <HAL_DMA_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001068:	f7ff ff5e 	bl	8000f28 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a22      	ldr	r2, [pc, #136]	; (80010f8 <HAL_SPI_MspInit+0x158>)
 8001070:	64da      	str	r2, [r3, #76]	; 0x4c
 8001072:	4a21      	ldr	r2, [pc, #132]	; (80010f8 <HAL_SPI_MspInit+0x158>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8001078:	4b21      	ldr	r3, [pc, #132]	; (8001100 <HAL_SPI_MspInit+0x160>)
 800107a:	4a22      	ldr	r2, [pc, #136]	; (8001104 <HAL_SPI_MspInit+0x164>)
 800107c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 800107e:	4b20      	ldr	r3, [pc, #128]	; (8001100 <HAL_SPI_MspInit+0x160>)
 8001080:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001084:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001086:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <HAL_SPI_MspInit+0x160>)
 8001088:	2240      	movs	r2, #64	; 0x40
 800108a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800108c:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <HAL_SPI_MspInit+0x160>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001092:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <HAL_SPI_MspInit+0x160>)
 8001094:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001098:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800109a:	4b19      	ldr	r3, [pc, #100]	; (8001100 <HAL_SPI_MspInit+0x160>)
 800109c:	2200      	movs	r2, #0
 800109e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010a0:	4b17      	ldr	r3, [pc, #92]	; (8001100 <HAL_SPI_MspInit+0x160>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <HAL_SPI_MspInit+0x160>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <HAL_SPI_MspInit+0x160>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010b2:	4b13      	ldr	r3, [pc, #76]	; (8001100 <HAL_SPI_MspInit+0x160>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80010b8:	4811      	ldr	r0, [pc, #68]	; (8001100 <HAL_SPI_MspInit+0x160>)
 80010ba:	f000 fe39 	bl	8001d30 <HAL_DMA_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 80010c4:	f7ff ff30 	bl	8000f28 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <HAL_SPI_MspInit+0x160>)
 80010cc:	649a      	str	r2, [r3, #72]	; 0x48
 80010ce:	4a0c      	ldr	r2, [pc, #48]	; (8001100 <HAL_SPI_MspInit+0x160>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2100      	movs	r1, #0
 80010d8:	2023      	movs	r0, #35	; 0x23
 80010da:	f000 fdf2 	bl	8001cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80010de:	2023      	movs	r0, #35	; 0x23
 80010e0:	f000 fe0b 	bl	8001cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	; 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40013000 	.word	0x40013000
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020000 	.word	0x40020000
 80010f8:	2000017c 	.word	0x2000017c
 80010fc:	40026410 	.word	0x40026410
 8001100:	200001dc 	.word	0x200001dc
 8001104:	40026440 	.word	0x40026440

08001108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <HAL_MspInit+0x4c>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	4a0f      	ldr	r2, [pc, #60]	; (8001154 <HAL_MspInit+0x4c>)
 8001118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800111c:	6453      	str	r3, [r2, #68]	; 0x44
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <HAL_MspInit+0x4c>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <HAL_MspInit+0x4c>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a08      	ldr	r2, [pc, #32]	; (8001154 <HAL_MspInit+0x4c>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_MspInit+0x4c>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40023800 	.word	0x40023800

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800115c:	f003 f94a 	bl	80043f4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <NMI_Handler+0x8>

08001162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001166:	e7fe      	b.n	8001166 <HardFault_Handler+0x4>

08001168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800116c:	e7fe      	b.n	800116c <MemManage_Handler+0x4>

0800116e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001172:	e7fe      	b.n	8001172 <BusFault_Handler+0x4>

08001174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <UsageFault_Handler+0x4>

0800117a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a8:	f000 fc6c 	bl	8001a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <SPI1_IRQHandler+0x10>)
 80011b6:	f003 fb63 	bl	8004880 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000124 	.word	0x20000124

080011c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <DMA2_Stream0_IRQHandler+0x10>)
 80011ca:	f000 fe81 	bl	8001ed0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	2000017c 	.word	0x2000017c

080011d8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <DMA2_Stream2_IRQHandler+0x10>)
 80011de:	f000 fe77 	bl	8001ed0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200001dc 	.word	0x200001dc

080011ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <OTG_FS_IRQHandler+0x10>)
 80011f2:	f001 fb96 	bl	8002922 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	2001077c 	.word	0x2001077c

08001200 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <SystemInit+0x20>)
 8001206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800120a:	4a05      	ldr	r2, [pc, #20]	; (8001220 <SystemInit+0x20>)
 800120c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001224:	f8df d034 	ldr.w	sp, [pc, #52]	; 800125c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001228:	480d      	ldr	r0, [pc, #52]	; (8001260 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800122a:	490e      	ldr	r1, [pc, #56]	; (8001264 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800122c:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001230:	e002      	b.n	8001238 <LoopCopyDataInit>

08001232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001236:	3304      	adds	r3, #4

08001238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800123c:	d3f9      	bcc.n	8001232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123e:	4a0b      	ldr	r2, [pc, #44]	; (800126c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001240:	4c0b      	ldr	r4, [pc, #44]	; (8001270 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001244:	e001      	b.n	800124a <LoopFillZerobss>

08001246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001248:	3204      	adds	r2, #4

0800124a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800124c:	d3fb      	bcc.n	8001246 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800124e:	f7ff ffd7 	bl	8001200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001252:	f007 fe89 	bl	8008f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001256:	f7ff fd9d 	bl	8000d94 <main>
  bx  lr    
 800125a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800125c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001264:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001268:	08009048 	.word	0x08009048
  ldr r2, =_sbss
 800126c:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001270:	20010ea8 	.word	0x20010ea8

08001274 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001274:	e7fe      	b.n	8001274 <ADC_IRQHandler>
	...

08001278 <getVM>:
uint32_t commLoopCounter = 0;

extern uint8_t USB_retrieveCMD(uint8_t *Buf, uint32_t *Len);

int32_t getVM(uint8_t motor)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af02      	add	r7, sp, #8
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
	int32_t rawVMADC = tmc4671_readFieldWithDependency(motor, TMC4671_ADC_RAW_DATA, TMC4671_ADC_RAW_ADDR, 1, TMC4671_ADC_VM_RAW_MASK, TMC4671_ADC_VM_RAW_SHIFT) - VM_ADC_OFFSET;
 8001282:	79f8      	ldrb	r0, [r7, #7]
 8001284:	2300      	movs	r3, #0
 8001286:	9301      	str	r3, [sp, #4]
 8001288:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2301      	movs	r3, #1
 8001290:	2203      	movs	r2, #3
 8001292:	2102      	movs	r1, #2
 8001294:	f000 faa6 	bl	80017e4 <tmc4671_readFieldWithDependency>
 8001298:	4603      	mov	r3, r0
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f8ee 	bl	800047c <__aeabi_i2d>
 80012a0:	a31a      	add	r3, pc, #104	; (adr r3, 800130c <getVM+0x94>)
 80012a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a6:	f7fe ff9b 	bl	80001e0 <__aeabi_dsub>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4610      	mov	r0, r2
 80012b0:	4619      	mov	r1, r3
 80012b2:	f7ff fb5f 	bl	8000974 <__aeabi_d2iz>
 80012b6:	4603      	mov	r3, r0
 80012b8:	60fb      	str	r3, [r7, #12]
	return ((rawVMADC * (VM_ADC_REF / VM_ADC_RES)) / (VM_DIV_FACTOR)) * 10;
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f7ff f8de 	bl	800047c <__aeabi_i2d>
 80012c0:	a314      	add	r3, pc, #80	; (adr r3, 8001314 <getVM+0x9c>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	f7ff f943 	bl	8000550 <__aeabi_dmul>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4610      	mov	r0, r2
 80012d0:	4619      	mov	r1, r3
 80012d2:	a312      	add	r3, pc, #72	; (adr r3, 800131c <getVM+0xa4>)
 80012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d8:	f7ff fa64 	bl	80007a4 <__aeabi_ddiv>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4610      	mov	r0, r2
 80012e2:	4619      	mov	r1, r3
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	4b07      	ldr	r3, [pc, #28]	; (8001308 <getVM+0x90>)
 80012ea:	f7ff f931 	bl	8000550 <__aeabi_dmul>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4610      	mov	r0, r2
 80012f4:	4619      	mov	r1, r3
 80012f6:	f7ff fb3d 	bl	8000974 <__aeabi_d2iz>
 80012fa:	4603      	mov	r3, r0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	f3af 8000 	nop.w
 8001308:	40240000 	.word	0x40240000
 800130c:	00000000 	.word	0x00000000
 8001310:	40e0c700 	.word	0x40e0c700
 8001314:	66666666 	.word	0x66666666
 8001318:	3f126666 	.word	0x3f126666
 800131c:	96680c5d 	.word	0x96680c5d
 8001320:	3fabd09c 	.word	0x3fabd09c

08001324 <tmcl_getVersion>:


void tmcl_getVersion()
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
	uint32_t i;

	if (ActualCommand.Type == 0)
 800132a:	4b36      	ldr	r3, [pc, #216]	; (8001404 <tmcl_getVersion+0xe0>)
 800132c:	785b      	ldrb	r3, [r3, #1]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d118      	bne.n	8001364 <tmcl_getVersion+0x40>
	{
		TMCLReplyFormat = RF_SPECIAL;
 8001332:	4b35      	ldr	r3, [pc, #212]	; (8001408 <tmcl_getVersion+0xe4>)
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
		SpecialReply[0] = HOST_ADDRESS;
 8001338:	4b34      	ldr	r3, [pc, #208]	; (800140c <tmcl_getVersion+0xe8>)
 800133a:	2202      	movs	r2, #2
 800133c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 8; i++)
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	e00b      	b.n	800135c <tmcl_getVersion+0x38>
			SpecialReply[i + 1] = VersionString[i];
 8001344:	4b32      	ldr	r3, [pc, #200]	; (8001410 <tmcl_getVersion+0xec>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	441a      	add	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3301      	adds	r3, #1
 8001350:	7811      	ldrb	r1, [r2, #0]
 8001352:	4a2e      	ldr	r2, [pc, #184]	; (800140c <tmcl_getVersion+0xe8>)
 8001354:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < 8; i++)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3301      	adds	r3, #1
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b07      	cmp	r3, #7
 8001360:	d9f0      	bls.n	8001344 <tmcl_getVersion+0x20>
		ActualReply.Value.Byte[3] = ((VersionString[0] - '0') * 10) + (VersionString[1] - '0');
		ActualReply.Value.Byte[2] = ((VersionString[2] - '0') * 10) + (VersionString[3] - '0');
		ActualReply.Value.Byte[1] = (VersionString[5] - '0');
		ActualReply.Value.Byte[0] = ((VersionString[6] - '0') * 10) + (VersionString[7] - '0');
	}
}
 8001362:	e049      	b.n	80013f8 <tmcl_getVersion+0xd4>
	else if (ActualCommand.Type == 1)
 8001364:	4b27      	ldr	r3, [pc, #156]	; (8001404 <tmcl_getVersion+0xe0>)
 8001366:	785b      	ldrb	r3, [r3, #1]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d145      	bne.n	80013f8 <tmcl_getVersion+0xd4>
		ActualReply.Value.Byte[3] = ((VersionString[0] - '0') * 10) + (VersionString[1] - '0');
 800136c:	4b28      	ldr	r3, [pc, #160]	; (8001410 <tmcl_getVersion+0xec>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	3b30      	subs	r3, #48	; 0x30
 8001374:	b2db      	uxtb	r3, r3
 8001376:	461a      	mov	r2, r3
 8001378:	0092      	lsls	r2, r2, #2
 800137a:	4413      	add	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	b2da      	uxtb	r2, r3
 8001380:	4b23      	ldr	r3, [pc, #140]	; (8001410 <tmcl_getVersion+0xec>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	3301      	adds	r3, #1
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4413      	add	r3, r2
 800138a:	b2db      	uxtb	r3, r3
 800138c:	3b30      	subs	r3, #48	; 0x30
 800138e:	b2da      	uxtb	r2, r3
 8001390:	4b20      	ldr	r3, [pc, #128]	; (8001414 <tmcl_getVersion+0xf0>)
 8001392:	71da      	strb	r2, [r3, #7]
		ActualReply.Value.Byte[2] = ((VersionString[2] - '0') * 10) + (VersionString[3] - '0');
 8001394:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <tmcl_getVersion+0xec>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	3302      	adds	r3, #2
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	3b30      	subs	r3, #48	; 0x30
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	461a      	mov	r2, r3
 80013a2:	0092      	lsls	r2, r2, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4b19      	ldr	r3, [pc, #100]	; (8001410 <tmcl_getVersion+0xec>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	3303      	adds	r3, #3
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	3b30      	subs	r3, #48	; 0x30
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4b16      	ldr	r3, [pc, #88]	; (8001414 <tmcl_getVersion+0xf0>)
 80013bc:	719a      	strb	r2, [r3, #6]
		ActualReply.Value.Byte[1] = (VersionString[5] - '0');
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <tmcl_getVersion+0xec>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	3305      	adds	r3, #5
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	3b30      	subs	r3, #48	; 0x30
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <tmcl_getVersion+0xf0>)
 80013cc:	715a      	strb	r2, [r3, #5]
		ActualReply.Value.Byte[0] = ((VersionString[6] - '0') * 10) + (VersionString[7] - '0');
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <tmcl_getVersion+0xec>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	3306      	adds	r3, #6
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	3b30      	subs	r3, #48	; 0x30
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	461a      	mov	r2, r3
 80013dc:	0092      	lsls	r2, r2, #2
 80013de:	4413      	add	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <tmcl_getVersion+0xec>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3307      	adds	r3, #7
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	4413      	add	r3, r2
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	3b30      	subs	r3, #48	; 0x30
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <tmcl_getVersion+0xf0>)
 80013f6:	711a      	strb	r2, [r3, #4]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	2000024c 	.word	0x2000024c
 8001408:	2000023c 	.word	0x2000023c
 800140c:	20000240 	.word	0x20000240
 8001410:	20000004 	.word	0x20000004
 8001414:	20000254 	.word	0x20000254

08001418 <tmcl_getInput>:

void tmcl_getInput()
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	switch (ActualCommand.Type)
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <tmcl_getInput+0x28>)
 800141e:	785b      	ldrb	r3, [r3, #1]
 8001420:	2b05      	cmp	r3, #5
 8001422:	d106      	bne.n	8001432 <tmcl_getInput+0x1a>
	{
	case 5: // analog_inputs
		ActualReply.Value.Int32 = getVM(DEFAULT_MC);
 8001424:	2005      	movs	r0, #5
 8001426:	f7ff ff27 	bl	8001278 <getVM>
 800142a:	4603      	mov	r3, r0
 800142c:	4a05      	ldr	r2, [pc, #20]	; (8001444 <tmcl_getInput+0x2c>)
 800142e:	6053      	str	r3, [r2, #4]
		break;
 8001430:	e003      	b.n	800143a <tmcl_getInput+0x22>
	default:
		ActualReply.Status = REPLY_INVALID_VALUE;
 8001432:	4b04      	ldr	r3, [pc, #16]	; (8001444 <tmcl_getInput+0x2c>)
 8001434:	2204      	movs	r2, #4
 8001436:	701a      	strb	r2, [r3, #0]
		break;
 8001438:	bf00      	nop
	}
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	2000024c 	.word	0x2000024c
 8001444:	20000254 	.word	0x20000254

08001448 <tmcl_executeActualCommand>:

void tmcl_executeActualCommand()
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	// prepare reply command
	ActualReply.Opcode = ActualCommand.Opcode;
 800144c:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <tmcl_executeActualCommand+0x84>)
 800144e:	781a      	ldrb	r2, [r3, #0]
 8001450:	4b1f      	ldr	r3, [pc, #124]	; (80014d0 <tmcl_executeActualCommand+0x88>)
 8001452:	705a      	strb	r2, [r3, #1]
	ActualReply.Status = REPLY_OK;
 8001454:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <tmcl_executeActualCommand+0x88>)
 8001456:	2264      	movs	r2, #100	; 0x64
 8001458:	701a      	strb	r2, [r3, #0]
	ActualReply.Value.Int32 = ActualCommand.Value.Int32;
 800145a:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <tmcl_executeActualCommand+0x84>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	4a1c      	ldr	r2, [pc, #112]	; (80014d0 <tmcl_executeActualCommand+0x88>)
 8001460:	6053      	str	r3, [r2, #4]

	//printf("Opcode: %d\n", ActualCommand.Opcode);

	switch (ActualCommand.Opcode)
 8001462:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <tmcl_executeActualCommand+0x84>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b94      	cmp	r3, #148	; 0x94
 8001468:	d00f      	beq.n	800148a <tmcl_executeActualCommand+0x42>
 800146a:	2b94      	cmp	r3, #148	; 0x94
 800146c:	dc2b      	bgt.n	80014c6 <tmcl_executeActualCommand+0x7e>
 800146e:	2b92      	cmp	r3, #146	; 0x92
 8001470:	d019      	beq.n	80014a6 <tmcl_executeActualCommand+0x5e>
 8001472:	2b92      	cmp	r3, #146	; 0x92
 8001474:	dc27      	bgt.n	80014c6 <tmcl_executeActualCommand+0x7e>
 8001476:	2b0f      	cmp	r3, #15
 8001478:	d004      	beq.n	8001484 <tmcl_executeActualCommand+0x3c>
 800147a:	2b88      	cmp	r3, #136	; 0x88
 800147c:	d123      	bne.n	80014c6 <tmcl_executeActualCommand+0x7e>
	{
	case TMCL_GetVersion:
		tmcl_getVersion();
 800147e:	f7ff ff51 	bl	8001324 <tmcl_getVersion>
		break;
 8001482:	e020      	b.n	80014c6 <tmcl_executeActualCommand+0x7e>
	case TMCL_GIO:
		tmcl_getInput();
 8001484:	f7ff ffc8 	bl	8001418 <tmcl_getInput>
		break;
 8001488:	e01d      	b.n	80014c6 <tmcl_executeActualCommand+0x7e>
	case TMCL_readRegisterChannel_1:
		if (ActualCommand.Motor == 0)
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <tmcl_executeActualCommand+0x84>)
 800148c:	789b      	ldrb	r3, [r3, #2]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d116      	bne.n	80014c0 <tmcl_executeActualCommand+0x78>
			ActualReply.Value.Int32 = tmc4671_readInt(DEFAULT_MC, ActualCommand.Type);
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <tmcl_executeActualCommand+0x84>)
 8001494:	785b      	ldrb	r3, [r3, #1]
 8001496:	4619      	mov	r1, r3
 8001498:	2005      	movs	r0, #5
 800149a:	f000 f92f 	bl	80016fc <tmc4671_readInt>
 800149e:	4603      	mov	r3, r0
 80014a0:	4a0b      	ldr	r2, [pc, #44]	; (80014d0 <tmcl_executeActualCommand+0x88>)
 80014a2:	6053      	str	r3, [r2, #4]
		break;
 80014a4:	e00c      	b.n	80014c0 <tmcl_executeActualCommand+0x78>
	case TMCL_writeRegisterChannel_1:
		if (ActualCommand.Motor == 0)
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <tmcl_executeActualCommand+0x84>)
 80014a8:	789b      	ldrb	r3, [r3, #2]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10a      	bne.n	80014c4 <tmcl_executeActualCommand+0x7c>
			tmc4671_writeInt(DEFAULT_MC, ActualCommand.Type, ActualCommand.Value.Int32);
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <tmcl_executeActualCommand+0x84>)
 80014b0:	785b      	ldrb	r3, [r3, #1]
 80014b2:	4a06      	ldr	r2, [pc, #24]	; (80014cc <tmcl_executeActualCommand+0x84>)
 80014b4:	6852      	ldr	r2, [r2, #4]
 80014b6:	4619      	mov	r1, r3
 80014b8:	2005      	movs	r0, #5
 80014ba:	f000 f95b 	bl	8001774 <tmc4671_writeInt>
		break;
 80014be:	e001      	b.n	80014c4 <tmcl_executeActualCommand+0x7c>
		break;
 80014c0:	bf00      	nop
 80014c2:	e000      	b.n	80014c6 <tmcl_executeActualCommand+0x7e>
		break;
 80014c4:	bf00      	nop
	}
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	2000024c 	.word	0x2000024c
 80014d0:	20000254 	.word	0x20000254

080014d4 <tmcl_processCommand>:

void tmcl_processCommand()
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0

	uint8_t USBCmd[9];
	uint8_t USBReply[9];

	/* send reply for last TMCL request */
	if (TMCLCommandState == TCS_USB) // reply via USB
 80014da:	4b82      	ldr	r3, [pc, #520]	; (80016e4 <tmcl_processCommand+0x210>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b07      	cmp	r3, #7
 80014e0:	d152      	bne.n	8001588 <tmcl_processCommand+0xb4>
	{
		if (TMCLReplyFormat == RF_STANDARD)
 80014e2:	4b81      	ldr	r3, [pc, #516]	; (80016e8 <tmcl_processCommand+0x214>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d132      	bne.n	8001550 <tmcl_processCommand+0x7c>
		{
			uint8_t Checksum = HOST_ADDRESS + MODULE_ADDRESS + ActualReply.Status + ActualReply.Opcode + ActualReply.Value.Byte[3] + ActualReply.Value.Byte[2] + ActualReply.Value.Byte[1] + ActualReply.Value.Byte[0];
 80014ea:	4b80      	ldr	r3, [pc, #512]	; (80016ec <tmcl_processCommand+0x218>)
 80014ec:	781a      	ldrb	r2, [r3, #0]
 80014ee:	4b7f      	ldr	r3, [pc, #508]	; (80016ec <tmcl_processCommand+0x218>)
 80014f0:	785b      	ldrb	r3, [r3, #1]
 80014f2:	4413      	add	r3, r2
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b7d      	ldr	r3, [pc, #500]	; (80016ec <tmcl_processCommand+0x218>)
 80014f8:	79db      	ldrb	r3, [r3, #7]
 80014fa:	4413      	add	r3, r2
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4b7b      	ldr	r3, [pc, #492]	; (80016ec <tmcl_processCommand+0x218>)
 8001500:	799b      	ldrb	r3, [r3, #6]
 8001502:	4413      	add	r3, r2
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4b79      	ldr	r3, [pc, #484]	; (80016ec <tmcl_processCommand+0x218>)
 8001508:	795b      	ldrb	r3, [r3, #5]
 800150a:	4413      	add	r3, r2
 800150c:	b2da      	uxtb	r2, r3
 800150e:	4b77      	ldr	r3, [pc, #476]	; (80016ec <tmcl_processCommand+0x218>)
 8001510:	791b      	ldrb	r3, [r3, #4]
 8001512:	4413      	add	r3, r2
 8001514:	b2db      	uxtb	r3, r3
 8001516:	3303      	adds	r3, #3
 8001518:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

			USBReply[0] = HOST_ADDRESS;
 800151c:	2302      	movs	r3, #2
 800151e:	713b      	strb	r3, [r7, #4]
			USBReply[1] = MODULE_ADDRESS;
 8001520:	2301      	movs	r3, #1
 8001522:	717b      	strb	r3, [r7, #5]
			USBReply[2] = ActualReply.Status;
 8001524:	4b71      	ldr	r3, [pc, #452]	; (80016ec <tmcl_processCommand+0x218>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	71bb      	strb	r3, [r7, #6]
			USBReply[3] = ActualReply.Opcode;
 800152a:	4b70      	ldr	r3, [pc, #448]	; (80016ec <tmcl_processCommand+0x218>)
 800152c:	785b      	ldrb	r3, [r3, #1]
 800152e:	71fb      	strb	r3, [r7, #7]
			USBReply[4] = ActualReply.Value.Byte[3];
 8001530:	4b6e      	ldr	r3, [pc, #440]	; (80016ec <tmcl_processCommand+0x218>)
 8001532:	79db      	ldrb	r3, [r3, #7]
 8001534:	723b      	strb	r3, [r7, #8]
			USBReply[5] = ActualReply.Value.Byte[2];
 8001536:	4b6d      	ldr	r3, [pc, #436]	; (80016ec <tmcl_processCommand+0x218>)
 8001538:	799b      	ldrb	r3, [r3, #6]
 800153a:	727b      	strb	r3, [r7, #9]
			USBReply[6] = ActualReply.Value.Byte[1];
 800153c:	4b6b      	ldr	r3, [pc, #428]	; (80016ec <tmcl_processCommand+0x218>)
 800153e:	795b      	ldrb	r3, [r3, #5]
 8001540:	72bb      	strb	r3, [r7, #10]
			USBReply[7] = ActualReply.Value.Byte[0];
 8001542:	4b6a      	ldr	r3, [pc, #424]	; (80016ec <tmcl_processCommand+0x218>)
 8001544:	791b      	ldrb	r3, [r3, #4]
 8001546:	72fb      	strb	r3, [r7, #11]
			USBReply[8] = Checksum;
 8001548:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800154c:	733b      	strb	r3, [r7, #12]
 800154e:	e015      	b.n	800157c <tmcl_processCommand+0xa8>
		}
		else if (TMCLReplyFormat == RF_SPECIAL)
 8001550:	4b65      	ldr	r3, [pc, #404]	; (80016e8 <tmcl_processCommand+0x214>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d111      	bne.n	800157c <tmcl_processCommand+0xa8>
		{
			for (i = 0; i < 9; i++)
 8001558:	2300      	movs	r3, #0
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
 800155c:	e00b      	b.n	8001576 <tmcl_processCommand+0xa2>
			{
				USBReply[i] = SpecialReply[i];
 800155e:	4a64      	ldr	r2, [pc, #400]	; (80016f0 <tmcl_processCommand+0x21c>)
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	4413      	add	r3, r2
 8001564:	7819      	ldrb	r1, [r3, #0]
 8001566:	1d3a      	adds	r2, r7, #4
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	4413      	add	r3, r2
 800156c:	460a      	mov	r2, r1
 800156e:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < 9; i++)
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	3301      	adds	r3, #1
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	2b08      	cmp	r3, #8
 800157a:	d9f0      	bls.n	800155e <tmcl_processCommand+0x8a>
			}
		}
		CDC_Transmit_FS(USBReply, 9);
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	2109      	movs	r1, #9
 8001580:	4618      	mov	r0, r3
 8001582:	f007 f857 	bl	8008634 <CDC_Transmit_FS>
 8001586:	e043      	b.n	8001610 <tmcl_processCommand+0x13c>
	}
	else if (TMCLCommandState == TCS_USB_ERROR) // last command had a wrong checksum
 8001588:	4b56      	ldr	r3, [pc, #344]	; (80016e4 <tmcl_processCommand+0x210>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b08      	cmp	r3, #8
 800158e:	d13f      	bne.n	8001610 <tmcl_processCommand+0x13c>
	{
		ActualReply.Opcode = 0;
 8001590:	4b56      	ldr	r3, [pc, #344]	; (80016ec <tmcl_processCommand+0x218>)
 8001592:	2200      	movs	r2, #0
 8001594:	705a      	strb	r2, [r3, #1]
		ActualReply.Status = REPLY_CHKERR;
 8001596:	4b55      	ldr	r3, [pc, #340]	; (80016ec <tmcl_processCommand+0x218>)
 8001598:	2201      	movs	r2, #1
 800159a:	701a      	strb	r2, [r3, #0]
		ActualReply.Value.Int32 = 0;
 800159c:	4b53      	ldr	r3, [pc, #332]	; (80016ec <tmcl_processCommand+0x218>)
 800159e:	2200      	movs	r2, #0
 80015a0:	605a      	str	r2, [r3, #4]

		uint8_t Checksum = HOST_ADDRESS + MODULE_ADDRESS + ActualReply.Status + ActualReply.Opcode + ActualReply.Value.Byte[3] + ActualReply.Value.Byte[2] + ActualReply.Value.Byte[1] + ActualReply.Value.Byte[0];
 80015a2:	4b52      	ldr	r3, [pc, #328]	; (80016ec <tmcl_processCommand+0x218>)
 80015a4:	781a      	ldrb	r2, [r3, #0]
 80015a6:	4b51      	ldr	r3, [pc, #324]	; (80016ec <tmcl_processCommand+0x218>)
 80015a8:	785b      	ldrb	r3, [r3, #1]
 80015aa:	4413      	add	r3, r2
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4b4f      	ldr	r3, [pc, #316]	; (80016ec <tmcl_processCommand+0x218>)
 80015b0:	79db      	ldrb	r3, [r3, #7]
 80015b2:	4413      	add	r3, r2
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4b4d      	ldr	r3, [pc, #308]	; (80016ec <tmcl_processCommand+0x218>)
 80015b8:	799b      	ldrb	r3, [r3, #6]
 80015ba:	4413      	add	r3, r2
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4b4b      	ldr	r3, [pc, #300]	; (80016ec <tmcl_processCommand+0x218>)
 80015c0:	795b      	ldrb	r3, [r3, #5]
 80015c2:	4413      	add	r3, r2
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4b49      	ldr	r3, [pc, #292]	; (80016ec <tmcl_processCommand+0x218>)
 80015c8:	791b      	ldrb	r3, [r3, #4]
 80015ca:	4413      	add	r3, r2
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	3303      	adds	r3, #3
 80015d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		USBReply[0] = HOST_ADDRESS;
 80015d4:	2302      	movs	r3, #2
 80015d6:	713b      	strb	r3, [r7, #4]
		USBReply[1] = MODULE_ADDRESS;
 80015d8:	2301      	movs	r3, #1
 80015da:	717b      	strb	r3, [r7, #5]
		USBReply[2] = ActualReply.Status;
 80015dc:	4b43      	ldr	r3, [pc, #268]	; (80016ec <tmcl_processCommand+0x218>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	71bb      	strb	r3, [r7, #6]
		USBReply[3] = ActualReply.Opcode;
 80015e2:	4b42      	ldr	r3, [pc, #264]	; (80016ec <tmcl_processCommand+0x218>)
 80015e4:	785b      	ldrb	r3, [r3, #1]
 80015e6:	71fb      	strb	r3, [r7, #7]
		USBReply[4] = ActualReply.Value.Byte[3];
 80015e8:	4b40      	ldr	r3, [pc, #256]	; (80016ec <tmcl_processCommand+0x218>)
 80015ea:	79db      	ldrb	r3, [r3, #7]
 80015ec:	723b      	strb	r3, [r7, #8]
		USBReply[5] = ActualReply.Value.Byte[2];
 80015ee:	4b3f      	ldr	r3, [pc, #252]	; (80016ec <tmcl_processCommand+0x218>)
 80015f0:	799b      	ldrb	r3, [r3, #6]
 80015f2:	727b      	strb	r3, [r7, #9]
		USBReply[6] = ActualReply.Value.Byte[1];
 80015f4:	4b3d      	ldr	r3, [pc, #244]	; (80016ec <tmcl_processCommand+0x218>)
 80015f6:	795b      	ldrb	r3, [r3, #5]
 80015f8:	72bb      	strb	r3, [r7, #10]
		USBReply[7] = ActualReply.Value.Byte[0];
 80015fa:	4b3c      	ldr	r3, [pc, #240]	; (80016ec <tmcl_processCommand+0x218>)
 80015fc:	791b      	ldrb	r3, [r3, #4]
 80015fe:	72fb      	strb	r3, [r7, #11]
		USBReply[8] = Checksum;
 8001600:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001604:	733b      	strb	r3, [r7, #12]

		CDC_Transmit_FS(USBReply, 9);
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	2109      	movs	r1, #9
 800160a:	4618      	mov	r0, r3
 800160c:	f007 f812 	bl	8008634 <CDC_Transmit_FS>
	}

	// reset command state (reply has been send)
	TMCLCommandState = TCS_IDLE;
 8001610:	4b34      	ldr	r3, [pc, #208]	; (80016e4 <tmcl_processCommand+0x210>)
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
	TMCLReplyFormat = RF_STANDARD;
 8001616:	4b34      	ldr	r3, [pc, #208]	; (80016e8 <tmcl_processCommand+0x214>)
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]

	// last command was a reset?

	/* read next request */
	if (USB_retrieveCMD(USBCmd, &CMDLen))
 800161c:	f107 021c 	add.w	r2, r7, #28
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	4611      	mov	r1, r2
 8001626:	4618      	mov	r0, r3
 8001628:	f007 f83c 	bl	80086a4 <USB_retrieveCMD>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d041      	beq.n	80016b6 <tmcl_processCommand+0x1e2>
	{
		if (CMDLen == 9)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	2b09      	cmp	r3, #9
 8001636:	d13e      	bne.n	80016b6 <tmcl_processCommand+0x1e2>
		{
			commLoopCounter++;
 8001638:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <tmcl_processCommand+0x220>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	3301      	adds	r3, #1
 800163e:	4a2d      	ldr	r2, [pc, #180]	; (80016f4 <tmcl_processCommand+0x220>)
 8001640:	6013      	str	r3, [r2, #0]

			if (USBCmd[0] == MODULE_ADDRESS)	 // check address
 8001642:	7c3b      	ldrb	r3, [r7, #16]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d136      	bne.n	80016b6 <tmcl_processCommand+0x1e2>
			{
				uint8_t checksum = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				for (i = 0; i < 8; i++)
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
 8001652:	e00c      	b.n	800166e <tmcl_processCommand+0x19a>
					checksum += USBCmd[i];
 8001654:	f107 0210 	add.w	r2, r7, #16
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	4413      	add	r3, r2
 800165c:	781a      	ldrb	r2, [r3, #0]
 800165e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001662:	4413      	add	r3, r2
 8001664:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				for (i = 0; i < 8; i++)
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	3301      	adds	r3, #1
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	2b07      	cmp	r3, #7
 8001672:	d9ef      	bls.n	8001654 <tmcl_processCommand+0x180>

				if (checksum == USBCmd[8])  // check checksum
 8001674:	7e3b      	ldrb	r3, [r7, #24]
 8001676:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800167a:	429a      	cmp	r2, r3
 800167c:	d118      	bne.n	80016b0 <tmcl_processCommand+0x1dc>
				{
					ActualCommand.Opcode = USBCmd[1];
 800167e:	7c7a      	ldrb	r2, [r7, #17]
 8001680:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <tmcl_processCommand+0x224>)
 8001682:	701a      	strb	r2, [r3, #0]
					ActualCommand.Type = USBCmd[2];
 8001684:	7cba      	ldrb	r2, [r7, #18]
 8001686:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <tmcl_processCommand+0x224>)
 8001688:	705a      	strb	r2, [r3, #1]
					ActualCommand.Motor = USBCmd[3];
 800168a:	7cfa      	ldrb	r2, [r7, #19]
 800168c:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <tmcl_processCommand+0x224>)
 800168e:	709a      	strb	r2, [r3, #2]
					ActualCommand.Value.Byte[3] = USBCmd[4];
 8001690:	7d3a      	ldrb	r2, [r7, #20]
 8001692:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <tmcl_processCommand+0x224>)
 8001694:	71da      	strb	r2, [r3, #7]
					ActualCommand.Value.Byte[2] = USBCmd[5];
 8001696:	7d7a      	ldrb	r2, [r7, #21]
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <tmcl_processCommand+0x224>)
 800169a:	719a      	strb	r2, [r3, #6]
					ActualCommand.Value.Byte[1] = USBCmd[6];
 800169c:	7dba      	ldrb	r2, [r7, #22]
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <tmcl_processCommand+0x224>)
 80016a0:	715a      	strb	r2, [r3, #5]
					ActualCommand.Value.Byte[0] = USBCmd[7];
 80016a2:	7dfa      	ldrb	r2, [r7, #23]
 80016a4:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <tmcl_processCommand+0x224>)
 80016a6:	711a      	strb	r2, [r3, #4]
					TMCLCommandState = TCS_USB;
 80016a8:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <tmcl_processCommand+0x210>)
 80016aa:	2207      	movs	r2, #7
 80016ac:	701a      	strb	r2, [r3, #0]
 80016ae:	e002      	b.n	80016b6 <tmcl_processCommand+0x1e2>
				}
				else
					TMCLCommandState = TCS_USB_ERROR;  // checksum was wrong
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <tmcl_processCommand+0x210>)
 80016b2:	2208      	movs	r2, #8
 80016b4:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	// handle request after successful reading
	if (TMCLCommandState != TCS_IDLE && TMCLCommandState != TCS_UART_ERROR && TMCLCommandState != TCS_RS485_ERROR && TMCLCommandState != TCS_USB_ERROR)
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <tmcl_processCommand+0x210>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00d      	beq.n	80016da <tmcl_processCommand+0x206>
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <tmcl_processCommand+0x210>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	d009      	beq.n	80016da <tmcl_processCommand+0x206>
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <tmcl_processCommand+0x210>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b06      	cmp	r3, #6
 80016cc:	d005      	beq.n	80016da <tmcl_processCommand+0x206>
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <tmcl_processCommand+0x210>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d001      	beq.n	80016da <tmcl_processCommand+0x206>
	{
		tmcl_executeActualCommand();
 80016d6:	f7ff feb7 	bl	8001448 <tmcl_executeActualCommand>
	}
}
 80016da:	bf00      	nop
 80016dc:	3728      	adds	r7, #40	; 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000260 	.word	0x20000260
 80016e8:	2000023c 	.word	0x2000023c
 80016ec:	20000254 	.word	0x20000254
 80016f0:	20000240 	.word	0x20000240
 80016f4:	2000025c 	.word	0x2000025c
 80016f8:	2000024c 	.word	0x2000024c

080016fc <tmc4671_readInt>:
//extern uint8_t tmc4671_readwriteByte(uint8_t motor, uint8_t data, uint8_t lastTransfer);
// <= SPI wrapper

// spi access
int32_t tmc4671_readInt(uint8_t motor, uint8_t address)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af02      	add	r7, sp, #8
 8001702:	4603      	mov	r3, r0
 8001704:	460a      	mov	r2, r1
 8001706:	71fb      	strb	r3, [r7, #7]
 8001708:	4613      	mov	r3, r2
 800170a:	71bb      	strb	r3, [r7, #6]

	int32_t writeBuff = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
	int32_t readBuff= 0;
 8001710:	2300      	movs	r3, #0
 8001712:	60bb      	str	r3, [r7, #8]

	// clear write bit
	address &= 0x7F;
 8001714:	79bb      	ldrb	r3, [r7, #6]
 8001716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800171a:	b2db      	uxtb	r3, r3
 800171c:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(CTRL_EN_GPIO_Port, CS_CTRL_Pin, GPIO_PIN_RESET);
 800171e:	2200      	movs	r2, #0
 8001720:	2108      	movs	r1, #8
 8001722:	4812      	ldr	r0, [pc, #72]	; (800176c <tmc4671_readInt+0x70>)
 8001724:	f000 ff94 	bl	8002650 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&address, (uint8_t*)&readBuff, sizeof(address), HAL_MAX_DELAY);
 8001728:	f107 0208 	add.w	r2, r7, #8
 800172c:	1db9      	adds	r1, r7, #6
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	2301      	movs	r3, #1
 8001736:	480e      	ldr	r0, [pc, #56]	; (8001770 <tmc4671_readInt+0x74>)
 8001738:	f002 ff00 	bl	800453c <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeBuff, (uint8_t*)&readBuff, sizeof(readBuff), HAL_MAX_DELAY);
 800173c:	f107 0208 	add.w	r2, r7, #8
 8001740:	f107 010c 	add.w	r1, r7, #12
 8001744:	f04f 33ff 	mov.w	r3, #4294967295
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	2304      	movs	r3, #4
 800174c:	4808      	ldr	r0, [pc, #32]	; (8001770 <tmc4671_readInt+0x74>)
 800174e:	f002 fef5 	bl	800453c <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(CTRL_EN_GPIO_Port, CS_CTRL_Pin, GPIO_PIN_SET);
 8001752:	2201      	movs	r2, #1
 8001754:	2108      	movs	r1, #8
 8001756:	4805      	ldr	r0, [pc, #20]	; (800176c <tmc4671_readInt+0x70>)
 8001758:	f000 ff7a 	bl	8002650 <HAL_GPIO_WritePin>
    readBuff = __builtin_bswap32(readBuff);
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	ba1b      	rev	r3, r3
 8001760:	60bb      	str	r3, [r7, #8]
	return readBuff;
 8001762:	68bb      	ldr	r3, [r7, #8]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40020000 	.word	0x40020000
 8001770:	20000124 	.word	0x20000124

08001774 <tmc4671_writeInt>:

void tmc4671_writeInt(uint8_t motor, uint8_t address, int32_t value)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af02      	add	r7, sp, #8
 800177a:	4603      	mov	r3, r0
 800177c:	603a      	str	r2, [r7, #0]
 800177e:	71fb      	strb	r3, [r7, #7]
 8001780:	460b      	mov	r3, r1
 8001782:	71bb      	strb	r3, [r7, #6]
	int32_t readBuff= 0;
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]

	// set address
	address = address|0x80;
 8001788:	79bb      	ldrb	r3, [r7, #6]
 800178a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800178e:	b2db      	uxtb	r3, r3
 8001790:	71bb      	strb	r3, [r7, #6]

	// write value
	value = __builtin_bswap32(value);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	ba1b      	rev	r3, r3
 8001796:	603b      	str	r3, [r7, #0]
    HAL_GPIO_WritePin(CTRL_EN_GPIO_Port, CS_CTRL_Pin, GPIO_PIN_RESET);
 8001798:	2200      	movs	r2, #0
 800179a:	2108      	movs	r1, #8
 800179c:	480f      	ldr	r0, [pc, #60]	; (80017dc <tmc4671_writeInt+0x68>)
 800179e:	f000 ff57 	bl	8002650 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&address, (uint8_t*)&readBuff, sizeof(address), HAL_MAX_DELAY);
 80017a2:	f107 020c 	add.w	r2, r7, #12
 80017a6:	1db9      	adds	r1, r7, #6
 80017a8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	2301      	movs	r3, #1
 80017b0:	480b      	ldr	r0, [pc, #44]	; (80017e0 <tmc4671_writeInt+0x6c>)
 80017b2:	f002 fec3 	bl	800453c <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&value, (uint8_t*)&readBuff, sizeof(readBuff), HAL_MAX_DELAY);
 80017b6:	f107 020c 	add.w	r2, r7, #12
 80017ba:	4639      	mov	r1, r7
 80017bc:	f04f 33ff 	mov.w	r3, #4294967295
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	2304      	movs	r3, #4
 80017c4:	4806      	ldr	r0, [pc, #24]	; (80017e0 <tmc4671_writeInt+0x6c>)
 80017c6:	f002 feb9 	bl	800453c <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(CTRL_EN_GPIO_Port, CS_CTRL_Pin, GPIO_PIN_SET);
 80017ca:	2201      	movs	r2, #1
 80017cc:	2108      	movs	r1, #8
 80017ce:	4803      	ldr	r0, [pc, #12]	; (80017dc <tmc4671_writeInt+0x68>)
 80017d0:	f000 ff3e 	bl	8002650 <HAL_GPIO_WritePin>
}
 80017d4:	bf00      	nop
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40020000 	.word	0x40020000
 80017e0:	20000124 	.word	0x20000124

080017e4 <tmc4671_readFieldWithDependency>:
{
	tmc4671_writeInt(motor, TMC4671_PID_POSITION_P_POSITION_I, ((uint32_t)pParameter << 16) | (uint32_t)iParameter);
}

int32_t tmc4671_readFieldWithDependency(uint8_t motor, uint8_t reg, uint8_t dependsReg, uint32_t dependsValue, uint32_t mask, uint8_t shift)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	603b      	str	r3, [r7, #0]
 80017ec:	4603      	mov	r3, r0
 80017ee:	71fb      	strb	r3, [r7, #7]
 80017f0:	460b      	mov	r3, r1
 80017f2:	71bb      	strb	r3, [r7, #6]
 80017f4:	4613      	mov	r3, r2
 80017f6:	717b      	strb	r3, [r7, #5]
	// remember old depends value
	uint32_t lastDependsValue = tmc4671_readInt(motor, dependsReg);
 80017f8:	797a      	ldrb	r2, [r7, #5]
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	4611      	mov	r1, r2
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ff7c 	bl	80016fc <tmc4671_readInt>
 8001804:	4603      	mov	r3, r0
 8001806:	60fb      	str	r3, [r7, #12]

	// set needed depends value
	tmc4671_writeInt(motor, dependsReg, dependsValue);
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	7979      	ldrb	r1, [r7, #5]
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff ffb0 	bl	8001774 <tmc4671_writeInt>
	uint32_t value = FIELD_GET(tmc4671_readInt(motor, reg), mask, shift);
 8001814:	79ba      	ldrb	r2, [r7, #6]
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	4611      	mov	r1, r2
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff ff6e 	bl	80016fc <tmc4671_readInt>
 8001820:	4603      	mov	r3, r0
 8001822:	461a      	mov	r2, r3
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	401a      	ands	r2, r3
 8001828:	7f3b      	ldrb	r3, [r7, #28]
 800182a:	fa22 f303 	lsr.w	r3, r2, r3
 800182e:	60bb      	str	r3, [r7, #8]

	// set old depends value
	tmc4671_writeInt(motor, dependsReg, lastDependsValue);
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	7979      	ldrb	r1, [r7, #5]
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff ff9c 	bl	8001774 <tmc4671_writeInt>
	return value;
 800183c:	68bb      	ldr	r3, [r7, #8]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <tmc6100_init>:
// => SPI wrapper
//extern uint8_t tmc6100_readwriteByte(uint8_t motor, uint8_t data, uint8_t lastTransfer);
// <= SPI wrapper

int tmc6100_init(tmc6100_t* drv, SPI_HandleTypeDef* hspi, GPIO_TypeDef* CS_Port, uint16_t CS_Pin)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b084      	sub	sp, #16
 800184a:	af00      	add	r7, sp, #0
 800184c:	60f8      	str	r0, [r7, #12]
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	807b      	strh	r3, [r7, #2]
	if(drv == NULL || hspi == NULL || CS_Port == NULL) {
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d005      	beq.n	8001866 <tmc6100_init+0x20>
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <tmc6100_init+0x20>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <tmc6100_init+0x24>
		return 1;
 8001866:	2301      	movs	r3, #1
 8001868:	e00f      	b.n	800188a <tmc6100_init+0x44>
	}

	drv->CS_Pin 	= CS_Pin;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	887a      	ldrh	r2, [r7, #2]
 800186e:	811a      	strh	r2, [r3, #8]
	drv->CS_Port 	= CS_Port;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	605a      	str	r2, [r3, #4]
	drv->hspi 		= hspi;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET); // write CS to High
 800187c:	887b      	ldrh	r3, [r7, #2]
 800187e:	2201      	movs	r2, #1
 8001880:	4619      	mov	r1, r3
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 fee4 	bl	8002650 <HAL_GPIO_WritePin>
	return 0;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <tmc6100_writeInt>:
	readBuff = __builtin_bswap32(readBuff);
	return readBuff;
}

void tmc6100_writeInt(tmc6100_t* drv, uint8_t address, int32_t value)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b088      	sub	sp, #32
 8001896:	af02      	add	r7, sp, #8
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	460b      	mov	r3, r1
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	72fb      	strb	r3, [r7, #11]
	int32_t readBuff = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]

	// set address
	address = address | TMC6100_WRITE_BIT;
 80018a4:	7afb      	ldrb	r3, [r7, #11]
 80018a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	72fb      	strb	r3, [r7, #11]

	// write value
	value = __builtin_bswap32(value);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	ba1b      	rev	r3, r3
 80018b2:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(drv->CS_Port, drv->CS_Pin, GPIO_PIN_RESET);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6858      	ldr	r0, [r3, #4]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	891b      	ldrh	r3, [r3, #8]
 80018bc:	2200      	movs	r2, #0
 80018be:	4619      	mov	r1, r3
 80018c0:	f000 fec6 	bl	8002650 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(drv->hspi, (uint8_t*)&address, (uint8_t*)&readBuff, sizeof(address), HAL_MAX_DELAY);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	f107 0214 	add.w	r2, r7, #20
 80018cc:	f107 010b 	add.w	r1, r7, #11
 80018d0:	f04f 33ff 	mov.w	r3, #4294967295
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	2301      	movs	r3, #1
 80018d8:	f002 fe30 	bl	800453c <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(drv->hspi, (uint8_t*)&value, (uint8_t*)&readBuff, sizeof(readBuff), HAL_MAX_DELAY);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	f107 0214 	add.w	r2, r7, #20
 80018e4:	1d39      	adds	r1, r7, #4
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2304      	movs	r3, #4
 80018ee:	f002 fe25 	bl	800453c <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(drv->CS_Port, drv->CS_Pin, GPIO_PIN_SET);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6858      	ldr	r0, [r3, #4]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	891b      	ldrh	r3, [r3, #8]
 80018fa:	2201      	movs	r2, #1
 80018fc:	4619      	mov	r1, r3
 80018fe:	f000 fea7 	bl	8002650 <HAL_GPIO_WritePin>
}
 8001902:	bf00      	nop
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <StartupConfig>:
#include "TMC6100_Fields.h"
#include "TMC6100.h"

tmc6100_t tmc6100;
void StartupConfig()
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	// Initialize the driver chip
	tmc6100_init(&tmc6100, &hspi1, CS_DRV_GPIO_Port, CS_DRV_Pin);
 8001910:	2310      	movs	r3, #16
 8001912:	4a1b      	ldr	r2, [pc, #108]	; (8001980 <StartupConfig+0x74>)
 8001914:	491b      	ldr	r1, [pc, #108]	; (8001984 <StartupConfig+0x78>)
 8001916:	481c      	ldr	r0, [pc, #112]	; (8001988 <StartupConfig+0x7c>)
 8001918:	f7ff ff95 	bl	8001846 <tmc6100_init>
	tmc6100_writeInt(&tmc6100, TMC6100_GCONF,
 800191c:	2244      	movs	r2, #68	; 0x44
 800191e:	2100      	movs	r1, #0
 8001920:	4819      	ldr	r0, [pc, #100]	; (8001988 <StartupConfig+0x7c>)
 8001922:	f7ff ffb6 	bl	8001892 <tmc6100_writeInt>
			(0 << TMC6100_DISABLE_SHIFT)      | // Enable
			(0 << TMC6100_SINGLELINE_SHIFT)   | // Use individual L+H signals
			(1 << TMC6100_FAULTDIRECT_SHIFT)  | // Fault output shows each protective action
			(1 << TMC6100_CURRENT_ZERO_SHIFT) | // Disable current amplifier;
			(0 << TMC6100_TEST_MODE_SHIFT));
	tmc6100_writeInt(&tmc6100, TMC6100_GSTAT, 		0x00);
 8001926:	2200      	movs	r2, #0
 8001928:	2101      	movs	r1, #1
 800192a:	4817      	ldr	r0, [pc, #92]	; (8001988 <StartupConfig+0x7c>)
 800192c:	f7ff ffb1 	bl	8001892 <tmc6100_writeInt>
	tmc6100_writeInt(&tmc6100, TMC6100_DRV_CONF, 	0x04);
 8001930:	2204      	movs	r2, #4
 8001932:	210a      	movs	r1, #10
 8001934:	4814      	ldr	r0, [pc, #80]	; (8001988 <StartupConfig+0x7c>)
 8001936:	f7ff ffac 	bl	8001892 <tmc6100_writeInt>
	//================================================================================
	//Prototype motor init and movement START
	//================================================================================

	// Motor type &  PWM configuration
	tmc4671_writeInt(0, TMC4671_MOTOR_TYPE_N_POLE_PAIRS,
 800193a:	f04f 1203 	mov.w	r2, #196611	; 0x30003
 800193e:	211b      	movs	r1, #27
 8001940:	2000      	movs	r0, #0
 8001942:	f7ff ff17 	bl	8001774 <tmc4671_writeInt>
			(0x03 << TMC4671_N_POLE_PAIRS_SHIFT) | 	//3 pole pairs
			(0x03 << TMC4671_MOTOR_TYPE_SHIFT)); 	//Three phase BLDC
	tmc4671_writeInt(0, TMC4671_PWM_POLARITIES, 	0x00000000);	//low and low
 8001946:	2200      	movs	r2, #0
 8001948:	2117      	movs	r1, #23
 800194a:	2000      	movs	r0, #0
 800194c:	f7ff ff12 	bl	8001774 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_PWM_MAXCNT, 		0x00000F9F);	//3999 for 25kHz ( fPWM[Hz] = 100MHz/(PWM_MAXCNT+1) )
 8001950:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001954:	2118      	movs	r1, #24
 8001956:	2000      	movs	r0, #0
 8001958:	f7ff ff0c 	bl	8001774 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_PWM_BBM_H_BBM_L, 	0x00005050);	//80 * 10ns for 800ns; first two digits for Low, second two for High deadtime
 800195c:	f245 0250 	movw	r2, #20560	; 0x5050
 8001960:	2119      	movs	r1, #25
 8001962:	2000      	movs	r0, #0
 8001964:	f7ff ff06 	bl	8001774 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_PWM_SV_CHOP, 		0x00000007);	//FOC PWM Enabled with SVM disabled; 0x00000107 for SVM
 8001968:	2207      	movs	r2, #7
 800196a:	211a      	movs	r1, #26
 800196c:	2000      	movs	r0, #0
 800196e:	f7ff ff01 	bl	8001774 <tmc4671_writeInt>

	HAL_GPIO_WritePin(CTRL_EN_GPIO_Port, CTRL_EN_Pin, GPIO_PIN_SET);			//Enable TMC4671
 8001972:	2201      	movs	r2, #1
 8001974:	2104      	movs	r1, #4
 8001976:	4802      	ldr	r0, [pc, #8]	; (8001980 <StartupConfig+0x74>)
 8001978:	f000 fe6a 	bl	8002650 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(GPIOA, TMC_OK_LED_Pin, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(GPIOC, FAULT_LED_Pin, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(GPIOF, DEBUG_LED_Pin, GPIO_PIN_SET);
	//start new testing procedure

}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40020000 	.word	0x40020000
 8001984:	20000124 	.word	0x20000124
 8001988:	20000264 	.word	0x20000264

0800198c <openloop_test_drive>:

void openloop_test_drive(uint32_t UQ_UD_target)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	// Open loop settings -------------------------------------------------------------------------------------
	// Feedback selection
	tmc4671_writeInt(0, TMC4671_PHI_E_SELECTION, 		0x00000002); 	//set to phi_e_openloop
 8001994:	2202      	movs	r2, #2
 8001996:	2152      	movs	r1, #82	; 0x52
 8001998:	2000      	movs	r0, #0
 800199a:	f7ff feeb 	bl	8001774 <tmc4671_writeInt>
	// Switch to open loop velocity mode
	tmc4671_writeInt(0, TMC4671_MODE_RAMP_MODE_MOTION, 	0x00000008); 	// set to uq_ud_ext mode
 800199e:	2208      	movs	r2, #8
 80019a0:	2163      	movs	r1, #99	; 0x63
 80019a2:	2000      	movs	r0, #0
 80019a4:	f7ff fee6 	bl	8001774 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_UQ_UD_EXT,
 80019a8:	2201      	movs	r2, #1
 80019aa:	2124      	movs	r1, #36	; 0x24
 80019ac:	2000      	movs	r0, #0
 80019ae:	f7ff fee1 	bl	8001774 <tmc4671_writeInt>
			(0x01 << TMC4671_UD_EXT_SHIFT) | 							// UD_EXT = 1
			(0x00 << TMC4671_UQ_EXT_SHIFT));							// UQ_EXT = 0
	tmc4671_writeInt(0, TMC4671_OPENLOOP_ACCELERATION, 	0x0000003C);	// set open loop acceleration to 60 rpm/s
 80019b2:	223c      	movs	r2, #60	; 0x3c
 80019b4:	2120      	movs	r1, #32
 80019b6:	2000      	movs	r0, #0
 80019b8:	f7ff fedc 	bl	8001774 <tmc4671_writeInt>
	//tmc4671_writeInt(0, TMC4671_OPENLOOP_VELOCITY_TARGET, -30);			// set velocity to -30 rpm
	//tmc4671_writeInt(0, TMC4671_OPENLOOP_MODE, 			0x00000000);	// direction - positive
	HAL_Delay(100);
 80019bc:	2064      	movs	r0, #100	; 0x64
 80019be:	f000 f881 	bl	8001ac4 <HAL_Delay>
	tmc4671_writeInt(0, TMC4671_OPENLOOP_VELOCITY_TARGET, 	100);
 80019c2:	2264      	movs	r2, #100	; 0x64
 80019c4:	2121      	movs	r1, #33	; 0x21
 80019c6:	2000      	movs	r0, #0
 80019c8:	f7ff fed4 	bl	8001774 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_UQ_UD_EXT, 					0x0FA00000);
 80019cc:	f04f 627a 	mov.w	r2, #262144000	; 0xfa00000
 80019d0:	2124      	movs	r1, #36	; 0x24
 80019d2:	2000      	movs	r0, #0
 80019d4:	f7ff fece 	bl	8001774 <tmc4671_writeInt>
////	HAL_Delay(2000);
//	// Stop
//	//tmc4671_writeInt(0, TMC4671_OPENLOOP_VELOCITY_TARGET, 0x00000000);
////	HAL_Delay(1000);
////	tmc4671_writeInt(0, TMC4671_UQ_UD_EXT, 0x00000000);
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019e4:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <HAL_Init+0x40>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0d      	ldr	r2, [pc, #52]	; (8001a20 <HAL_Init+0x40>)
 80019ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_Init+0x40>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <HAL_Init+0x40>)
 80019f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <HAL_Init+0x40>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <HAL_Init+0x40>)
 8001a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a08:	2003      	movs	r0, #3
 8001a0a:	f000 f94f 	bl	8001cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a0e:	200f      	movs	r0, #15
 8001a10:	f000 f808 	bl	8001a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a14:	f7ff fb78 	bl	8001108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023c00 	.word	0x40023c00

08001a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_InitTick+0x54>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_InitTick+0x58>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	4619      	mov	r1, r3
 8001a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 f967 	bl	8001d16 <HAL_SYSTICK_Config>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00e      	b.n	8001a70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b0f      	cmp	r3, #15
 8001a56:	d80a      	bhi.n	8001a6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a60:	f000 f92f 	bl	8001cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a64:	4a06      	ldr	r2, [pc, #24]	; (8001a80 <HAL_InitTick+0x5c>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e000      	b.n	8001a70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	2000000c 	.word	0x2000000c
 8001a80:	20000008 	.word	0x20000008

08001a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <HAL_IncTick+0x20>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_IncTick+0x24>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4413      	add	r3, r2
 8001a94:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <HAL_IncTick+0x24>)
 8001a96:	6013      	str	r3, [r2, #0]
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	2000000c 	.word	0x2000000c
 8001aa8:	20000270 	.word	0x20000270

08001aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <HAL_GetTick+0x14>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000270 	.word	0x20000270

08001ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001acc:	f7ff ffee 	bl	8001aac <HAL_GetTick>
 8001ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001adc:	d005      	beq.n	8001aea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <HAL_Delay+0x44>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aea:	bf00      	nop
 8001aec:	f7ff ffde 	bl	8001aac <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d8f7      	bhi.n	8001aec <HAL_Delay+0x28>
  {
  }
}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2000000c 	.word	0x2000000c

08001b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <__NVIC_SetPriorityGrouping+0x44>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3e:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <__NVIC_SetPriorityGrouping+0x44>)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	60d3      	str	r3, [r2, #12]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b58:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <__NVIC_GetPriorityGrouping+0x18>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	0a1b      	lsrs	r3, r3, #8
 8001b5e:	f003 0307 	and.w	r3, r3, #7
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	db0b      	blt.n	8001b9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	f003 021f 	and.w	r2, r3, #31
 8001b88:	4907      	ldr	r1, [pc, #28]	; (8001ba8 <__NVIC_EnableIRQ+0x38>)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	095b      	lsrs	r3, r3, #5
 8001b90:	2001      	movs	r0, #1
 8001b92:	fa00 f202 	lsl.w	r2, r0, r2
 8001b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000e100 	.word	0xe000e100

08001bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	6039      	str	r1, [r7, #0]
 8001bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	db0a      	blt.n	8001bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	490c      	ldr	r1, [pc, #48]	; (8001bf8 <__NVIC_SetPriority+0x4c>)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	0112      	lsls	r2, r2, #4
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	440b      	add	r3, r1
 8001bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd4:	e00a      	b.n	8001bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	4908      	ldr	r1, [pc, #32]	; (8001bfc <__NVIC_SetPriority+0x50>)
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	3b04      	subs	r3, #4
 8001be4:	0112      	lsls	r2, r2, #4
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	440b      	add	r3, r1
 8001bea:	761a      	strb	r2, [r3, #24]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000e100 	.word	0xe000e100
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b089      	sub	sp, #36	; 0x24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f1c3 0307 	rsb	r3, r3, #7
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	bf28      	it	cs
 8001c1e:	2304      	movcs	r3, #4
 8001c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3304      	adds	r3, #4
 8001c26:	2b06      	cmp	r3, #6
 8001c28:	d902      	bls.n	8001c30 <NVIC_EncodePriority+0x30>
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3b03      	subs	r3, #3
 8001c2e:	e000      	b.n	8001c32 <NVIC_EncodePriority+0x32>
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	f04f 32ff 	mov.w	r2, #4294967295
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43da      	mvns	r2, r3
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	401a      	ands	r2, r3
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c48:	f04f 31ff 	mov.w	r1, #4294967295
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c52:	43d9      	mvns	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	4313      	orrs	r3, r2
         );
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3724      	adds	r7, #36	; 0x24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c78:	d301      	bcc.n	8001c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e00f      	b.n	8001c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <SysTick_Config+0x40>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c86:	210f      	movs	r1, #15
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8c:	f7ff ff8e 	bl	8001bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <SysTick_Config+0x40>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c96:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <SysTick_Config+0x40>)
 8001c98:	2207      	movs	r2, #7
 8001c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	e000e010 	.word	0xe000e010

08001cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff ff29 	bl	8001b0c <__NVIC_SetPriorityGrouping>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b086      	sub	sp, #24
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd4:	f7ff ff3e 	bl	8001b54 <__NVIC_GetPriorityGrouping>
 8001cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	6978      	ldr	r0, [r7, #20]
 8001ce0:	f7ff ff8e 	bl	8001c00 <NVIC_EncodePriority>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff5d 	bl	8001bac <__NVIC_SetPriority>
}
 8001cf2:	bf00      	nop
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff31 	bl	8001b70 <__NVIC_EnableIRQ>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ffa2 	bl	8001c68 <SysTick_Config>
 8001d24:	4603      	mov	r3, r0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d3c:	f7ff feb6 	bl	8001aac <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e099      	b.n	8001e80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0201 	bic.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d6c:	e00f      	b.n	8001d8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d6e:	f7ff fe9d 	bl	8001aac <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b05      	cmp	r3, #5
 8001d7a:	d908      	bls.n	8001d8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2203      	movs	r2, #3
 8001d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e078      	b.n	8001e80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1e8      	bne.n	8001d6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	4b38      	ldr	r3, [pc, #224]	; (8001e88 <HAL_DMA_Init+0x158>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d107      	bne.n	8001df8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	4313      	orrs	r3, r2
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f023 0307 	bic.w	r3, r3, #7
 8001e0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d117      	bne.n	8001e52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00e      	beq.n	8001e52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 fa0b 	bl	8002250 <DMA_CheckFifoParam>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d008      	beq.n	8001e52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2240      	movs	r2, #64	; 0x40
 8001e44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e016      	b.n	8001e80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f9c2 	bl	80021e4 <DMA_CalcBaseAndBitshift>
 8001e60:	4603      	mov	r3, r0
 8001e62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e68:	223f      	movs	r2, #63	; 0x3f
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	f010803f 	.word	0xf010803f

08001e8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d004      	beq.n	8001eaa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2280      	movs	r2, #128	; 0x80
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e00c      	b.n	8001ec4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2205      	movs	r2, #5
 8001eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0201 	bic.w	r2, r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001edc:	4b8e      	ldr	r3, [pc, #568]	; (8002118 <HAL_DMA_IRQHandler+0x248>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a8e      	ldr	r2, [pc, #568]	; (800211c <HAL_DMA_IRQHandler+0x24c>)
 8001ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee6:	0a9b      	lsrs	r3, r3, #10
 8001ee8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efa:	2208      	movs	r2, #8
 8001efc:	409a      	lsls	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d01a      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d013      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0204 	bic.w	r2, r2, #4
 8001f22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f28:	2208      	movs	r2, #8
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f34:	f043 0201 	orr.w	r2, r3, #1
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f40:	2201      	movs	r2, #1
 8001f42:	409a      	lsls	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d012      	beq.n	8001f72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00b      	beq.n	8001f72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5e:	2201      	movs	r2, #1
 8001f60:	409a      	lsls	r2, r3
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6a:	f043 0202 	orr.w	r2, r3, #2
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f76:	2204      	movs	r2, #4
 8001f78:	409a      	lsls	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d012      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00b      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f94:	2204      	movs	r2, #4
 8001f96:	409a      	lsls	r2, r3
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa0:	f043 0204 	orr.w	r2, r3, #4
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fac:	2210      	movs	r2, #16
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d043      	beq.n	8002040 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d03c      	beq.n	8002040 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fca:	2210      	movs	r2, #16
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d018      	beq.n	8002012 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d108      	bne.n	8002000 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d024      	beq.n	8002040 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	4798      	blx	r3
 8001ffe:	e01f      	b.n	8002040 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002004:	2b00      	cmp	r3, #0
 8002006:	d01b      	beq.n	8002040 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	4798      	blx	r3
 8002010:	e016      	b.n	8002040 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201c:	2b00      	cmp	r3, #0
 800201e:	d107      	bne.n	8002030 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0208 	bic.w	r2, r2, #8
 800202e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002044:	2220      	movs	r2, #32
 8002046:	409a      	lsls	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4013      	ands	r3, r2
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 808f 	beq.w	8002170 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0310 	and.w	r3, r3, #16
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 8087 	beq.w	8002170 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002066:	2220      	movs	r2, #32
 8002068:	409a      	lsls	r2, r3
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b05      	cmp	r3, #5
 8002078:	d136      	bne.n	80020e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0216 	bic.w	r2, r2, #22
 8002088:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695a      	ldr	r2, [r3, #20]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002098:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d103      	bne.n	80020aa <HAL_DMA_IRQHandler+0x1da>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d007      	beq.n	80020ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 0208 	bic.w	r2, r2, #8
 80020b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020be:	223f      	movs	r2, #63	; 0x3f
 80020c0:	409a      	lsls	r2, r3
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d07e      	beq.n	80021dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	4798      	blx	r3
        }
        return;
 80020e6:	e079      	b.n	80021dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d01d      	beq.n	8002132 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10d      	bne.n	8002120 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002108:	2b00      	cmp	r3, #0
 800210a:	d031      	beq.n	8002170 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	4798      	blx	r3
 8002114:	e02c      	b.n	8002170 <HAL_DMA_IRQHandler+0x2a0>
 8002116:	bf00      	nop
 8002118:	20000000 	.word	0x20000000
 800211c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002124:	2b00      	cmp	r3, #0
 8002126:	d023      	beq.n	8002170 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	4798      	blx	r3
 8002130:	e01e      	b.n	8002170 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10f      	bne.n	8002160 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0210 	bic.w	r2, r2, #16
 800214e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002174:	2b00      	cmp	r3, #0
 8002176:	d032      	beq.n	80021de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b00      	cmp	r3, #0
 8002182:	d022      	beq.n	80021ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2205      	movs	r2, #5
 8002188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0201 	bic.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	3301      	adds	r3, #1
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d307      	bcc.n	80021b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f2      	bne.n	800219c <HAL_DMA_IRQHandler+0x2cc>
 80021b6:	e000      	b.n	80021ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	4798      	blx	r3
 80021da:	e000      	b.n	80021de <HAL_DMA_IRQHandler+0x30e>
        return;
 80021dc:	bf00      	nop
    }
  }
}
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	3b10      	subs	r3, #16
 80021f4:	4a14      	ldr	r2, [pc, #80]	; (8002248 <DMA_CalcBaseAndBitshift+0x64>)
 80021f6:	fba2 2303 	umull	r2, r3, r2, r3
 80021fa:	091b      	lsrs	r3, r3, #4
 80021fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021fe:	4a13      	ldr	r2, [pc, #76]	; (800224c <DMA_CalcBaseAndBitshift+0x68>)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4413      	add	r3, r2
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b03      	cmp	r3, #3
 8002210:	d909      	bls.n	8002226 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800221a:	f023 0303 	bic.w	r3, r3, #3
 800221e:	1d1a      	adds	r2, r3, #4
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	659a      	str	r2, [r3, #88]	; 0x58
 8002224:	e007      	b.n	8002236 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800222e:	f023 0303 	bic.w	r3, r3, #3
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800223a:	4618      	mov	r0, r3
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	aaaaaaab 	.word	0xaaaaaaab
 800224c:	08009030 	.word	0x08009030

08002250 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002260:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d11f      	bne.n	80022aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2b03      	cmp	r3, #3
 800226e:	d856      	bhi.n	800231e <DMA_CheckFifoParam+0xce>
 8002270:	a201      	add	r2, pc, #4	; (adr r2, 8002278 <DMA_CheckFifoParam+0x28>)
 8002272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002276:	bf00      	nop
 8002278:	08002289 	.word	0x08002289
 800227c:	0800229b 	.word	0x0800229b
 8002280:	08002289 	.word	0x08002289
 8002284:	0800231f 	.word	0x0800231f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d046      	beq.n	8002322 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002298:	e043      	b.n	8002322 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022a2:	d140      	bne.n	8002326 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022a8:	e03d      	b.n	8002326 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022b2:	d121      	bne.n	80022f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d837      	bhi.n	800232a <DMA_CheckFifoParam+0xda>
 80022ba:	a201      	add	r2, pc, #4	; (adr r2, 80022c0 <DMA_CheckFifoParam+0x70>)
 80022bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c0:	080022d1 	.word	0x080022d1
 80022c4:	080022d7 	.word	0x080022d7
 80022c8:	080022d1 	.word	0x080022d1
 80022cc:	080022e9 	.word	0x080022e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	73fb      	strb	r3, [r7, #15]
      break;
 80022d4:	e030      	b.n	8002338 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d025      	beq.n	800232e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022e6:	e022      	b.n	800232e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022f0:	d11f      	bne.n	8002332 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022f6:	e01c      	b.n	8002332 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d903      	bls.n	8002306 <DMA_CheckFifoParam+0xb6>
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b03      	cmp	r3, #3
 8002302:	d003      	beq.n	800230c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002304:	e018      	b.n	8002338 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	73fb      	strb	r3, [r7, #15]
      break;
 800230a:	e015      	b.n	8002338 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002310:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00e      	beq.n	8002336 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	73fb      	strb	r3, [r7, #15]
      break;
 800231c:	e00b      	b.n	8002336 <DMA_CheckFifoParam+0xe6>
      break;
 800231e:	bf00      	nop
 8002320:	e00a      	b.n	8002338 <DMA_CheckFifoParam+0xe8>
      break;
 8002322:	bf00      	nop
 8002324:	e008      	b.n	8002338 <DMA_CheckFifoParam+0xe8>
      break;
 8002326:	bf00      	nop
 8002328:	e006      	b.n	8002338 <DMA_CheckFifoParam+0xe8>
      break;
 800232a:	bf00      	nop
 800232c:	e004      	b.n	8002338 <DMA_CheckFifoParam+0xe8>
      break;
 800232e:	bf00      	nop
 8002330:	e002      	b.n	8002338 <DMA_CheckFifoParam+0xe8>
      break;   
 8002332:	bf00      	nop
 8002334:	e000      	b.n	8002338 <DMA_CheckFifoParam+0xe8>
      break;
 8002336:	bf00      	nop
    }
  } 
  
  return status; 
 8002338:	7bfb      	ldrb	r3, [r7, #15]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop

08002348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002348:	b480      	push	{r7}
 800234a:	b089      	sub	sp, #36	; 0x24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800235a:	2300      	movs	r3, #0
 800235c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	e159      	b.n	8002618 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002364:	2201      	movs	r2, #1
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	429a      	cmp	r2, r3
 800237e:	f040 8148 	bne.w	8002612 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b01      	cmp	r3, #1
 800238c:	d005      	beq.n	800239a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002396:	2b02      	cmp	r3, #2
 8002398:	d130      	bne.n	80023fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	2203      	movs	r2, #3
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023d0:	2201      	movs	r2, #1
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	f003 0201 	and.w	r2, r3, #1
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 0303 	and.w	r3, r3, #3
 8002404:	2b03      	cmp	r3, #3
 8002406:	d017      	beq.n	8002438 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	2203      	movs	r2, #3
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d123      	bne.n	800248c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	08da      	lsrs	r2, r3, #3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3208      	adds	r2, #8
 800244c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002450:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	220f      	movs	r2, #15
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	08da      	lsrs	r2, r3, #3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3208      	adds	r2, #8
 8002486:	69b9      	ldr	r1, [r7, #24]
 8002488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	2203      	movs	r2, #3
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0203 	and.w	r2, r3, #3
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 80a2 	beq.w	8002612 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	4b57      	ldr	r3, [pc, #348]	; (8002630 <HAL_GPIO_Init+0x2e8>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	4a56      	ldr	r2, [pc, #344]	; (8002630 <HAL_GPIO_Init+0x2e8>)
 80024d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024dc:	6453      	str	r3, [r2, #68]	; 0x44
 80024de:	4b54      	ldr	r3, [pc, #336]	; (8002630 <HAL_GPIO_Init+0x2e8>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024ea:	4a52      	ldr	r2, [pc, #328]	; (8002634 <HAL_GPIO_Init+0x2ec>)
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	089b      	lsrs	r3, r3, #2
 80024f0:	3302      	adds	r3, #2
 80024f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	220f      	movs	r2, #15
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a49      	ldr	r2, [pc, #292]	; (8002638 <HAL_GPIO_Init+0x2f0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d019      	beq.n	800254a <HAL_GPIO_Init+0x202>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a48      	ldr	r2, [pc, #288]	; (800263c <HAL_GPIO_Init+0x2f4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d013      	beq.n	8002546 <HAL_GPIO_Init+0x1fe>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a47      	ldr	r2, [pc, #284]	; (8002640 <HAL_GPIO_Init+0x2f8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d00d      	beq.n	8002542 <HAL_GPIO_Init+0x1fa>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a46      	ldr	r2, [pc, #280]	; (8002644 <HAL_GPIO_Init+0x2fc>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d007      	beq.n	800253e <HAL_GPIO_Init+0x1f6>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a45      	ldr	r2, [pc, #276]	; (8002648 <HAL_GPIO_Init+0x300>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d101      	bne.n	800253a <HAL_GPIO_Init+0x1f2>
 8002536:	2304      	movs	r3, #4
 8002538:	e008      	b.n	800254c <HAL_GPIO_Init+0x204>
 800253a:	2307      	movs	r3, #7
 800253c:	e006      	b.n	800254c <HAL_GPIO_Init+0x204>
 800253e:	2303      	movs	r3, #3
 8002540:	e004      	b.n	800254c <HAL_GPIO_Init+0x204>
 8002542:	2302      	movs	r3, #2
 8002544:	e002      	b.n	800254c <HAL_GPIO_Init+0x204>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <HAL_GPIO_Init+0x204>
 800254a:	2300      	movs	r3, #0
 800254c:	69fa      	ldr	r2, [r7, #28]
 800254e:	f002 0203 	and.w	r2, r2, #3
 8002552:	0092      	lsls	r2, r2, #2
 8002554:	4093      	lsls	r3, r2
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800255c:	4935      	ldr	r1, [pc, #212]	; (8002634 <HAL_GPIO_Init+0x2ec>)
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	089b      	lsrs	r3, r3, #2
 8002562:	3302      	adds	r3, #2
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800256a:	4b38      	ldr	r3, [pc, #224]	; (800264c <HAL_GPIO_Init+0x304>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	43db      	mvns	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800258e:	4a2f      	ldr	r2, [pc, #188]	; (800264c <HAL_GPIO_Init+0x304>)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002594:	4b2d      	ldr	r3, [pc, #180]	; (800264c <HAL_GPIO_Init+0x304>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025b8:	4a24      	ldr	r2, [pc, #144]	; (800264c <HAL_GPIO_Init+0x304>)
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025be:	4b23      	ldr	r3, [pc, #140]	; (800264c <HAL_GPIO_Init+0x304>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025e2:	4a1a      	ldr	r2, [pc, #104]	; (800264c <HAL_GPIO_Init+0x304>)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025e8:	4b18      	ldr	r3, [pc, #96]	; (800264c <HAL_GPIO_Init+0x304>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800260c:	4a0f      	ldr	r2, [pc, #60]	; (800264c <HAL_GPIO_Init+0x304>)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3301      	adds	r3, #1
 8002616:	61fb      	str	r3, [r7, #28]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	2b0f      	cmp	r3, #15
 800261c:	f67f aea2 	bls.w	8002364 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002620:	bf00      	nop
 8002622:	bf00      	nop
 8002624:	3724      	adds	r7, #36	; 0x24
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40023800 	.word	0x40023800
 8002634:	40013800 	.word	0x40013800
 8002638:	40020000 	.word	0x40020000
 800263c:	40020400 	.word	0x40020400
 8002640:	40020800 	.word	0x40020800
 8002644:	40020c00 	.word	0x40020c00
 8002648:	40021000 	.word	0x40021000
 800264c:	40013c00 	.word	0x40013c00

08002650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	807b      	strh	r3, [r7, #2]
 800265c:	4613      	mov	r3, r2
 800265e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002660:	787b      	ldrb	r3, [r7, #1]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002666:	887a      	ldrh	r2, [r7, #2]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800266c:	e003      	b.n	8002676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800266e:	887b      	ldrh	r3, [r7, #2]
 8002670:	041a      	lsls	r2, r3, #16
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	619a      	str	r2, [r3, #24]
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002682:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002684:	b08f      	sub	sp, #60	; 0x3c
 8002686:	af0a      	add	r7, sp, #40	; 0x28
 8002688:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e10f      	b.n	80028b4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f006 f948 	bl	8008944 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2203      	movs	r2, #3
 80026b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d102      	bne.n	80026ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f002 fbc5 	bl	8004e62 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	603b      	str	r3, [r7, #0]
 80026de:	687e      	ldr	r6, [r7, #4]
 80026e0:	466d      	mov	r5, sp
 80026e2:	f106 0410 	add.w	r4, r6, #16
 80026e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80026f6:	1d33      	adds	r3, r6, #4
 80026f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026fa:	6838      	ldr	r0, [r7, #0]
 80026fc:	f002 fa9c 	bl	8004c38 <USB_CoreInit>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d005      	beq.n	8002712 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2202      	movs	r2, #2
 800270a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e0d0      	b.n	80028b4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2100      	movs	r1, #0
 8002718:	4618      	mov	r0, r3
 800271a:	f002 fbb3 	bl	8004e84 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800271e:	2300      	movs	r3, #0
 8002720:	73fb      	strb	r3, [r7, #15]
 8002722:	e04a      	b.n	80027ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002724:	7bfa      	ldrb	r2, [r7, #15]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4413      	add	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	333d      	adds	r3, #61	; 0x3d
 8002734:	2201      	movs	r2, #1
 8002736:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	333c      	adds	r3, #60	; 0x3c
 8002748:	7bfa      	ldrb	r2, [r7, #15]
 800274a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800274c:	7bfa      	ldrb	r2, [r7, #15]
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	b298      	uxth	r0, r3
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4413      	add	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	3344      	adds	r3, #68	; 0x44
 8002760:	4602      	mov	r2, r0
 8002762:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002764:	7bfa      	ldrb	r2, [r7, #15]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4413      	add	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	3340      	adds	r3, #64	; 0x40
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002778:	7bfa      	ldrb	r2, [r7, #15]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4413      	add	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	3348      	adds	r3, #72	; 0x48
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800278c:	7bfa      	ldrb	r2, [r7, #15]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4413      	add	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	334c      	adds	r3, #76	; 0x4c
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027a0:	7bfa      	ldrb	r2, [r7, #15]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	3354      	adds	r3, #84	; 0x54
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
 80027b6:	3301      	adds	r3, #1
 80027b8:	73fb      	strb	r3, [r7, #15]
 80027ba:	7bfa      	ldrb	r2, [r7, #15]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d3af      	bcc.n	8002724 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c4:	2300      	movs	r3, #0
 80027c6:	73fb      	strb	r3, [r7, #15]
 80027c8:	e044      	b.n	8002854 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027ca:	7bfa      	ldrb	r2, [r7, #15]
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4413      	add	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	440b      	add	r3, r1
 80027d8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027e0:	7bfa      	ldrb	r2, [r7, #15]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80027f2:	7bfa      	ldrb	r2, [r7, #15]
 80027f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027f6:	7bfa      	ldrb	r2, [r7, #15]
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	4613      	mov	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	4413      	add	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	440b      	add	r3, r1
 8002804:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800280c:	7bfa      	ldrb	r2, [r7, #15]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002822:	7bfa      	ldrb	r2, [r7, #15]
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4413      	add	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002838:	7bfa      	ldrb	r2, [r7, #15]
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800284e:	7bfb      	ldrb	r3, [r7, #15]
 8002850:	3301      	adds	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
 8002854:	7bfa      	ldrb	r2, [r7, #15]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	429a      	cmp	r2, r3
 800285c:	d3b5      	bcc.n	80027ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	687e      	ldr	r6, [r7, #4]
 8002866:	466d      	mov	r5, sp
 8002868:	f106 0410 	add.w	r4, r6, #16
 800286c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800286e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002872:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002874:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002878:	e885 0003 	stmia.w	r5, {r0, r1}
 800287c:	1d33      	adds	r3, r6, #4
 800287e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002880:	6838      	ldr	r0, [r7, #0]
 8002882:	f002 fb4b 	bl	8004f1c <USB_DevInit>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e00d      	b.n	80028b4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f003 fc9a 	bl	80061e6 <USB_DevDisconnect>

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_PCD_Start+0x1c>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e020      	b.n	800291a <HAL_PCD_Start+0x5e>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d109      	bne.n	80028fc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d005      	beq.n	80028fc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f002 fa9d 	bl	8004e40 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f003 fc4a 	bl	80061a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002922:	b590      	push	{r4, r7, lr}
 8002924:	b08d      	sub	sp, #52	; 0x34
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f003 fd08 	bl	800634e <USB_GetMode>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	f040 848a 	bne.w	800325a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f003 fc6c 	bl	8006228 <USB_ReadInterrupts>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 8480 	beq.w	8003258 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	0a1b      	lsrs	r3, r3, #8
 8002962:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f003 fc59 	bl	8006228 <USB_ReadInterrupts>
 8002976:	4603      	mov	r3, r0
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b02      	cmp	r3, #2
 800297e:	d107      	bne.n	8002990 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f002 0202 	and.w	r2, r2, #2
 800298e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f003 fc47 	bl	8006228 <USB_ReadInterrupts>
 800299a:	4603      	mov	r3, r0
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	2b10      	cmp	r3, #16
 80029a2:	d161      	bne.n	8002a68 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699a      	ldr	r2, [r3, #24]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0210 	bic.w	r2, r2, #16
 80029b2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	f003 020f 	and.w	r2, r3, #15
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	4413      	add	r3, r2
 80029d0:	3304      	adds	r3, #4
 80029d2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	0c5b      	lsrs	r3, r3, #17
 80029d8:	f003 030f 	and.w	r3, r3, #15
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d124      	bne.n	8002a2a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d035      	beq.n	8002a58 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	6a38      	ldr	r0, [r7, #32]
 8002a00:	f003 fa7e 	bl	8005f00 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	091b      	lsrs	r3, r3, #4
 8002a0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a10:	441a      	add	r2, r3
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	6a1a      	ldr	r2, [r3, #32]
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	091b      	lsrs	r3, r3, #4
 8002a1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a22:	441a      	add	r2, r3
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	621a      	str	r2, [r3, #32]
 8002a28:	e016      	b.n	8002a58 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	0c5b      	lsrs	r3, r3, #17
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	2b06      	cmp	r3, #6
 8002a34:	d110      	bne.n	8002a58 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a3c:	2208      	movs	r2, #8
 8002a3e:	4619      	mov	r1, r3
 8002a40:	6a38      	ldr	r0, [r7, #32]
 8002a42:	f003 fa5d 	bl	8005f00 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	6a1a      	ldr	r2, [r3, #32]
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a52:	441a      	add	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	699a      	ldr	r2, [r3, #24]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0210 	orr.w	r2, r2, #16
 8002a66:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f003 fbdb 	bl	8006228 <USB_ReadInterrupts>
 8002a72:	4603      	mov	r3, r0
 8002a74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a7c:	f040 80a7 	bne.w	8002bce <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f003 fbe0 	bl	800624e <USB_ReadDevAllOutEpInterrupt>
 8002a8e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a90:	e099      	b.n	8002bc6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 808e 	beq.w	8002bba <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f003 fc04 	bl	80062b6 <USB_ReadDevOutEPInterrupt>
 8002aae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00c      	beq.n	8002ad4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	2301      	movs	r3, #1
 8002aca:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002acc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fec2 	bl	8003858 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00c      	beq.n	8002af8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	015a      	lsls	r2, r3, #5
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aea:	461a      	mov	r2, r3
 8002aec:	2308      	movs	r3, #8
 8002aee:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002af0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 ff98 	bl	8003a28 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	f003 0310 	and.w	r3, r3, #16
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d008      	beq.n	8002b14 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	015a      	lsls	r2, r3, #5
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	4413      	add	r3, r2
 8002b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b0e:	461a      	mov	r2, r3
 8002b10:	2310      	movs	r3, #16
 8002b12:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d030      	beq.n	8002b80 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b26:	2b80      	cmp	r3, #128	; 0x80
 8002b28:	d109      	bne.n	8002b3e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	69fa      	ldr	r2, [r7, #28]
 8002b34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b3c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b40:	4613      	mov	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	4413      	add	r3, r2
 8002b50:	3304      	adds	r3, #4
 8002b52:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	78db      	ldrb	r3, [r3, #3]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d108      	bne.n	8002b6e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	4619      	mov	r1, r3
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f005 ffe7 	bl	8008b3c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	015a      	lsls	r2, r3, #5
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	4413      	add	r3, r2
 8002b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d008      	beq.n	8002b9c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b96:	461a      	mov	r2, r3
 8002b98:	2320      	movs	r3, #32
 8002b9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d009      	beq.n	8002bba <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	015a      	lsls	r2, r3, #5
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bb8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc2:	085b      	lsrs	r3, r3, #1
 8002bc4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f47f af62 	bne.w	8002a92 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f003 fb28 	bl	8006228 <USB_ReadInterrupts>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002be2:	f040 80db 	bne.w	8002d9c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f003 fb49 	bl	8006282 <USB_ReadDevAllInEpInterrupt>
 8002bf0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002bf6:	e0cd      	b.n	8002d94 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 80c2 	beq.w	8002d88 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f003 fb6f 	bl	80062f2 <USB_ReadDevInEPInterrupt>
 8002c14:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d057      	beq.n	8002cd0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	2201      	movs	r2, #1
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69f9      	ldr	r1, [r7, #28]
 8002c3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c40:	4013      	ands	r3, r2
 8002c42:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c50:	461a      	mov	r2, r3
 8002c52:	2301      	movs	r3, #1
 8002c54:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d132      	bne.n	8002cc4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c62:	4613      	mov	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	4413      	add	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	334c      	adds	r3, #76	; 0x4c
 8002c6e:	6819      	ldr	r1, [r3, #0]
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c74:	4613      	mov	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4403      	add	r3, r0
 8002c7e:	3348      	adds	r3, #72	; 0x48
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4419      	add	r1, r3
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c88:	4613      	mov	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4403      	add	r3, r0
 8002c92:	334c      	adds	r3, #76	; 0x4c
 8002c94:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d113      	bne.n	8002cc4 <HAL_PCD_IRQHandler+0x3a2>
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	3354      	adds	r3, #84	; 0x54
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d108      	bne.n	8002cc4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	f003 fb76 	bl	80063b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	4619      	mov	r1, r3
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f005 febb 	bl	8008a46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d008      	beq.n	8002cec <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	015a      	lsls	r2, r3, #5
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	2308      	movs	r3, #8
 8002cea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d008      	beq.n	8002d08 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	015a      	lsls	r2, r3, #5
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d02:	461a      	mov	r2, r3
 8002d04:	2310      	movs	r3, #16
 8002d06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d008      	beq.n	8002d24 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	015a      	lsls	r2, r3, #5
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d1e:	461a      	mov	r2, r3
 8002d20:	2340      	movs	r3, #64	; 0x40
 8002d22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d023      	beq.n	8002d76 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002d2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d30:	6a38      	ldr	r0, [r7, #32]
 8002d32:	f002 fa57 	bl	80051e4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d38:	4613      	mov	r3, r2
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	4413      	add	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	3338      	adds	r3, #56	; 0x38
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	4413      	add	r3, r2
 8002d46:	3304      	adds	r3, #4
 8002d48:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	78db      	ldrb	r3, [r3, #3]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d108      	bne.n	8002d64 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2200      	movs	r2, #0
 8002d56:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f005 fefe 	bl	8008b60 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	015a      	lsls	r2, r3, #5
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d70:	461a      	mov	r2, r3
 8002d72:	2302      	movs	r3, #2
 8002d74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fcdb 	bl	800373e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d90:	085b      	lsrs	r3, r3, #1
 8002d92:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f47f af2e 	bne.w	8002bf8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f003 fa41 	bl	8006228 <USB_ReadInterrupts>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002dac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002db0:	d122      	bne.n	8002df8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	69fa      	ldr	r2, [r7, #28]
 8002dbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dc0:	f023 0301 	bic.w	r3, r3, #1
 8002dc4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d108      	bne.n	8002de2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002dd8:	2100      	movs	r1, #0
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fec2 	bl	8003b64 <HAL_PCDEx_LPM_Callback>
 8002de0:	e002      	b.n	8002de8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f005 fe9c 	bl	8008b20 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002df6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f003 fa13 	bl	8006228 <USB_ReadInterrupts>
 8002e02:	4603      	mov	r3, r0
 8002e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e0c:	d112      	bne.n	8002e34 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d102      	bne.n	8002e24 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f005 fe58 	bl	8008ad4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002e32:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f003 f9f5 	bl	8006228 <USB_ReadInterrupts>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e48:	f040 80b7 	bne.w	8002fba <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	69fa      	ldr	r2, [r7, #28]
 8002e56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e5a:	f023 0301 	bic.w	r3, r3, #1
 8002e5e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2110      	movs	r1, #16
 8002e66:	4618      	mov	r0, r3
 8002e68:	f002 f9bc 	bl	80051e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e70:	e046      	b.n	8002f00 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e74:	015a      	lsls	r2, r3, #5
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e7e:	461a      	mov	r2, r3
 8002e80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e84:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e88:	015a      	lsls	r2, r3, #5
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e96:	0151      	lsls	r1, r2, #5
 8002e98:	69fa      	ldr	r2, [r7, #28]
 8002e9a:	440a      	add	r2, r1
 8002e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ea0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ea4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002eb8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eca:	0151      	lsls	r1, r2, #5
 8002ecc:	69fa      	ldr	r2, [r7, #28]
 8002ece:	440a      	add	r2, r1
 8002ed0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ed4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ed8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002edc:	015a      	lsls	r2, r3, #5
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eea:	0151      	lsls	r1, r2, #5
 8002eec:	69fa      	ldr	r2, [r7, #28]
 8002eee:	440a      	add	r2, r1
 8002ef0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ef4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ef8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efc:	3301      	adds	r3, #1
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d3b3      	bcc.n	8002e72 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	69fa      	ldr	r2, [r7, #28]
 8002f14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f18:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002f1c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d016      	beq.n	8002f54 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f36:	f043 030b 	orr.w	r3, r3, #11
 8002f3a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f46:	69fa      	ldr	r2, [r7, #28]
 8002f48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f4c:	f043 030b 	orr.w	r3, r3, #11
 8002f50:	6453      	str	r3, [r2, #68]	; 0x44
 8002f52:	e015      	b.n	8002f80 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	69fa      	ldr	r2, [r7, #28]
 8002f5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f66:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002f6a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	69fa      	ldr	r2, [r7, #28]
 8002f76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f7a:	f043 030b 	orr.w	r3, r3, #11
 8002f7e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	69fa      	ldr	r2, [r7, #28]
 8002f8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f8e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002f92:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6818      	ldr	r0, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	f003 fa03 	bl	80063b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695a      	ldr	r2, [r3, #20]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002fb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f003 f932 	bl	8006228 <USB_ReadInterrupts>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fce:	d124      	bne.n	800301a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f003 f9c8 	bl	800636a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f002 f97d 	bl	80052de <USB_GetDevSpeed>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681c      	ldr	r4, [r3, #0]
 8002ff0:	f001 f9f4 	bl	80043dc <HAL_RCC_GetHCLKFreq>
 8002ff4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4620      	mov	r0, r4
 8003000:	f001 fe7c 	bl	8004cfc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f005 fd46 	bl	8008a96 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695a      	ldr	r2, [r3, #20]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003018:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f003 f902 	bl	8006228 <USB_ReadInterrupts>
 8003024:	4603      	mov	r3, r0
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b08      	cmp	r3, #8
 800302c:	d10a      	bne.n	8003044 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f005 fd23 	bl	8008a7a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f002 0208 	and.w	r2, r2, #8
 8003042:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f003 f8ed 	bl	8006228 <USB_ReadInterrupts>
 800304e:	4603      	mov	r3, r0
 8003050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003054:	2b80      	cmp	r3, #128	; 0x80
 8003056:	d122      	bne.n	800309e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003064:	2301      	movs	r3, #1
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
 8003068:	e014      	b.n	8003094 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306e:	4613      	mov	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4413      	add	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d105      	bne.n	800308e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	b2db      	uxtb	r3, r3
 8003086:	4619      	mov	r1, r3
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 fb27 	bl	80036dc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	3301      	adds	r3, #1
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800309a:	429a      	cmp	r2, r3
 800309c:	d3e5      	bcc.n	800306a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f003 f8c0 	bl	8006228 <USB_ReadInterrupts>
 80030a8:	4603      	mov	r3, r0
 80030aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030b2:	d13b      	bne.n	800312c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030b4:	2301      	movs	r3, #1
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
 80030b8:	e02b      	b.n	8003112 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	015a      	lsls	r2, r3, #5
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	4413      	add	r3, r2
 80030c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ce:	4613      	mov	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	3340      	adds	r3, #64	; 0x40
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d115      	bne.n	800310c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80030e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	da12      	bge.n	800310c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ea:	4613      	mov	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	333f      	adds	r3, #63	; 0x3f
 80030f6:	2201      	movs	r2, #1
 80030f8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003102:	b2db      	uxtb	r3, r3
 8003104:	4619      	mov	r1, r3
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fae8 	bl	80036dc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	3301      	adds	r3, #1
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003118:	429a      	cmp	r2, r3
 800311a:	d3ce      	bcc.n	80030ba <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800312a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f003 f879 	bl	8006228 <USB_ReadInterrupts>
 8003136:	4603      	mov	r3, r0
 8003138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800313c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003140:	d155      	bne.n	80031ee <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003142:	2301      	movs	r3, #1
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
 8003146:	e045      	b.n	80031d4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	4413      	add	r3, r2
 8003150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800315c:	4613      	mov	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4413      	add	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d12e      	bne.n	80031ce <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003170:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003172:	2b00      	cmp	r3, #0
 8003174:	da2b      	bge.n	80031ce <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003182:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003186:	429a      	cmp	r2, r3
 8003188:	d121      	bne.n	80031ce <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800318e:	4613      	mov	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800319c:	2201      	movs	r2, #1
 800319e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10a      	bne.n	80031ce <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	69fa      	ldr	r2, [r7, #28]
 80031c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031ca:	6053      	str	r3, [r2, #4]
            break;
 80031cc:	e007      	b.n	80031de <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	3301      	adds	r3, #1
 80031d2:	627b      	str	r3, [r7, #36]	; 0x24
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031da:	429a      	cmp	r2, r3
 80031dc:	d3b4      	bcc.n	8003148 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695a      	ldr	r2, [r3, #20]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80031ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f003 f818 	bl	8006228 <USB_ReadInterrupts>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80031fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003202:	d10a      	bne.n	800321a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f005 fcbd 	bl	8008b84 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695a      	ldr	r2, [r3, #20]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003218:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f003 f802 	bl	8006228 <USB_ReadInterrupts>
 8003224:	4603      	mov	r3, r0
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b04      	cmp	r3, #4
 800322c:	d115      	bne.n	800325a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f005 fcad 	bl	8008ba0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6859      	ldr	r1, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]
 8003256:	e000      	b.n	800325a <HAL_PCD_IRQHandler+0x938>
      return;
 8003258:	bf00      	nop
    }
  }
}
 800325a:	3734      	adds	r7, #52	; 0x34
 800325c:	46bd      	mov	sp, r7
 800325e:	bd90      	pop	{r4, r7, pc}

08003260 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <HAL_PCD_SetAddress+0x1a>
 8003276:	2302      	movs	r3, #2
 8003278:	e013      	b.n	80032a2 <HAL_PCD_SetAddress+0x42>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	78fa      	ldrb	r2, [r7, #3]
 8003286:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f002 ff60 	bl	8006158 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b084      	sub	sp, #16
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
 80032b2:	4608      	mov	r0, r1
 80032b4:	4611      	mov	r1, r2
 80032b6:	461a      	mov	r2, r3
 80032b8:	4603      	mov	r3, r0
 80032ba:	70fb      	strb	r3, [r7, #3]
 80032bc:	460b      	mov	r3, r1
 80032be:	803b      	strh	r3, [r7, #0]
 80032c0:	4613      	mov	r3, r2
 80032c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80032c4:	2300      	movs	r3, #0
 80032c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	da0f      	bge.n	80032f0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032d0:	78fb      	ldrb	r3, [r7, #3]
 80032d2:	f003 020f 	and.w	r2, r3, #15
 80032d6:	4613      	mov	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	3338      	adds	r3, #56	; 0x38
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	4413      	add	r3, r2
 80032e4:	3304      	adds	r3, #4
 80032e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2201      	movs	r2, #1
 80032ec:	705a      	strb	r2, [r3, #1]
 80032ee:	e00f      	b.n	8003310 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032f0:	78fb      	ldrb	r3, [r7, #3]
 80032f2:	f003 020f 	and.w	r2, r3, #15
 80032f6:	4613      	mov	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	4413      	add	r3, r2
 8003306:	3304      	adds	r3, #4
 8003308:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	b2da      	uxtb	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800331c:	883a      	ldrh	r2, [r7, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	78ba      	ldrb	r2, [r7, #2]
 8003326:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	785b      	ldrb	r3, [r3, #1]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d004      	beq.n	800333a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800333a:	78bb      	ldrb	r3, [r7, #2]
 800333c:	2b02      	cmp	r3, #2
 800333e:	d102      	bne.n	8003346 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_PCD_EP_Open+0xaa>
 8003350:	2302      	movs	r3, #2
 8003352:	e00e      	b.n	8003372 <HAL_PCD_EP_Open+0xc8>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68f9      	ldr	r1, [r7, #12]
 8003362:	4618      	mov	r0, r3
 8003364:	f001 ffe0 	bl	8005328 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003370:	7afb      	ldrb	r3, [r7, #11]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b084      	sub	sp, #16
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
 8003382:	460b      	mov	r3, r1
 8003384:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003386:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800338a:	2b00      	cmp	r3, #0
 800338c:	da0f      	bge.n	80033ae <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800338e:	78fb      	ldrb	r3, [r7, #3]
 8003390:	f003 020f 	and.w	r2, r3, #15
 8003394:	4613      	mov	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	3338      	adds	r3, #56	; 0x38
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	4413      	add	r3, r2
 80033a2:	3304      	adds	r3, #4
 80033a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2201      	movs	r2, #1
 80033aa:	705a      	strb	r2, [r3, #1]
 80033ac:	e00f      	b.n	80033ce <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033ae:	78fb      	ldrb	r3, [r7, #3]
 80033b0:	f003 020f 	and.w	r2, r3, #15
 80033b4:	4613      	mov	r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4413      	add	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	4413      	add	r3, r2
 80033c4:	3304      	adds	r3, #4
 80033c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80033ce:	78fb      	ldrb	r3, [r7, #3]
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_PCD_EP_Close+0x6e>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e00e      	b.n	8003406 <HAL_PCD_EP_Close+0x8c>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68f9      	ldr	r1, [r7, #12]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f002 f81e 	bl	8005438 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b086      	sub	sp, #24
 8003412:	af00      	add	r7, sp, #0
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	607a      	str	r2, [r7, #4]
 8003418:	603b      	str	r3, [r7, #0]
 800341a:	460b      	mov	r3, r1
 800341c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800341e:	7afb      	ldrb	r3, [r7, #11]
 8003420:	f003 020f 	and.w	r2, r3, #15
 8003424:	4613      	mov	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4413      	add	r3, r2
 8003434:	3304      	adds	r3, #4
 8003436:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2200      	movs	r2, #0
 8003448:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2200      	movs	r2, #0
 800344e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003450:	7afb      	ldrb	r3, [r7, #11]
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	b2da      	uxtb	r2, r3
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d102      	bne.n	800346a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800346a:	7afb      	ldrb	r3, [r7, #11]
 800346c:	f003 030f 	and.w	r3, r3, #15
 8003470:	2b00      	cmp	r3, #0
 8003472:	d109      	bne.n	8003488 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	b2db      	uxtb	r3, r3
 800347e:	461a      	mov	r2, r3
 8003480:	6979      	ldr	r1, [r7, #20]
 8003482:	f002 fafd 	bl	8005a80 <USB_EP0StartXfer>
 8003486:	e008      	b.n	800349a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	b2db      	uxtb	r3, r3
 8003492:	461a      	mov	r2, r3
 8003494:	6979      	ldr	r1, [r7, #20]
 8003496:	f002 f8ab 	bl	80055f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	460b      	mov	r3, r1
 80034ae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80034b0:	78fb      	ldrb	r3, [r7, #3]
 80034b2:	f003 020f 	and.w	r2, r3, #15
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4413      	add	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80034c6:	681b      	ldr	r3, [r3, #0]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	607a      	str	r2, [r7, #4]
 80034de:	603b      	str	r3, [r7, #0]
 80034e0:	460b      	mov	r3, r1
 80034e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034e4:	7afb      	ldrb	r3, [r7, #11]
 80034e6:	f003 020f 	and.w	r2, r3, #15
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	3338      	adds	r3, #56	; 0x38
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	4413      	add	r3, r2
 80034f8:	3304      	adds	r3, #4
 80034fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	2200      	movs	r2, #0
 800350c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2201      	movs	r2, #1
 8003512:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003514:	7afb      	ldrb	r3, [r7, #11]
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	b2da      	uxtb	r2, r3
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d102      	bne.n	800352e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800352e:	7afb      	ldrb	r3, [r7, #11]
 8003530:	f003 030f 	and.w	r3, r3, #15
 8003534:	2b00      	cmp	r3, #0
 8003536:	d109      	bne.n	800354c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6818      	ldr	r0, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	461a      	mov	r2, r3
 8003544:	6979      	ldr	r1, [r7, #20]
 8003546:	f002 fa9b 	bl	8005a80 <USB_EP0StartXfer>
 800354a:	e008      	b.n	800355e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6818      	ldr	r0, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	6979      	ldr	r1, [r7, #20]
 800355a:	f002 f849 	bl	80055f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	460b      	mov	r3, r1
 8003572:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003574:	78fb      	ldrb	r3, [r7, #3]
 8003576:	f003 020f 	and.w	r2, r3, #15
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	429a      	cmp	r2, r3
 8003580:	d901      	bls.n	8003586 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e050      	b.n	8003628 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003586:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800358a:	2b00      	cmp	r3, #0
 800358c:	da0f      	bge.n	80035ae <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800358e:	78fb      	ldrb	r3, [r7, #3]
 8003590:	f003 020f 	and.w	r2, r3, #15
 8003594:	4613      	mov	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	3338      	adds	r3, #56	; 0x38
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	4413      	add	r3, r2
 80035a2:	3304      	adds	r3, #4
 80035a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2201      	movs	r2, #1
 80035aa:	705a      	strb	r2, [r3, #1]
 80035ac:	e00d      	b.n	80035ca <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035ae:	78fa      	ldrb	r2, [r7, #3]
 80035b0:	4613      	mov	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4413      	add	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	4413      	add	r3, r2
 80035c0:	3304      	adds	r3, #4
 80035c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2201      	movs	r2, #1
 80035ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035d0:	78fb      	ldrb	r3, [r7, #3]
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_PCD_EP_SetStall+0x82>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e01e      	b.n	8003628 <HAL_PCD_EP_SetStall+0xc0>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68f9      	ldr	r1, [r7, #12]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f002 fcd9 	bl	8005fb0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	f003 030f 	and.w	r3, r3, #15
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6818      	ldr	r0, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	b2d9      	uxtb	r1, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003618:	461a      	mov	r2, r3
 800361a:	f002 fec9 	bl	80063b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	460b      	mov	r3, r1
 800363a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800363c:	78fb      	ldrb	r3, [r7, #3]
 800363e:	f003 020f 	and.w	r2, r3, #15
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	429a      	cmp	r2, r3
 8003648:	d901      	bls.n	800364e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e042      	b.n	80036d4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800364e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003652:	2b00      	cmp	r3, #0
 8003654:	da0f      	bge.n	8003676 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003656:	78fb      	ldrb	r3, [r7, #3]
 8003658:	f003 020f 	and.w	r2, r3, #15
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	3338      	adds	r3, #56	; 0x38
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	4413      	add	r3, r2
 800366a:	3304      	adds	r3, #4
 800366c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2201      	movs	r2, #1
 8003672:	705a      	strb	r2, [r3, #1]
 8003674:	e00f      	b.n	8003696 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003676:	78fb      	ldrb	r3, [r7, #3]
 8003678:	f003 020f 	and.w	r2, r3, #15
 800367c:	4613      	mov	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	4413      	add	r3, r2
 800368c:	3304      	adds	r3, #4
 800368e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d101      	bne.n	80036b6 <HAL_PCD_EP_ClrStall+0x86>
 80036b2:	2302      	movs	r3, #2
 80036b4:	e00e      	b.n	80036d4 <HAL_PCD_EP_ClrStall+0xa4>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68f9      	ldr	r1, [r7, #12]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f002 fce1 	bl	800608c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80036e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	da0c      	bge.n	800370a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036f0:	78fb      	ldrb	r3, [r7, #3]
 80036f2:	f003 020f 	and.w	r2, r3, #15
 80036f6:	4613      	mov	r3, r2
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	4413      	add	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	3338      	adds	r3, #56	; 0x38
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	4413      	add	r3, r2
 8003704:	3304      	adds	r3, #4
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	e00c      	b.n	8003724 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	f003 020f 	and.w	r2, r3, #15
 8003710:	4613      	mov	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	4413      	add	r3, r2
 8003720:	3304      	adds	r3, #4
 8003722:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68f9      	ldr	r1, [r7, #12]
 800372a:	4618      	mov	r0, r3
 800372c:	f002 fb00 	bl	8005d30 <USB_EPStopXfer>
 8003730:	4603      	mov	r3, r0
 8003732:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003734:	7afb      	ldrb	r3, [r7, #11]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b08a      	sub	sp, #40	; 0x28
 8003742:	af02      	add	r7, sp, #8
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	4613      	mov	r3, r2
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	4413      	add	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	3338      	adds	r3, #56	; 0x38
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	4413      	add	r3, r2
 8003762:	3304      	adds	r3, #4
 8003764:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6a1a      	ldr	r2, [r3, #32]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	429a      	cmp	r2, r3
 8003770:	d901      	bls.n	8003776 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e06c      	b.n	8003850 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	699a      	ldr	r2, [r3, #24]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	69fa      	ldr	r2, [r7, #28]
 8003788:	429a      	cmp	r2, r3
 800378a:	d902      	bls.n	8003792 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	3303      	adds	r3, #3
 8003796:	089b      	lsrs	r3, r3, #2
 8003798:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800379a:	e02b      	b.n	80037f4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	699a      	ldr	r2, [r3, #24]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	69fa      	ldr	r2, [r7, #28]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d902      	bls.n	80037b8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	3303      	adds	r3, #3
 80037bc:	089b      	lsrs	r3, r3, #2
 80037be:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6919      	ldr	r1, [r3, #16]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	4603      	mov	r3, r0
 80037d6:	6978      	ldr	r0, [r7, #20]
 80037d8:	f002 fb54 	bl	8005e84 <USB_WritePacket>

    ep->xfer_buff  += len;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	441a      	add	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a1a      	ldr	r2, [r3, #32]
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	441a      	add	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	429a      	cmp	r2, r3
 8003808:	d809      	bhi.n	800381e <PCD_WriteEmptyTxFifo+0xe0>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6a1a      	ldr	r2, [r3, #32]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003812:	429a      	cmp	r2, r3
 8003814:	d203      	bcs.n	800381e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1be      	bne.n	800379c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	699a      	ldr	r2, [r3, #24]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	429a      	cmp	r2, r3
 8003828:	d811      	bhi.n	800384e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	f003 030f 	and.w	r3, r3, #15
 8003830:	2201      	movs	r2, #1
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800383e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	43db      	mvns	r3, r3
 8003844:	6939      	ldr	r1, [r7, #16]
 8003846:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800384a:	4013      	ands	r3, r2
 800384c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3720      	adds	r7, #32
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	333c      	adds	r3, #60	; 0x3c
 8003870:	3304      	adds	r3, #4
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	4413      	add	r3, r2
 800387e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d17b      	bne.n	8003986 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	2b00      	cmp	r3, #0
 8003896:	d015      	beq.n	80038c4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	4a61      	ldr	r2, [pc, #388]	; (8003a20 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	f240 80b9 	bls.w	8003a14 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 80b3 	beq.w	8003a14 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	015a      	lsls	r2, r3, #5
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ba:	461a      	mov	r2, r3
 80038bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038c0:	6093      	str	r3, [r2, #8]
 80038c2:	e0a7      	b.n	8003a14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d009      	beq.n	80038e2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038da:	461a      	mov	r2, r3
 80038dc:	2320      	movs	r3, #32
 80038de:	6093      	str	r3, [r2, #8]
 80038e0:	e098      	b.n	8003a14 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f040 8093 	bne.w	8003a14 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	4a4b      	ldr	r2, [pc, #300]	; (8003a20 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d90f      	bls.n	8003916 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00a      	beq.n	8003916 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390c:	461a      	mov	r2, r3
 800390e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003912:	6093      	str	r3, [r2, #8]
 8003914:	e07e      	b.n	8003a14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	4613      	mov	r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	4413      	add	r3, r2
 8003928:	3304      	adds	r3, #4
 800392a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	69da      	ldr	r2, [r3, #28]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	0159      	lsls	r1, r3, #5
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	440b      	add	r3, r1
 8003938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003942:	1ad2      	subs	r2, r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d114      	bne.n	8003978 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d109      	bne.n	800396a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003960:	461a      	mov	r2, r3
 8003962:	2101      	movs	r1, #1
 8003964:	f002 fd24 	bl	80063b0 <USB_EP0_OutStart>
 8003968:	e006      	b.n	8003978 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	691a      	ldr	r2, [r3, #16]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	441a      	add	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	4619      	mov	r1, r3
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f005 f846 	bl	8008a10 <HAL_PCD_DataOutStageCallback>
 8003984:	e046      	b.n	8003a14 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	4a26      	ldr	r2, [pc, #152]	; (8003a24 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d124      	bne.n	80039d8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00a      	beq.n	80039ae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a4:	461a      	mov	r2, r3
 80039a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039aa:	6093      	str	r3, [r2, #8]
 80039ac:	e032      	b.n	8003a14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f003 0320 	and.w	r3, r3, #32
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c4:	461a      	mov	r2, r3
 80039c6:	2320      	movs	r3, #32
 80039c8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	4619      	mov	r1, r3
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f005 f81d 	bl	8008a10 <HAL_PCD_DataOutStageCallback>
 80039d6:	e01d      	b.n	8003a14 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d114      	bne.n	8003a08 <PCD_EP_OutXfrComplete_int+0x1b0>
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	4613      	mov	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	440b      	add	r3, r1
 80039ec:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d108      	bne.n	8003a08 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a00:	461a      	mov	r2, r3
 8003a02:	2100      	movs	r1, #0
 8003a04:	f002 fcd4 	bl	80063b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f004 fffe 	bl	8008a10 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3720      	adds	r7, #32
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	4f54300a 	.word	0x4f54300a
 8003a24:	4f54310a 	.word	0x4f54310a

08003a28 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	333c      	adds	r3, #60	; 0x3c
 8003a40:	3304      	adds	r3, #4
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4a15      	ldr	r2, [pc, #84]	; (8003ab0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d90e      	bls.n	8003a7c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d009      	beq.n	8003a7c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a74:	461a      	mov	r2, r3
 8003a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a7a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f004 ffb5 	bl	80089ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4a0a      	ldr	r2, [pc, #40]	; (8003ab0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d90c      	bls.n	8003aa4 <PCD_EP_OutSetupPacket_int+0x7c>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d108      	bne.n	8003aa4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	f002 fc86 	bl	80063b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	4f54300a 	.word	0x4f54300a

08003ab4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	70fb      	strb	r3, [r7, #3]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003acc:	78fb      	ldrb	r3, [r7, #3]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d107      	bne.n	8003ae2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ad2:	883b      	ldrh	r3, [r7, #0]
 8003ad4:	0419      	lsls	r1, r3, #16
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	629a      	str	r2, [r3, #40]	; 0x28
 8003ae0:	e028      	b.n	8003b34 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae8:	0c1b      	lsrs	r3, r3, #16
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	4413      	add	r3, r2
 8003aee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003af0:	2300      	movs	r3, #0
 8003af2:	73fb      	strb	r3, [r7, #15]
 8003af4:	e00d      	b.n	8003b12 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
 8003afc:	3340      	adds	r3, #64	; 0x40
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	0c1b      	lsrs	r3, r3, #16
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	4413      	add	r3, r2
 8003b0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	73fb      	strb	r3, [r7, #15]
 8003b12:	7bfa      	ldrb	r2, [r7, #15]
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d3ec      	bcc.n	8003af6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b1c:	883b      	ldrh	r3, [r7, #0]
 8003b1e:	0418      	lsls	r0, r3, #16
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6819      	ldr	r1, [r3, #0]
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	4302      	orrs	r2, r0
 8003b2c:	3340      	adds	r3, #64	; 0x40
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	887a      	ldrh	r2, [r7, #2]
 8003b54:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e267      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d075      	beq.n	8003c86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b9a:	4b88      	ldr	r3, [pc, #544]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d00c      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ba6:	4b85      	ldr	r3, [pc, #532]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d112      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bb2:	4b82      	ldr	r3, [pc, #520]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bbe:	d10b      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc0:	4b7e      	ldr	r3, [pc, #504]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d05b      	beq.n	8003c84 <HAL_RCC_OscConfig+0x108>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d157      	bne.n	8003c84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e242      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be0:	d106      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x74>
 8003be2:	4b76      	ldr	r3, [pc, #472]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a75      	ldr	r2, [pc, #468]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	e01d      	b.n	8003c2c <HAL_RCC_OscConfig+0xb0>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf8:	d10c      	bne.n	8003c14 <HAL_RCC_OscConfig+0x98>
 8003bfa:	4b70      	ldr	r3, [pc, #448]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a6f      	ldr	r2, [pc, #444]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	4b6d      	ldr	r3, [pc, #436]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a6c      	ldr	r2, [pc, #432]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	e00b      	b.n	8003c2c <HAL_RCC_OscConfig+0xb0>
 8003c14:	4b69      	ldr	r3, [pc, #420]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a68      	ldr	r2, [pc, #416]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	4b66      	ldr	r3, [pc, #408]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a65      	ldr	r2, [pc, #404]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d013      	beq.n	8003c5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c34:	f7fd ff3a 	bl	8001aac <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c3c:	f7fd ff36 	bl	8001aac <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b64      	cmp	r3, #100	; 0x64
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e207      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4e:	4b5b      	ldr	r3, [pc, #364]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0xc0>
 8003c5a:	e014      	b.n	8003c86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5c:	f7fd ff26 	bl	8001aac <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c64:	f7fd ff22 	bl	8001aac <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b64      	cmp	r3, #100	; 0x64
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e1f3      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c76:	4b51      	ldr	r3, [pc, #324]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0xe8>
 8003c82:	e000      	b.n	8003c86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d063      	beq.n	8003d5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c92:	4b4a      	ldr	r3, [pc, #296]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00b      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c9e:	4b47      	ldr	r3, [pc, #284]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d11c      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003caa:	4b44      	ldr	r3, [pc, #272]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d116      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cb6:	4b41      	ldr	r3, [pc, #260]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d005      	beq.n	8003cce <HAL_RCC_OscConfig+0x152>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d001      	beq.n	8003cce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e1c7      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cce:	4b3b      	ldr	r3, [pc, #236]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	4937      	ldr	r1, [pc, #220]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ce2:	e03a      	b.n	8003d5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d020      	beq.n	8003d2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cec:	4b34      	ldr	r3, [pc, #208]	; (8003dc0 <HAL_RCC_OscConfig+0x244>)
 8003cee:	2201      	movs	r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf2:	f7fd fedb 	bl	8001aac <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cfa:	f7fd fed7 	bl	8001aac <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e1a8      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0c:	4b2b      	ldr	r3, [pc, #172]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f0      	beq.n	8003cfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d18:	4b28      	ldr	r3, [pc, #160]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	4925      	ldr	r1, [pc, #148]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	600b      	str	r3, [r1, #0]
 8003d2c:	e015      	b.n	8003d5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d2e:	4b24      	ldr	r3, [pc, #144]	; (8003dc0 <HAL_RCC_OscConfig+0x244>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d34:	f7fd feba 	bl	8001aac <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d3c:	f7fd feb6 	bl	8001aac <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e187      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4e:	4b1b      	ldr	r3, [pc, #108]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f0      	bne.n	8003d3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d036      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d016      	beq.n	8003d9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d6e:	4b15      	ldr	r3, [pc, #84]	; (8003dc4 <HAL_RCC_OscConfig+0x248>)
 8003d70:	2201      	movs	r2, #1
 8003d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d74:	f7fd fe9a 	bl	8001aac <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d7c:	f7fd fe96 	bl	8001aac <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e167      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8e:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0f0      	beq.n	8003d7c <HAL_RCC_OscConfig+0x200>
 8003d9a:	e01b      	b.n	8003dd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d9c:	4b09      	ldr	r3, [pc, #36]	; (8003dc4 <HAL_RCC_OscConfig+0x248>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da2:	f7fd fe83 	bl	8001aac <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da8:	e00e      	b.n	8003dc8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003daa:	f7fd fe7f 	bl	8001aac <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d907      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e150      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	42470000 	.word	0x42470000
 8003dc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc8:	4b88      	ldr	r3, [pc, #544]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1ea      	bne.n	8003daa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 8097 	beq.w	8003f10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de2:	2300      	movs	r3, #0
 8003de4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003de6:	4b81      	ldr	r3, [pc, #516]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10f      	bne.n	8003e12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df2:	2300      	movs	r3, #0
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	4b7d      	ldr	r3, [pc, #500]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	4a7c      	ldr	r2, [pc, #496]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e00:	6413      	str	r3, [r2, #64]	; 0x40
 8003e02:	4b7a      	ldr	r3, [pc, #488]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	60bb      	str	r3, [r7, #8]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e12:	4b77      	ldr	r3, [pc, #476]	; (8003ff0 <HAL_RCC_OscConfig+0x474>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d118      	bne.n	8003e50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e1e:	4b74      	ldr	r3, [pc, #464]	; (8003ff0 <HAL_RCC_OscConfig+0x474>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a73      	ldr	r2, [pc, #460]	; (8003ff0 <HAL_RCC_OscConfig+0x474>)
 8003e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e2a:	f7fd fe3f 	bl	8001aac <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e30:	e008      	b.n	8003e44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e32:	f7fd fe3b 	bl	8001aac <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e10c      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e44:	4b6a      	ldr	r3, [pc, #424]	; (8003ff0 <HAL_RCC_OscConfig+0x474>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0f0      	beq.n	8003e32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d106      	bne.n	8003e66 <HAL_RCC_OscConfig+0x2ea>
 8003e58:	4b64      	ldr	r3, [pc, #400]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5c:	4a63      	ldr	r2, [pc, #396]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	6713      	str	r3, [r2, #112]	; 0x70
 8003e64:	e01c      	b.n	8003ea0 <HAL_RCC_OscConfig+0x324>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2b05      	cmp	r3, #5
 8003e6c:	d10c      	bne.n	8003e88 <HAL_RCC_OscConfig+0x30c>
 8003e6e:	4b5f      	ldr	r3, [pc, #380]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e72:	4a5e      	ldr	r2, [pc, #376]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e74:	f043 0304 	orr.w	r3, r3, #4
 8003e78:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7a:	4b5c      	ldr	r3, [pc, #368]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7e:	4a5b      	ldr	r2, [pc, #364]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	6713      	str	r3, [r2, #112]	; 0x70
 8003e86:	e00b      	b.n	8003ea0 <HAL_RCC_OscConfig+0x324>
 8003e88:	4b58      	ldr	r3, [pc, #352]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8c:	4a57      	ldr	r2, [pc, #348]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e8e:	f023 0301 	bic.w	r3, r3, #1
 8003e92:	6713      	str	r3, [r2, #112]	; 0x70
 8003e94:	4b55      	ldr	r3, [pc, #340]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e98:	4a54      	ldr	r2, [pc, #336]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e9a:	f023 0304 	bic.w	r3, r3, #4
 8003e9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d015      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea8:	f7fd fe00 	bl	8001aac <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eae:	e00a      	b.n	8003ec6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eb0:	f7fd fdfc 	bl	8001aac <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e0cb      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec6:	4b49      	ldr	r3, [pc, #292]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0ee      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x334>
 8003ed2:	e014      	b.n	8003efe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed4:	f7fd fdea 	bl	8001aac <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eda:	e00a      	b.n	8003ef2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003edc:	f7fd fde6 	bl	8001aac <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e0b5      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef2:	4b3e      	ldr	r3, [pc, #248]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1ee      	bne.n	8003edc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003efe:	7dfb      	ldrb	r3, [r7, #23]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d105      	bne.n	8003f10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f04:	4b39      	ldr	r3, [pc, #228]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	4a38      	ldr	r2, [pc, #224]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003f0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 80a1 	beq.w	800405c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f1a:	4b34      	ldr	r3, [pc, #208]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 030c 	and.w	r3, r3, #12
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d05c      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d141      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2e:	4b31      	ldr	r3, [pc, #196]	; (8003ff4 <HAL_RCC_OscConfig+0x478>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f34:	f7fd fdba 	bl	8001aac <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f3c:	f7fd fdb6 	bl	8001aac <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e087      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4e:	4b27      	ldr	r3, [pc, #156]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69da      	ldr	r2, [r3, #28]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	019b      	lsls	r3, r3, #6
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f70:	085b      	lsrs	r3, r3, #1
 8003f72:	3b01      	subs	r3, #1
 8003f74:	041b      	lsls	r3, r3, #16
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	061b      	lsls	r3, r3, #24
 8003f7e:	491b      	ldr	r1, [pc, #108]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f84:	4b1b      	ldr	r3, [pc, #108]	; (8003ff4 <HAL_RCC_OscConfig+0x478>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8a:	f7fd fd8f 	bl	8001aac <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f92:	f7fd fd8b 	bl	8001aac <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e05c      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa4:	4b11      	ldr	r3, [pc, #68]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0f0      	beq.n	8003f92 <HAL_RCC_OscConfig+0x416>
 8003fb0:	e054      	b.n	800405c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb2:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <HAL_RCC_OscConfig+0x478>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb8:	f7fd fd78 	bl	8001aac <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fc0:	f7fd fd74 	bl	8001aac <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e045      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd2:	4b06      	ldr	r3, [pc, #24]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f0      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x444>
 8003fde:	e03d      	b.n	800405c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d107      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e038      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	40007000 	.word	0x40007000
 8003ff4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ff8:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <HAL_RCC_OscConfig+0x4ec>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d028      	beq.n	8004058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004010:	429a      	cmp	r2, r3
 8004012:	d121      	bne.n	8004058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401e:	429a      	cmp	r2, r3
 8004020:	d11a      	bne.n	8004058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004028:	4013      	ands	r3, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800402e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004030:	4293      	cmp	r3, r2
 8004032:	d111      	bne.n	8004058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403e:	085b      	lsrs	r3, r3, #1
 8004040:	3b01      	subs	r3, #1
 8004042:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004044:	429a      	cmp	r2, r3
 8004046:	d107      	bne.n	8004058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004052:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004054:	429a      	cmp	r2, r3
 8004056:	d001      	beq.n	800405c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e000      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40023800 	.word	0x40023800

0800406c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e0cc      	b.n	800421a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004080:	4b68      	ldr	r3, [pc, #416]	; (8004224 <HAL_RCC_ClockConfig+0x1b8>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	d90c      	bls.n	80040a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408e:	4b65      	ldr	r3, [pc, #404]	; (8004224 <HAL_RCC_ClockConfig+0x1b8>)
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004096:	4b63      	ldr	r3, [pc, #396]	; (8004224 <HAL_RCC_ClockConfig+0x1b8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d001      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e0b8      	b.n	800421a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d020      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040c0:	4b59      	ldr	r3, [pc, #356]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	4a58      	ldr	r2, [pc, #352]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040d8:	4b53      	ldr	r3, [pc, #332]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	4a52      	ldr	r2, [pc, #328]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e4:	4b50      	ldr	r3, [pc, #320]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	494d      	ldr	r1, [pc, #308]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d044      	beq.n	800418c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d107      	bne.n	800411a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410a:	4b47      	ldr	r3, [pc, #284]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d119      	bne.n	800414a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e07f      	b.n	800421a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b02      	cmp	r3, #2
 8004120:	d003      	beq.n	800412a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004126:	2b03      	cmp	r3, #3
 8004128:	d107      	bne.n	800413a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800412a:	4b3f      	ldr	r3, [pc, #252]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d109      	bne.n	800414a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e06f      	b.n	800421a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800413a:	4b3b      	ldr	r3, [pc, #236]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e067      	b.n	800421a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800414a:	4b37      	ldr	r3, [pc, #220]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f023 0203 	bic.w	r2, r3, #3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	4934      	ldr	r1, [pc, #208]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 8004158:	4313      	orrs	r3, r2
 800415a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800415c:	f7fd fca6 	bl	8001aac <HAL_GetTick>
 8004160:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004162:	e00a      	b.n	800417a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004164:	f7fd fca2 	bl	8001aac <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004172:	4293      	cmp	r3, r2
 8004174:	d901      	bls.n	800417a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e04f      	b.n	800421a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417a:	4b2b      	ldr	r3, [pc, #172]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 020c 	and.w	r2, r3, #12
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	429a      	cmp	r2, r3
 800418a:	d1eb      	bne.n	8004164 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800418c:	4b25      	ldr	r3, [pc, #148]	; (8004224 <HAL_RCC_ClockConfig+0x1b8>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d20c      	bcs.n	80041b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800419a:	4b22      	ldr	r3, [pc, #136]	; (8004224 <HAL_RCC_ClockConfig+0x1b8>)
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a2:	4b20      	ldr	r3, [pc, #128]	; (8004224 <HAL_RCC_ClockConfig+0x1b8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e032      	b.n	800421a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d008      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041c0:	4b19      	ldr	r3, [pc, #100]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	4916      	ldr	r1, [pc, #88]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d009      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041de:	4b12      	ldr	r3, [pc, #72]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	490e      	ldr	r1, [pc, #56]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041f2:	f000 f82d 	bl	8004250 <HAL_RCC_GetSysClockFreq>
 80041f6:	4602      	mov	r2, r0
 80041f8:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	091b      	lsrs	r3, r3, #4
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	490a      	ldr	r1, [pc, #40]	; (800422c <HAL_RCC_ClockConfig+0x1c0>)
 8004204:	5ccb      	ldrb	r3, [r1, r3]
 8004206:	fa22 f303 	lsr.w	r3, r2, r3
 800420a:	4a09      	ldr	r2, [pc, #36]	; (8004230 <HAL_RCC_ClockConfig+0x1c4>)
 800420c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800420e:	4b09      	ldr	r3, [pc, #36]	; (8004234 <HAL_RCC_ClockConfig+0x1c8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f7fd fc06 	bl	8001a24 <HAL_InitTick>

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40023c00 	.word	0x40023c00
 8004228:	40023800 	.word	0x40023800
 800422c:	08009020 	.word	0x08009020
 8004230:	20000000 	.word	0x20000000
 8004234:	20000008 	.word	0x20000008

08004238 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800423c:	4b03      	ldr	r3, [pc, #12]	; (800424c <HAL_RCC_EnableCSS+0x14>)
 800423e:	2201      	movs	r2, #1
 8004240:	601a      	str	r2, [r3, #0]
}
 8004242:	bf00      	nop
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	4247004c 	.word	0x4247004c

08004250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004254:	b090      	sub	sp, #64	; 0x40
 8004256:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	637b      	str	r3, [r7, #52]	; 0x34
 800425c:	2300      	movs	r3, #0
 800425e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004260:	2300      	movs	r3, #0
 8004262:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004268:	4b59      	ldr	r3, [pc, #356]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f003 030c 	and.w	r3, r3, #12
 8004270:	2b08      	cmp	r3, #8
 8004272:	d00d      	beq.n	8004290 <HAL_RCC_GetSysClockFreq+0x40>
 8004274:	2b08      	cmp	r3, #8
 8004276:	f200 80a1 	bhi.w	80043bc <HAL_RCC_GetSysClockFreq+0x16c>
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <HAL_RCC_GetSysClockFreq+0x34>
 800427e:	2b04      	cmp	r3, #4
 8004280:	d003      	beq.n	800428a <HAL_RCC_GetSysClockFreq+0x3a>
 8004282:	e09b      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004284:	4b53      	ldr	r3, [pc, #332]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004286:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004288:	e09b      	b.n	80043c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800428a:	4b53      	ldr	r3, [pc, #332]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800428c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800428e:	e098      	b.n	80043c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004290:	4b4f      	ldr	r3, [pc, #316]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004298:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800429a:	4b4d      	ldr	r3, [pc, #308]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d028      	beq.n	80042f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042a6:	4b4a      	ldr	r3, [pc, #296]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	099b      	lsrs	r3, r3, #6
 80042ac:	2200      	movs	r2, #0
 80042ae:	623b      	str	r3, [r7, #32]
 80042b0:	627a      	str	r2, [r7, #36]	; 0x24
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80042b8:	2100      	movs	r1, #0
 80042ba:	4b47      	ldr	r3, [pc, #284]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80042bc:	fb03 f201 	mul.w	r2, r3, r1
 80042c0:	2300      	movs	r3, #0
 80042c2:	fb00 f303 	mul.w	r3, r0, r3
 80042c6:	4413      	add	r3, r2
 80042c8:	4a43      	ldr	r2, [pc, #268]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80042ca:	fba0 1202 	umull	r1, r2, r0, r2
 80042ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042d0:	460a      	mov	r2, r1
 80042d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80042d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042d6:	4413      	add	r3, r2
 80042d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042dc:	2200      	movs	r2, #0
 80042de:	61bb      	str	r3, [r7, #24]
 80042e0:	61fa      	str	r2, [r7, #28]
 80042e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80042ea:	f7fc fb6b 	bl	80009c4 <__aeabi_uldivmod>
 80042ee:	4602      	mov	r2, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	4613      	mov	r3, r2
 80042f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042f6:	e053      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042f8:	4b35      	ldr	r3, [pc, #212]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	099b      	lsrs	r3, r3, #6
 80042fe:	2200      	movs	r2, #0
 8004300:	613b      	str	r3, [r7, #16]
 8004302:	617a      	str	r2, [r7, #20]
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800430a:	f04f 0b00 	mov.w	fp, #0
 800430e:	4652      	mov	r2, sl
 8004310:	465b      	mov	r3, fp
 8004312:	f04f 0000 	mov.w	r0, #0
 8004316:	f04f 0100 	mov.w	r1, #0
 800431a:	0159      	lsls	r1, r3, #5
 800431c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004320:	0150      	lsls	r0, r2, #5
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	ebb2 080a 	subs.w	r8, r2, sl
 800432a:	eb63 090b 	sbc.w	r9, r3, fp
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800433a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800433e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004342:	ebb2 0408 	subs.w	r4, r2, r8
 8004346:	eb63 0509 	sbc.w	r5, r3, r9
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	00eb      	lsls	r3, r5, #3
 8004354:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004358:	00e2      	lsls	r2, r4, #3
 800435a:	4614      	mov	r4, r2
 800435c:	461d      	mov	r5, r3
 800435e:	eb14 030a 	adds.w	r3, r4, sl
 8004362:	603b      	str	r3, [r7, #0]
 8004364:	eb45 030b 	adc.w	r3, r5, fp
 8004368:	607b      	str	r3, [r7, #4]
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004376:	4629      	mov	r1, r5
 8004378:	028b      	lsls	r3, r1, #10
 800437a:	4621      	mov	r1, r4
 800437c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004380:	4621      	mov	r1, r4
 8004382:	028a      	lsls	r2, r1, #10
 8004384:	4610      	mov	r0, r2
 8004386:	4619      	mov	r1, r3
 8004388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438a:	2200      	movs	r2, #0
 800438c:	60bb      	str	r3, [r7, #8]
 800438e:	60fa      	str	r2, [r7, #12]
 8004390:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004394:	f7fc fb16 	bl	80009c4 <__aeabi_uldivmod>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4613      	mov	r3, r2
 800439e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	0c1b      	lsrs	r3, r3, #16
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	3301      	adds	r3, #1
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80043b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043ba:	e002      	b.n	80043c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043bc:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80043be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3740      	adds	r7, #64	; 0x40
 80043c8:	46bd      	mov	sp, r7
 80043ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ce:	bf00      	nop
 80043d0:	40023800 	.word	0x40023800
 80043d4:	00f42400 	.word	0x00f42400
 80043d8:	017d7840 	.word	0x017d7840

080043dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043e0:	4b03      	ldr	r3, [pc, #12]	; (80043f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043e2:	681b      	ldr	r3, [r3, #0]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	20000000 	.word	0x20000000

080043f4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80043f8:	4b06      	ldr	r3, [pc, #24]	; (8004414 <HAL_RCC_NMI_IRQHandler+0x20>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004400:	2b80      	cmp	r3, #128	; 0x80
 8004402:	d104      	bne.n	800440e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004404:	f000 f80a 	bl	800441c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004408:	4b03      	ldr	r3, [pc, #12]	; (8004418 <HAL_RCC_NMI_IRQHandler+0x24>)
 800440a:	2280      	movs	r2, #128	; 0x80
 800440c:	701a      	strb	r2, [r3, #0]
  }
}
 800440e:	bf00      	nop
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40023800 	.word	0x40023800
 8004418:	4002380e 	.word	0x4002380e

0800441c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b082      	sub	sp, #8
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e07b      	b.n	8004534 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	2b00      	cmp	r3, #0
 8004442:	d108      	bne.n	8004456 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800444c:	d009      	beq.n	8004462 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	61da      	str	r2, [r3, #28]
 8004454:	e005      	b.n	8004462 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	d106      	bne.n	8004482 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7fc fd8f 	bl	8000fa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2202      	movs	r2, #2
 8004486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004498:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	431a      	orrs	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e6:	ea42 0103 	orr.w	r1, r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	0c1b      	lsrs	r3, r3, #16
 8004500:	f003 0104 	and.w	r1, r3, #4
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	f003 0210 	and.w	r2, r3, #16
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	69da      	ldr	r2, [r3, #28]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004522:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b08c      	sub	sp, #48	; 0x30
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
 8004548:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800454a:	2301      	movs	r3, #1
 800454c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800455a:	2b01      	cmp	r3, #1
 800455c:	d101      	bne.n	8004562 <HAL_SPI_TransmitReceive+0x26>
 800455e:	2302      	movs	r3, #2
 8004560:	e18a      	b.n	8004878 <HAL_SPI_TransmitReceive+0x33c>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800456a:	f7fd fa9f 	bl	8001aac <HAL_GetTick>
 800456e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004580:	887b      	ldrh	r3, [r7, #2]
 8004582:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004584:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004588:	2b01      	cmp	r3, #1
 800458a:	d00f      	beq.n	80045ac <HAL_SPI_TransmitReceive+0x70>
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004592:	d107      	bne.n	80045a4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d103      	bne.n	80045a4 <HAL_SPI_TransmitReceive+0x68>
 800459c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d003      	beq.n	80045ac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80045a4:	2302      	movs	r3, #2
 80045a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80045aa:	e15b      	b.n	8004864 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <HAL_SPI_TransmitReceive+0x82>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <HAL_SPI_TransmitReceive+0x82>
 80045b8:	887b      	ldrh	r3, [r7, #2]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d103      	bne.n	80045c6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80045c4:	e14e      	b.n	8004864 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d003      	beq.n	80045da <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2205      	movs	r2, #5
 80045d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	887a      	ldrh	r2, [r7, #2]
 80045ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	887a      	ldrh	r2, [r7, #2]
 80045f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	887a      	ldrh	r2, [r7, #2]
 80045fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	887a      	ldrh	r2, [r7, #2]
 8004602:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461a:	2b40      	cmp	r3, #64	; 0x40
 800461c:	d007      	beq.n	800462e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800462c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004636:	d178      	bne.n	800472a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <HAL_SPI_TransmitReceive+0x10a>
 8004640:	8b7b      	ldrh	r3, [r7, #26]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d166      	bne.n	8004714 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	881a      	ldrh	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	1c9a      	adds	r2, r3, #2
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004660:	b29b      	uxth	r3, r3
 8004662:	3b01      	subs	r3, #1
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800466a:	e053      	b.n	8004714 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b02      	cmp	r3, #2
 8004678:	d11b      	bne.n	80046b2 <HAL_SPI_TransmitReceive+0x176>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800467e:	b29b      	uxth	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d016      	beq.n	80046b2 <HAL_SPI_TransmitReceive+0x176>
 8004684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004686:	2b01      	cmp	r3, #1
 8004688:	d113      	bne.n	80046b2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	881a      	ldrh	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	1c9a      	adds	r2, r3, #2
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d119      	bne.n	80046f4 <HAL_SPI_TransmitReceive+0x1b8>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d014      	beq.n	80046f4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	b292      	uxth	r2, r2
 80046d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046dc:	1c9a      	adds	r2, r3, #2
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	3b01      	subs	r3, #1
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046f0:	2301      	movs	r3, #1
 80046f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80046f4:	f7fd f9da 	bl	8001aac <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004700:	429a      	cmp	r2, r3
 8004702:	d807      	bhi.n	8004714 <HAL_SPI_TransmitReceive+0x1d8>
 8004704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470a:	d003      	beq.n	8004714 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004712:	e0a7      	b.n	8004864 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1a6      	bne.n	800466c <HAL_SPI_TransmitReceive+0x130>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004722:	b29b      	uxth	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1a1      	bne.n	800466c <HAL_SPI_TransmitReceive+0x130>
 8004728:	e07c      	b.n	8004824 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <HAL_SPI_TransmitReceive+0x1fc>
 8004732:	8b7b      	ldrh	r3, [r7, #26]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d16b      	bne.n	8004810 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	330c      	adds	r3, #12
 8004742:	7812      	ldrb	r2, [r2, #0]
 8004744:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800475e:	e057      	b.n	8004810 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b02      	cmp	r3, #2
 800476c:	d11c      	bne.n	80047a8 <HAL_SPI_TransmitReceive+0x26c>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004772:	b29b      	uxth	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d017      	beq.n	80047a8 <HAL_SPI_TransmitReceive+0x26c>
 8004778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477a:	2b01      	cmp	r3, #1
 800477c:	d114      	bne.n	80047a8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	330c      	adds	r3, #12
 8004788:	7812      	ldrb	r2, [r2, #0]
 800478a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004790:	1c5a      	adds	r2, r3, #1
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800479a:	b29b      	uxth	r3, r3
 800479c:	3b01      	subs	r3, #1
 800479e:	b29a      	uxth	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d119      	bne.n	80047ea <HAL_SPI_TransmitReceive+0x2ae>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d014      	beq.n	80047ea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047dc:	b29b      	uxth	r3, r3
 80047de:	3b01      	subs	r3, #1
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047e6:	2301      	movs	r3, #1
 80047e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80047ea:	f7fd f95f 	bl	8001aac <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d803      	bhi.n	8004802 <HAL_SPI_TransmitReceive+0x2c6>
 80047fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004800:	d102      	bne.n	8004808 <HAL_SPI_TransmitReceive+0x2cc>
 8004802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004804:	2b00      	cmp	r3, #0
 8004806:	d103      	bne.n	8004810 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800480e:	e029      	b.n	8004864 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004814:	b29b      	uxth	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1a2      	bne.n	8004760 <HAL_SPI_TransmitReceive+0x224>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d19d      	bne.n	8004760 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004826:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 f9c3 	bl	8004bb4 <SPI_EndRxTxTransaction>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d006      	beq.n	8004842 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2220      	movs	r2, #32
 800483e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004840:	e010      	b.n	8004864 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10b      	bne.n	8004862 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	617b      	str	r3, [r7, #20]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	e000      	b.n	8004864 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004862:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004874:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004878:	4618      	mov	r0, r3
 800487a:	3730      	adds	r7, #48	; 0x30
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b088      	sub	sp, #32
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10e      	bne.n	80048c0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d009      	beq.n	80048c0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d004      	beq.n	80048c0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	4798      	blx	r3
    return;
 80048be:	e0ce      	b.n	8004a5e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d009      	beq.n	80048de <HAL_SPI_IRQHandler+0x5e>
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d004      	beq.n	80048de <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	4798      	blx	r3
    return;
 80048dc:	e0bf      	b.n	8004a5e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	f003 0320 	and.w	r3, r3, #32
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10a      	bne.n	80048fe <HAL_SPI_IRQHandler+0x7e>
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d105      	bne.n	80048fe <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 80b0 	beq.w	8004a5e <HAL_SPI_IRQHandler+0x1de>
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	f003 0320 	and.w	r3, r3, #32
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 80aa 	beq.w	8004a5e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004910:	2b00      	cmp	r3, #0
 8004912:	d023      	beq.n	800495c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b03      	cmp	r3, #3
 800491e:	d011      	beq.n	8004944 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004924:	f043 0204 	orr.w	r2, r3, #4
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800492c:	2300      	movs	r3, #0
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	e00b      	b.n	800495c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004944:	2300      	movs	r3, #0
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	613b      	str	r3, [r7, #16]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	613b      	str	r3, [r7, #16]
 8004958:	693b      	ldr	r3, [r7, #16]
        return;
 800495a:	e080      	b.n	8004a5e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	f003 0320 	and.w	r3, r3, #32
 8004962:	2b00      	cmp	r3, #0
 8004964:	d014      	beq.n	8004990 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496a:	f043 0201 	orr.w	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00c      	beq.n	80049b4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499e:	f043 0208 	orr.w	r2, r3, #8
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80049a6:	2300      	movs	r3, #0
 80049a8:	60bb      	str	r3, [r7, #8]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	60bb      	str	r3, [r7, #8]
 80049b2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d04f      	beq.n	8004a5c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049ca:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d104      	bne.n	80049e8 <HAL_SPI_IRQHandler+0x168>
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d034      	beq.n	8004a52 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 0203 	bic.w	r2, r2, #3
 80049f6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d011      	beq.n	8004a24 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a04:	4a17      	ldr	r2, [pc, #92]	; (8004a64 <HAL_SPI_IRQHandler+0x1e4>)
 8004a06:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7fd fa3d 	bl	8001e8c <HAL_DMA_Abort_IT>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d005      	beq.n	8004a24 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d016      	beq.n	8004a5a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a30:	4a0c      	ldr	r2, [pc, #48]	; (8004a64 <HAL_SPI_IRQHandler+0x1e4>)
 8004a32:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fd fa27 	bl	8001e8c <HAL_DMA_Abort_IT>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00a      	beq.n	8004a5a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004a50:	e003      	b.n	8004a5a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f808 	bl	8004a68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004a58:	e000      	b.n	8004a5c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004a5a:	bf00      	nop
    return;
 8004a5c:	bf00      	nop
  }
}
 8004a5e:	3720      	adds	r7, #32
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	08004a7d 	.word	0x08004a7d

08004a68 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a88:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f7ff ffe6 	bl	8004a68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a9c:	bf00      	nop
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b088      	sub	sp, #32
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	603b      	str	r3, [r7, #0]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ab4:	f7fc fffa 	bl	8001aac <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abc:	1a9b      	subs	r3, r3, r2
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ac4:	f7fc fff2 	bl	8001aac <HAL_GetTick>
 8004ac8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004aca:	4b39      	ldr	r3, [pc, #228]	; (8004bb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	015b      	lsls	r3, r3, #5
 8004ad0:	0d1b      	lsrs	r3, r3, #20
 8004ad2:	69fa      	ldr	r2, [r7, #28]
 8004ad4:	fb02 f303 	mul.w	r3, r2, r3
 8004ad8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ada:	e054      	b.n	8004b86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae2:	d050      	beq.n	8004b86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ae4:	f7fc ffe2 	bl	8001aac <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	69fa      	ldr	r2, [r7, #28]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d902      	bls.n	8004afa <SPI_WaitFlagStateUntilTimeout+0x56>
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d13d      	bne.n	8004b76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b12:	d111      	bne.n	8004b38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b1c:	d004      	beq.n	8004b28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b26:	d107      	bne.n	8004b38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b40:	d10f      	bne.n	8004b62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e017      	b.n	8004ba6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	bf0c      	ite	eq
 8004b96:	2301      	moveq	r3, #1
 8004b98:	2300      	movne	r3, #0
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	79fb      	ldrb	r3, [r7, #7]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d19b      	bne.n	8004adc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3720      	adds	r7, #32
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	20000000 	.word	0x20000000

08004bb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af02      	add	r7, sp, #8
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004bc0:	4b1b      	ldr	r3, [pc, #108]	; (8004c30 <SPI_EndRxTxTransaction+0x7c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a1b      	ldr	r2, [pc, #108]	; (8004c34 <SPI_EndRxTxTransaction+0x80>)
 8004bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bca:	0d5b      	lsrs	r3, r3, #21
 8004bcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004bd0:	fb02 f303 	mul.w	r3, r2, r3
 8004bd4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bde:	d112      	bne.n	8004c06 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2200      	movs	r2, #0
 8004be8:	2180      	movs	r1, #128	; 0x80
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f7ff ff5a 	bl	8004aa4 <SPI_WaitFlagStateUntilTimeout>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d016      	beq.n	8004c24 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfa:	f043 0220 	orr.w	r2, r3, #32
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e00f      	b.n	8004c26 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00a      	beq.n	8004c22 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1c:	2b80      	cmp	r3, #128	; 0x80
 8004c1e:	d0f2      	beq.n	8004c06 <SPI_EndRxTxTransaction+0x52>
 8004c20:	e000      	b.n	8004c24 <SPI_EndRxTxTransaction+0x70>
        break;
 8004c22:	bf00      	nop
  }

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	20000000 	.word	0x20000000
 8004c34:	165e9f81 	.word	0x165e9f81

08004c38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c38:	b084      	sub	sp, #16
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b084      	sub	sp, #16
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
 8004c42:	f107 001c 	add.w	r0, r7, #28
 8004c46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d122      	bne.n	8004c96 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d105      	bne.n	8004c8a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f001 fbee 	bl	800646c <USB_CoreReset>
 8004c90:	4603      	mov	r3, r0
 8004c92:	73fb      	strb	r3, [r7, #15]
 8004c94:	e01a      	b.n	8004ccc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f001 fbe2 	bl	800646c <USB_CoreReset>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d106      	bne.n	8004cc0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	639a      	str	r2, [r3, #56]	; 0x38
 8004cbe:	e005      	b.n	8004ccc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d10b      	bne.n	8004cea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f043 0206 	orr.w	r2, r3, #6
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f043 0220 	orr.w	r2, r3, #32
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cf6:	b004      	add	sp, #16
 8004cf8:	4770      	bx	lr
	...

08004cfc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	4613      	mov	r3, r2
 8004d08:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004d0a:	79fb      	ldrb	r3, [r7, #7]
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d165      	bne.n	8004ddc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	4a41      	ldr	r2, [pc, #260]	; (8004e18 <USB_SetTurnaroundTime+0x11c>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d906      	bls.n	8004d26 <USB_SetTurnaroundTime+0x2a>
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	4a40      	ldr	r2, [pc, #256]	; (8004e1c <USB_SetTurnaroundTime+0x120>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d202      	bcs.n	8004d26 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004d20:	230f      	movs	r3, #15
 8004d22:	617b      	str	r3, [r7, #20]
 8004d24:	e062      	b.n	8004dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	4a3c      	ldr	r2, [pc, #240]	; (8004e1c <USB_SetTurnaroundTime+0x120>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d306      	bcc.n	8004d3c <USB_SetTurnaroundTime+0x40>
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	4a3b      	ldr	r2, [pc, #236]	; (8004e20 <USB_SetTurnaroundTime+0x124>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d202      	bcs.n	8004d3c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004d36:	230e      	movs	r3, #14
 8004d38:	617b      	str	r3, [r7, #20]
 8004d3a:	e057      	b.n	8004dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	4a38      	ldr	r2, [pc, #224]	; (8004e20 <USB_SetTurnaroundTime+0x124>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d306      	bcc.n	8004d52 <USB_SetTurnaroundTime+0x56>
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	4a37      	ldr	r2, [pc, #220]	; (8004e24 <USB_SetTurnaroundTime+0x128>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d202      	bcs.n	8004d52 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004d4c:	230d      	movs	r3, #13
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	e04c      	b.n	8004dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	4a33      	ldr	r2, [pc, #204]	; (8004e24 <USB_SetTurnaroundTime+0x128>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d306      	bcc.n	8004d68 <USB_SetTurnaroundTime+0x6c>
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	4a32      	ldr	r2, [pc, #200]	; (8004e28 <USB_SetTurnaroundTime+0x12c>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d802      	bhi.n	8004d68 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004d62:	230c      	movs	r3, #12
 8004d64:	617b      	str	r3, [r7, #20]
 8004d66:	e041      	b.n	8004dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	4a2f      	ldr	r2, [pc, #188]	; (8004e28 <USB_SetTurnaroundTime+0x12c>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d906      	bls.n	8004d7e <USB_SetTurnaroundTime+0x82>
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	4a2e      	ldr	r2, [pc, #184]	; (8004e2c <USB_SetTurnaroundTime+0x130>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d802      	bhi.n	8004d7e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004d78:	230b      	movs	r3, #11
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	e036      	b.n	8004dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	4a2a      	ldr	r2, [pc, #168]	; (8004e2c <USB_SetTurnaroundTime+0x130>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d906      	bls.n	8004d94 <USB_SetTurnaroundTime+0x98>
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	4a29      	ldr	r2, [pc, #164]	; (8004e30 <USB_SetTurnaroundTime+0x134>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d802      	bhi.n	8004d94 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004d8e:	230a      	movs	r3, #10
 8004d90:	617b      	str	r3, [r7, #20]
 8004d92:	e02b      	b.n	8004dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	4a26      	ldr	r2, [pc, #152]	; (8004e30 <USB_SetTurnaroundTime+0x134>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d906      	bls.n	8004daa <USB_SetTurnaroundTime+0xae>
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4a25      	ldr	r2, [pc, #148]	; (8004e34 <USB_SetTurnaroundTime+0x138>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d202      	bcs.n	8004daa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004da4:	2309      	movs	r3, #9
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	e020      	b.n	8004dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	4a21      	ldr	r2, [pc, #132]	; (8004e34 <USB_SetTurnaroundTime+0x138>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d306      	bcc.n	8004dc0 <USB_SetTurnaroundTime+0xc4>
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4a20      	ldr	r2, [pc, #128]	; (8004e38 <USB_SetTurnaroundTime+0x13c>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d802      	bhi.n	8004dc0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004dba:	2308      	movs	r3, #8
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	e015      	b.n	8004dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4a1d      	ldr	r2, [pc, #116]	; (8004e38 <USB_SetTurnaroundTime+0x13c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d906      	bls.n	8004dd6 <USB_SetTurnaroundTime+0xda>
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4a1c      	ldr	r2, [pc, #112]	; (8004e3c <USB_SetTurnaroundTime+0x140>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d202      	bcs.n	8004dd6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004dd0:	2307      	movs	r3, #7
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	e00a      	b.n	8004dec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004dd6:	2306      	movs	r3, #6
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	e007      	b.n	8004dec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004ddc:	79fb      	ldrb	r3, [r7, #7]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d102      	bne.n	8004de8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004de2:	2309      	movs	r3, #9
 8004de4:	617b      	str	r3, [r7, #20]
 8004de6:	e001      	b.n	8004dec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004de8:	2309      	movs	r3, #9
 8004dea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	68da      	ldr	r2, [r3, #12]
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	029b      	lsls	r3, r3, #10
 8004e00:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004e04:	431a      	orrs	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	371c      	adds	r7, #28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	00d8acbf 	.word	0x00d8acbf
 8004e1c:	00e4e1c0 	.word	0x00e4e1c0
 8004e20:	00f42400 	.word	0x00f42400
 8004e24:	01067380 	.word	0x01067380
 8004e28:	011a499f 	.word	0x011a499f
 8004e2c:	01312cff 	.word	0x01312cff
 8004e30:	014ca43f 	.word	0x014ca43f
 8004e34:	016e3600 	.word	0x016e3600
 8004e38:	01a6ab1f 	.word	0x01a6ab1f
 8004e3c:	01e84800 	.word	0x01e84800

08004e40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f043 0201 	orr.w	r2, r3, #1
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b083      	sub	sp, #12
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f023 0201 	bic.w	r2, r3, #1
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ea0:	78fb      	ldrb	r3, [r7, #3]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d115      	bne.n	8004ed2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004eb2:	2001      	movs	r0, #1
 8004eb4:	f7fc fe06 	bl	8001ac4 <HAL_Delay>
      ms++;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f001 fa45 	bl	800634e <USB_GetMode>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d01e      	beq.n	8004f08 <USB_SetCurrentMode+0x84>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2b31      	cmp	r3, #49	; 0x31
 8004ece:	d9f0      	bls.n	8004eb2 <USB_SetCurrentMode+0x2e>
 8004ed0:	e01a      	b.n	8004f08 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ed2:	78fb      	ldrb	r3, [r7, #3]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d115      	bne.n	8004f04 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ee4:	2001      	movs	r0, #1
 8004ee6:	f7fc fded 	bl	8001ac4 <HAL_Delay>
      ms++;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	3301      	adds	r3, #1
 8004eee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f001 fa2c 	bl	800634e <USB_GetMode>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d005      	beq.n	8004f08 <USB_SetCurrentMode+0x84>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b31      	cmp	r3, #49	; 0x31
 8004f00:	d9f0      	bls.n	8004ee4 <USB_SetCurrentMode+0x60>
 8004f02:	e001      	b.n	8004f08 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e005      	b.n	8004f14 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b32      	cmp	r3, #50	; 0x32
 8004f0c:	d101      	bne.n	8004f12 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e000      	b.n	8004f14 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f1c:	b084      	sub	sp, #16
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b086      	sub	sp, #24
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f36:	2300      	movs	r3, #0
 8004f38:	613b      	str	r3, [r7, #16]
 8004f3a:	e009      	b.n	8004f50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	3340      	adds	r3, #64	; 0x40
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	2200      	movs	r2, #0
 8004f48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	613b      	str	r3, [r7, #16]
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	2b0e      	cmp	r3, #14
 8004f54:	d9f2      	bls.n	8004f3c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d11c      	bne.n	8004f96 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f6a:	f043 0302 	orr.w	r3, r3, #2
 8004f6e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f74:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f80:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	639a      	str	r2, [r3, #56]	; 0x38
 8004f94:	e00b      	b.n	8004fae <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc8:	461a      	mov	r2, r3
 8004fca:	680b      	ldr	r3, [r1, #0]
 8004fcc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d10c      	bne.n	8004fee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d104      	bne.n	8004fe4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004fda:	2100      	movs	r1, #0
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f965 	bl	80052ac <USB_SetDevSpeed>
 8004fe2:	e008      	b.n	8004ff6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f960 	bl	80052ac <USB_SetDevSpeed>
 8004fec:	e003      	b.n	8004ff6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004fee:	2103      	movs	r1, #3
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f95b 	bl	80052ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ff6:	2110      	movs	r1, #16
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f8f3 	bl	80051e4 <USB_FlushTxFifo>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d001      	beq.n	8005008 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f91f 	bl	800524c <USB_FlushRxFifo>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501e:	461a      	mov	r2, r3
 8005020:	2300      	movs	r3, #0
 8005022:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502a:	461a      	mov	r2, r3
 800502c:	2300      	movs	r3, #0
 800502e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005036:	461a      	mov	r2, r3
 8005038:	2300      	movs	r3, #0
 800503a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800503c:	2300      	movs	r3, #0
 800503e:	613b      	str	r3, [r7, #16]
 8005040:	e043      	b.n	80050ca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005054:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005058:	d118      	bne.n	800508c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10a      	bne.n	8005076 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506c:	461a      	mov	r2, r3
 800506e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005072:	6013      	str	r3, [r2, #0]
 8005074:	e013      	b.n	800509e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4413      	add	r3, r2
 800507e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005082:	461a      	mov	r2, r3
 8005084:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	e008      	b.n	800509e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005098:	461a      	mov	r2, r3
 800509a:	2300      	movs	r3, #0
 800509c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050aa:	461a      	mov	r2, r3
 80050ac:	2300      	movs	r3, #0
 80050ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050bc:	461a      	mov	r2, r3
 80050be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	3301      	adds	r3, #1
 80050c8:	613b      	str	r3, [r7, #16]
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d3b7      	bcc.n	8005042 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050d2:	2300      	movs	r3, #0
 80050d4:	613b      	str	r3, [r7, #16]
 80050d6:	e043      	b.n	8005160 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050ee:	d118      	bne.n	8005122 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10a      	bne.n	800510c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005102:	461a      	mov	r2, r3
 8005104:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005108:	6013      	str	r3, [r2, #0]
 800510a:	e013      	b.n	8005134 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005118:	461a      	mov	r2, r3
 800511a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800511e:	6013      	str	r3, [r2, #0]
 8005120:	e008      	b.n	8005134 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512e:	461a      	mov	r2, r3
 8005130:	2300      	movs	r3, #0
 8005132:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005140:	461a      	mov	r2, r3
 8005142:	2300      	movs	r3, #0
 8005144:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	4413      	add	r3, r2
 800514e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005152:	461a      	mov	r2, r3
 8005154:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005158:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	3301      	adds	r3, #1
 800515e:	613b      	str	r3, [r7, #16]
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	429a      	cmp	r2, r3
 8005166:	d3b7      	bcc.n	80050d8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005176:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800517a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005188:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800518a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518c:	2b00      	cmp	r3, #0
 800518e:	d105      	bne.n	800519c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	f043 0210 	orr.w	r2, r3, #16
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699a      	ldr	r2, [r3, #24]
 80051a0:	4b0f      	ldr	r3, [pc, #60]	; (80051e0 <USB_DevInit+0x2c4>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d005      	beq.n	80051ba <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	f043 0208 	orr.w	r2, r3, #8
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80051ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d107      	bne.n	80051d0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051c8:	f043 0304 	orr.w	r3, r3, #4
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80051d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3718      	adds	r7, #24
 80051d6:	46bd      	mov	sp, r7
 80051d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051dc:	b004      	add	sp, #16
 80051de:	4770      	bx	lr
 80051e0:	803c3800 	.word	0x803c3800

080051e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	3301      	adds	r3, #1
 80051f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4a13      	ldr	r2, [pc, #76]	; (8005248 <USB_FlushTxFifo+0x64>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d901      	bls.n	8005204 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e01b      	b.n	800523c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	daf2      	bge.n	80051f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	019b      	lsls	r3, r3, #6
 8005214:	f043 0220 	orr.w	r2, r3, #32
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	3301      	adds	r3, #1
 8005220:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4a08      	ldr	r2, [pc, #32]	; (8005248 <USB_FlushTxFifo+0x64>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d901      	bls.n	800522e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e006      	b.n	800523c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	f003 0320 	and.w	r3, r3, #32
 8005236:	2b20      	cmp	r3, #32
 8005238:	d0f0      	beq.n	800521c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	00030d40 	.word	0x00030d40

0800524c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	3301      	adds	r3, #1
 800525c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	4a11      	ldr	r2, [pc, #68]	; (80052a8 <USB_FlushRxFifo+0x5c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d901      	bls.n	800526a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e018      	b.n	800529c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	2b00      	cmp	r3, #0
 8005270:	daf2      	bge.n	8005258 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2210      	movs	r2, #16
 800527a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3301      	adds	r3, #1
 8005280:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	4a08      	ldr	r2, [pc, #32]	; (80052a8 <USB_FlushRxFifo+0x5c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d901      	bls.n	800528e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e006      	b.n	800529c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f003 0310 	and.w	r3, r3, #16
 8005296:	2b10      	cmp	r3, #16
 8005298:	d0f0      	beq.n	800527c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	00030d40 	.word	0x00030d40

080052ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	460b      	mov	r3, r1
 80052b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	78fb      	ldrb	r3, [r7, #3]
 80052c6:	68f9      	ldr	r1, [r7, #12]
 80052c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052cc:	4313      	orrs	r3, r2
 80052ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80052de:	b480      	push	{r7}
 80052e0:	b087      	sub	sp, #28
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f003 0306 	and.w	r3, r3, #6
 80052f6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d102      	bne.n	8005304 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80052fe:	2300      	movs	r3, #0
 8005300:	75fb      	strb	r3, [r7, #23]
 8005302:	e00a      	b.n	800531a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b02      	cmp	r3, #2
 8005308:	d002      	beq.n	8005310 <USB_GetDevSpeed+0x32>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b06      	cmp	r3, #6
 800530e:	d102      	bne.n	8005316 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005310:	2302      	movs	r3, #2
 8005312:	75fb      	strb	r3, [r7, #23]
 8005314:	e001      	b.n	800531a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005316:	230f      	movs	r3, #15
 8005318:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800531a:	7dfb      	ldrb	r3, [r7, #23]
}
 800531c:	4618      	mov	r0, r3
 800531e:	371c      	adds	r7, #28
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	785b      	ldrb	r3, [r3, #1]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d13a      	bne.n	80053ba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534a:	69da      	ldr	r2, [r3, #28]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	f003 030f 	and.w	r3, r3, #15
 8005354:	2101      	movs	r1, #1
 8005356:	fa01 f303 	lsl.w	r3, r1, r3
 800535a:	b29b      	uxth	r3, r3
 800535c:	68f9      	ldr	r1, [r7, #12]
 800535e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005362:	4313      	orrs	r3, r2
 8005364:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4413      	add	r3, r2
 800536e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d155      	bne.n	8005428 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	791b      	ldrb	r3, [r3, #4]
 8005396:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005398:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	059b      	lsls	r3, r3, #22
 800539e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053a0:	4313      	orrs	r3, r2
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	0151      	lsls	r1, r2, #5
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	440a      	add	r2, r1
 80053aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053b6:	6013      	str	r3, [r2, #0]
 80053b8:	e036      	b.n	8005428 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c0:	69da      	ldr	r2, [r3, #28]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	2101      	movs	r1, #1
 80053cc:	fa01 f303 	lsl.w	r3, r1, r3
 80053d0:	041b      	lsls	r3, r3, #16
 80053d2:	68f9      	ldr	r1, [r7, #12]
 80053d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053d8:	4313      	orrs	r3, r2
 80053da:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d11a      	bne.n	8005428 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	791b      	ldrb	r3, [r3, #4]
 800540c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800540e:	430b      	orrs	r3, r1
 8005410:	4313      	orrs	r3, r2
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	0151      	lsls	r1, r2, #5
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	440a      	add	r2, r1
 800541a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800541e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005426:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
	...

08005438 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	785b      	ldrb	r3, [r3, #1]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d161      	bne.n	8005518 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005466:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800546a:	d11f      	bne.n	80054ac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	0151      	lsls	r1, r2, #5
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	440a      	add	r2, r1
 8005482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005486:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800548a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4413      	add	r3, r2
 8005494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	0151      	lsls	r1, r2, #5
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	440a      	add	r2, r1
 80054a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	f003 030f 	and.w	r3, r3, #15
 80054bc:	2101      	movs	r1, #1
 80054be:	fa01 f303 	lsl.w	r3, r1, r3
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	43db      	mvns	r3, r3
 80054c6:	68f9      	ldr	r1, [r7, #12]
 80054c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054cc:	4013      	ands	r3, r2
 80054ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	f003 030f 	and.w	r3, r3, #15
 80054e0:	2101      	movs	r1, #1
 80054e2:	fa01 f303 	lsl.w	r3, r1, r3
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	43db      	mvns	r3, r3
 80054ea:	68f9      	ldr	r1, [r7, #12]
 80054ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054f0:	4013      	ands	r3, r2
 80054f2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	0159      	lsls	r1, r3, #5
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	440b      	add	r3, r1
 800550a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550e:	4619      	mov	r1, r3
 8005510:	4b35      	ldr	r3, [pc, #212]	; (80055e8 <USB_DeactivateEndpoint+0x1b0>)
 8005512:	4013      	ands	r3, r2
 8005514:	600b      	str	r3, [r1, #0]
 8005516:	e060      	b.n	80055da <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800552a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800552e:	d11f      	bne.n	8005570 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	0151      	lsls	r1, r2, #5
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	440a      	add	r2, r1
 8005546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800554a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800554e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	0151      	lsls	r1, r2, #5
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	440a      	add	r2, r1
 8005566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800556a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800556e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	f003 030f 	and.w	r3, r3, #15
 8005580:	2101      	movs	r1, #1
 8005582:	fa01 f303 	lsl.w	r3, r1, r3
 8005586:	041b      	lsls	r3, r3, #16
 8005588:	43db      	mvns	r3, r3
 800558a:	68f9      	ldr	r1, [r7, #12]
 800558c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005590:	4013      	ands	r3, r2
 8005592:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559a:	69da      	ldr	r2, [r3, #28]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	f003 030f 	and.w	r3, r3, #15
 80055a4:	2101      	movs	r1, #1
 80055a6:	fa01 f303 	lsl.w	r3, r1, r3
 80055aa:	041b      	lsls	r3, r3, #16
 80055ac:	43db      	mvns	r3, r3
 80055ae:	68f9      	ldr	r1, [r7, #12]
 80055b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055b4:	4013      	ands	r3, r2
 80055b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	0159      	lsls	r1, r3, #5
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	440b      	add	r3, r1
 80055ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d2:	4619      	mov	r1, r3
 80055d4:	4b05      	ldr	r3, [pc, #20]	; (80055ec <USB_DeactivateEndpoint+0x1b4>)
 80055d6:	4013      	ands	r3, r2
 80055d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	ec337800 	.word	0xec337800
 80055ec:	eff37800 	.word	0xeff37800

080055f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08a      	sub	sp, #40	; 0x28
 80055f4:	af02      	add	r7, sp, #8
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	4613      	mov	r3, r2
 80055fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	785b      	ldrb	r3, [r3, #1]
 800560c:	2b01      	cmp	r3, #1
 800560e:	f040 815c 	bne.w	80058ca <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d132      	bne.n	8005680 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	015a      	lsls	r2, r3, #5
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	4413      	add	r3, r2
 8005622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	0151      	lsls	r1, r2, #5
 800562c:	69fa      	ldr	r2, [r7, #28]
 800562e:	440a      	add	r2, r1
 8005630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005634:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005638:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800563c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	4413      	add	r3, r2
 8005646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	0151      	lsls	r1, r2, #5
 8005650:	69fa      	ldr	r2, [r7, #28]
 8005652:	440a      	add	r2, r1
 8005654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005658:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800565c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	4413      	add	r3, r2
 8005666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	0151      	lsls	r1, r2, #5
 8005670:	69fa      	ldr	r2, [r7, #28]
 8005672:	440a      	add	r2, r1
 8005674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005678:	0cdb      	lsrs	r3, r3, #19
 800567a:	04db      	lsls	r3, r3, #19
 800567c:	6113      	str	r3, [r2, #16]
 800567e:	e074      	b.n	800576a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	0151      	lsls	r1, r2, #5
 8005692:	69fa      	ldr	r2, [r7, #28]
 8005694:	440a      	add	r2, r1
 8005696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800569a:	0cdb      	lsrs	r3, r3, #19
 800569c:	04db      	lsls	r3, r3, #19
 800569e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	0151      	lsls	r1, r2, #5
 80056b2:	69fa      	ldr	r2, [r7, #28]
 80056b4:	440a      	add	r2, r1
 80056b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	6999      	ldr	r1, [r3, #24]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	440b      	add	r3, r1
 80056dc:	1e59      	subs	r1, r3, #1
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80056e6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80056e8:	4b9d      	ldr	r3, [pc, #628]	; (8005960 <USB_EPStartXfer+0x370>)
 80056ea:	400b      	ands	r3, r1
 80056ec:	69b9      	ldr	r1, [r7, #24]
 80056ee:	0148      	lsls	r0, r1, #5
 80056f0:	69f9      	ldr	r1, [r7, #28]
 80056f2:	4401      	add	r1, r0
 80056f4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056f8:	4313      	orrs	r3, r2
 80056fa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005708:	691a      	ldr	r2, [r3, #16]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005712:	69b9      	ldr	r1, [r7, #24]
 8005714:	0148      	lsls	r0, r1, #5
 8005716:	69f9      	ldr	r1, [r7, #28]
 8005718:	4401      	add	r1, r0
 800571a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800571e:	4313      	orrs	r3, r2
 8005720:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	791b      	ldrb	r3, [r3, #4]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d11f      	bne.n	800576a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	4413      	add	r3, r2
 8005732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	0151      	lsls	r1, r2, #5
 800573c:	69fa      	ldr	r2, [r7, #28]
 800573e:	440a      	add	r2, r1
 8005740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005744:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005748:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	4413      	add	r3, r2
 8005752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	0151      	lsls	r1, r2, #5
 800575c:	69fa      	ldr	r2, [r7, #28]
 800575e:	440a      	add	r2, r1
 8005760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005764:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005768:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800576a:	79fb      	ldrb	r3, [r7, #7]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d14b      	bne.n	8005808 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d009      	beq.n	800578c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005784:	461a      	mov	r2, r3
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	791b      	ldrb	r3, [r3, #4]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d128      	bne.n	80057e6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d110      	bne.n	80057c6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	0151      	lsls	r1, r2, #5
 80057b6:	69fa      	ldr	r2, [r7, #28]
 80057b8:	440a      	add	r2, r1
 80057ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057c2:	6013      	str	r3, [r2, #0]
 80057c4:	e00f      	b.n	80057e6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	0151      	lsls	r1, r2, #5
 80057d8:	69fa      	ldr	r2, [r7, #28]
 80057da:	440a      	add	r2, r1
 80057dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	0151      	lsls	r1, r2, #5
 80057f8:	69fa      	ldr	r2, [r7, #28]
 80057fa:	440a      	add	r2, r1
 80057fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005800:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005804:	6013      	str	r3, [r2, #0]
 8005806:	e133      	b.n	8005a70 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	0151      	lsls	r1, r2, #5
 800581a:	69fa      	ldr	r2, [r7, #28]
 800581c:	440a      	add	r2, r1
 800581e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005822:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005826:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	791b      	ldrb	r3, [r3, #4]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d015      	beq.n	800585c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 811b 	beq.w	8005a70 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	f003 030f 	and.w	r3, r3, #15
 800584a:	2101      	movs	r1, #1
 800584c:	fa01 f303 	lsl.w	r3, r1, r3
 8005850:	69f9      	ldr	r1, [r7, #28]
 8005852:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005856:	4313      	orrs	r3, r2
 8005858:	634b      	str	r3, [r1, #52]	; 0x34
 800585a:	e109      	b.n	8005a70 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005868:	2b00      	cmp	r3, #0
 800586a:	d110      	bne.n	800588e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	0151      	lsls	r1, r2, #5
 800587e:	69fa      	ldr	r2, [r7, #28]
 8005880:	440a      	add	r2, r1
 8005882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005886:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	e00f      	b.n	80058ae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	4413      	add	r3, r2
 8005896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	0151      	lsls	r1, r2, #5
 80058a0:	69fa      	ldr	r2, [r7, #28]
 80058a2:	440a      	add	r2, r1
 80058a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	6919      	ldr	r1, [r3, #16]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	781a      	ldrb	r2, [r3, #0]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	b298      	uxth	r0, r3
 80058bc:	79fb      	ldrb	r3, [r7, #7]
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	4603      	mov	r3, r0
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 fade 	bl	8005e84 <USB_WritePacket>
 80058c8:	e0d2      	b.n	8005a70 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	0151      	lsls	r1, r2, #5
 80058dc:	69fa      	ldr	r2, [r7, #28]
 80058de:	440a      	add	r2, r1
 80058e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058e4:	0cdb      	lsrs	r3, r3, #19
 80058e6:	04db      	lsls	r3, r3, #19
 80058e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	0151      	lsls	r1, r2, #5
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	440a      	add	r2, r1
 8005900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005904:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005908:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800590c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d126      	bne.n	8005964 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800592c:	69b9      	ldr	r1, [r7, #24]
 800592e:	0148      	lsls	r0, r1, #5
 8005930:	69f9      	ldr	r1, [r7, #28]
 8005932:	4401      	add	r1, r0
 8005934:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005938:	4313      	orrs	r3, r2
 800593a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	0151      	lsls	r1, r2, #5
 800594e:	69fa      	ldr	r2, [r7, #28]
 8005950:	440a      	add	r2, r1
 8005952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005956:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800595a:	6113      	str	r3, [r2, #16]
 800595c:	e03a      	b.n	80059d4 <USB_EPStartXfer+0x3e4>
 800595e:	bf00      	nop
 8005960:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	699a      	ldr	r2, [r3, #24]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	4413      	add	r3, r2
 800596e:	1e5a      	subs	r2, r3, #1
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	fbb2 f3f3 	udiv	r3, r2, r3
 8005978:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	8afa      	ldrh	r2, [r7, #22]
 8005980:	fb03 f202 	mul.w	r2, r3, r2
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	4413      	add	r3, r2
 8005990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005994:	691a      	ldr	r2, [r3, #16]
 8005996:	8afb      	ldrh	r3, [r7, #22]
 8005998:	04d9      	lsls	r1, r3, #19
 800599a:	4b38      	ldr	r3, [pc, #224]	; (8005a7c <USB_EPStartXfer+0x48c>)
 800599c:	400b      	ands	r3, r1
 800599e:	69b9      	ldr	r1, [r7, #24]
 80059a0:	0148      	lsls	r0, r1, #5
 80059a2:	69f9      	ldr	r1, [r7, #28]
 80059a4:	4401      	add	r1, r0
 80059a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059aa:	4313      	orrs	r3, r2
 80059ac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ba:	691a      	ldr	r2, [r3, #16]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059c4:	69b9      	ldr	r1, [r7, #24]
 80059c6:	0148      	lsls	r0, r1, #5
 80059c8:	69f9      	ldr	r1, [r7, #28]
 80059ca:	4401      	add	r1, r0
 80059cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059d0:	4313      	orrs	r3, r2
 80059d2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80059d4:	79fb      	ldrb	r3, [r7, #7]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d10d      	bne.n	80059f6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d009      	beq.n	80059f6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	6919      	ldr	r1, [r3, #16]
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f2:	460a      	mov	r2, r1
 80059f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	791b      	ldrb	r3, [r3, #4]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d128      	bne.n	8005a50 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d110      	bne.n	8005a30 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	0151      	lsls	r1, r2, #5
 8005a20:	69fa      	ldr	r2, [r7, #28]
 8005a22:	440a      	add	r2, r1
 8005a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	e00f      	b.n	8005a50 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	0151      	lsls	r1, r2, #5
 8005a42:	69fa      	ldr	r2, [r7, #28]
 8005a44:	440a      	add	r2, r1
 8005a46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a4e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	0151      	lsls	r1, r2, #5
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	440a      	add	r2, r1
 8005a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3720      	adds	r7, #32
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	1ff80000 	.word	0x1ff80000

08005a80 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	785b      	ldrb	r3, [r3, #1]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	f040 80ce 	bne.w	8005c3e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d132      	bne.n	8005b10 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	0151      	lsls	r1, r2, #5
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	440a      	add	r2, r1
 8005ac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ac4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ac8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005acc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	0151      	lsls	r1, r2, #5
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	440a      	add	r2, r1
 8005ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005aec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	0151      	lsls	r1, r2, #5
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	440a      	add	r2, r1
 8005b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b08:	0cdb      	lsrs	r3, r3, #19
 8005b0a:	04db      	lsls	r3, r3, #19
 8005b0c:	6113      	str	r3, [r2, #16]
 8005b0e:	e04e      	b.n	8005bae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	0151      	lsls	r1, r2, #5
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	440a      	add	r2, r1
 8005b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b2a:	0cdb      	lsrs	r3, r3, #19
 8005b2c:	04db      	lsls	r3, r3, #19
 8005b2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	0151      	lsls	r1, r2, #5
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	440a      	add	r2, r1
 8005b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b4a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b4e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b52:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	699a      	ldr	r2, [r3, #24]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d903      	bls.n	8005b68 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	68da      	ldr	r2, [r3, #12]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	0151      	lsls	r1, r2, #5
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	440a      	add	r2, r1
 8005b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b94:	691a      	ldr	r2, [r3, #16]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b9e:	6939      	ldr	r1, [r7, #16]
 8005ba0:	0148      	lsls	r0, r1, #5
 8005ba2:	6979      	ldr	r1, [r7, #20]
 8005ba4:	4401      	add	r1, r0
 8005ba6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005baa:	4313      	orrs	r3, r2
 8005bac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005bae:	79fb      	ldrb	r3, [r7, #7]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d11e      	bne.n	8005bf2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d009      	beq.n	8005bd0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc8:	461a      	mov	r2, r3
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	0151      	lsls	r1, r2, #5
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	440a      	add	r2, r1
 8005be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bee:	6013      	str	r3, [r2, #0]
 8005bf0:	e097      	b.n	8005d22 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	0151      	lsls	r1, r2, #5
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	440a      	add	r2, r1
 8005c08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c10:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f000 8083 	beq.w	8005d22 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	f003 030f 	and.w	r3, r3, #15
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c32:	6979      	ldr	r1, [r7, #20]
 8005c34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	634b      	str	r3, [r1, #52]	; 0x34
 8005c3c:	e071      	b.n	8005d22 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	0151      	lsls	r1, r2, #5
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	440a      	add	r2, r1
 8005c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c58:	0cdb      	lsrs	r3, r3, #19
 8005c5a:	04db      	lsls	r3, r3, #19
 8005c5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	0151      	lsls	r1, r2, #5
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	440a      	add	r2, r1
 8005c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c80:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d003      	beq.n	8005c92 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	0151      	lsls	r1, r2, #5
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	440a      	add	r2, r1
 8005cb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc6:	691a      	ldr	r2, [r3, #16]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cd0:	6939      	ldr	r1, [r7, #16]
 8005cd2:	0148      	lsls	r0, r1, #5
 8005cd4:	6979      	ldr	r1, [r7, #20]
 8005cd6:	4401      	add	r1, r0
 8005cd8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005ce0:	79fb      	ldrb	r3, [r7, #7]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d10d      	bne.n	8005d02 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d009      	beq.n	8005d02 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	6919      	ldr	r1, [r3, #16]
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfe:	460a      	mov	r2, r1
 8005d00:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	0151      	lsls	r1, r2, #5
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	440a      	add	r2, r1
 8005d18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	371c      	adds	r7, #28
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	785b      	ldrb	r3, [r3, #1]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d14a      	bne.n	8005de4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d66:	f040 8086 	bne.w	8005e76 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	7812      	ldrb	r2, [r2, #0]
 8005d7e:	0151      	lsls	r1, r2, #5
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	440a      	add	r2, r1
 8005d84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d8c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	7812      	ldrb	r2, [r2, #0]
 8005da2:	0151      	lsls	r1, r2, #5
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	440a      	add	r2, r1
 8005da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005db0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	3301      	adds	r3, #1
 8005db6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f242 7210 	movw	r2, #10000	; 0x2710
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d902      	bls.n	8005dc8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	75fb      	strb	r3, [r7, #23]
          break;
 8005dc6:	e056      	b.n	8005e76 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ddc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005de0:	d0e7      	beq.n	8005db2 <USB_EPStopXfer+0x82>
 8005de2:	e048      	b.n	8005e76 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005df8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dfc:	d13b      	bne.n	8005e76 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	7812      	ldrb	r2, [r2, #0]
 8005e12:	0151      	lsls	r1, r2, #5
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	440a      	add	r2, r1
 8005e18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e20:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	683a      	ldr	r2, [r7, #0]
 8005e34:	7812      	ldrb	r2, [r2, #0]
 8005e36:	0151      	lsls	r1, r2, #5
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	440a      	add	r2, r1
 8005e3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e44:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d902      	bls.n	8005e5c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	75fb      	strb	r3, [r7, #23]
          break;
 8005e5a:	e00c      	b.n	8005e76 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e74:	d0e7      	beq.n	8005e46 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	371c      	adds	r7, #28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b089      	sub	sp, #36	; 0x24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	4611      	mov	r1, r2
 8005e90:	461a      	mov	r2, r3
 8005e92:	460b      	mov	r3, r1
 8005e94:	71fb      	strb	r3, [r7, #7]
 8005e96:	4613      	mov	r3, r2
 8005e98:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005ea2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d123      	bne.n	8005ef2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005eaa:	88bb      	ldrh	r3, [r7, #4]
 8005eac:	3303      	adds	r3, #3
 8005eae:	089b      	lsrs	r3, r3, #2
 8005eb0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	61bb      	str	r3, [r7, #24]
 8005eb6:	e018      	b.n	8005eea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005eb8:	79fb      	ldrb	r3, [r7, #7]
 8005eba:	031a      	lsls	r2, r3, #12
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	3301      	adds	r3, #1
 8005edc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	61bb      	str	r3, [r7, #24]
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d3e2      	bcc.n	8005eb8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3724      	adds	r7, #36	; 0x24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b08b      	sub	sp, #44	; 0x2c
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005f16:	88fb      	ldrh	r3, [r7, #6]
 8005f18:	089b      	lsrs	r3, r3, #2
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005f1e:	88fb      	ldrh	r3, [r7, #6]
 8005f20:	f003 0303 	and.w	r3, r3, #3
 8005f24:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005f26:	2300      	movs	r3, #0
 8005f28:	623b      	str	r3, [r7, #32]
 8005f2a:	e014      	b.n	8005f56 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	601a      	str	r2, [r3, #0]
    pDest++;
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	3301      	adds	r3, #1
 8005f42:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	3301      	adds	r3, #1
 8005f48:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	3301      	adds	r3, #1
 8005f54:	623b      	str	r3, [r7, #32]
 8005f56:	6a3a      	ldr	r2, [r7, #32]
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d3e6      	bcc.n	8005f2c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005f5e:	8bfb      	ldrh	r3, [r7, #30]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d01e      	beq.n	8005fa2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005f64:	2300      	movs	r3, #0
 8005f66:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f107 0310 	add.w	r3, r7, #16
 8005f74:	6812      	ldr	r2, [r2, #0]
 8005f76:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	fa22 f303 	lsr.w	r3, r2, r3
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f88:	701a      	strb	r2, [r3, #0]
      i++;
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	3301      	adds	r3, #1
 8005f94:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005f96:	8bfb      	ldrh	r3, [r7, #30]
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f9c:	8bfb      	ldrh	r3, [r7, #30]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1ea      	bne.n	8005f78 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	372c      	adds	r7, #44	; 0x2c
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	785b      	ldrb	r3, [r3, #1]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d12c      	bne.n	8006026 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	db12      	blt.n	8006004 <USB_EPSetStall+0x54>
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00f      	beq.n	8006004 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	0151      	lsls	r1, r2, #5
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	440a      	add	r2, r1
 8005ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ffe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006002:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	0151      	lsls	r1, r2, #5
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	440a      	add	r2, r1
 800601a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800601e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006022:	6013      	str	r3, [r2, #0]
 8006024:	e02b      	b.n	800607e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	015a      	lsls	r2, r3, #5
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	4413      	add	r3, r2
 800602e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	db12      	blt.n	800605e <USB_EPSetStall+0xae>
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00f      	beq.n	800605e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	4413      	add	r3, r2
 8006046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	0151      	lsls	r1, r2, #5
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	440a      	add	r2, r1
 8006054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006058:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800605c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4413      	add	r3, r2
 8006066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	0151      	lsls	r1, r2, #5
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	440a      	add	r2, r1
 8006074:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006078:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800607c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	785b      	ldrb	r3, [r3, #1]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d128      	bne.n	80060fa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	015a      	lsls	r2, r3, #5
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4413      	add	r3, r2
 80060b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	0151      	lsls	r1, r2, #5
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	440a      	add	r2, r1
 80060be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	791b      	ldrb	r3, [r3, #4]
 80060cc:	2b03      	cmp	r3, #3
 80060ce:	d003      	beq.n	80060d8 <USB_EPClearStall+0x4c>
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	791b      	ldrb	r3, [r3, #4]
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d138      	bne.n	800614a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	015a      	lsls	r2, r3, #5
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4413      	add	r3, r2
 80060e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	0151      	lsls	r1, r2, #5
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	440a      	add	r2, r1
 80060ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060f6:	6013      	str	r3, [r2, #0]
 80060f8:	e027      	b.n	800614a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	4413      	add	r3, r2
 8006102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	0151      	lsls	r1, r2, #5
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	440a      	add	r2, r1
 8006110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006114:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006118:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	791b      	ldrb	r3, [r3, #4]
 800611e:	2b03      	cmp	r3, #3
 8006120:	d003      	beq.n	800612a <USB_EPClearStall+0x9e>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	791b      	ldrb	r3, [r3, #4]
 8006126:	2b02      	cmp	r3, #2
 8006128:	d10f      	bne.n	800614a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	015a      	lsls	r2, r3, #5
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	4413      	add	r3, r2
 8006132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	0151      	lsls	r1, r2, #5
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	440a      	add	r2, r1
 8006140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006148:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	460b      	mov	r3, r1
 8006162:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006176:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800617a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	78fb      	ldrb	r3, [r7, #3]
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800618c:	68f9      	ldr	r1, [r7, #12]
 800618e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006192:	4313      	orrs	r3, r2
 8006194:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80061be:	f023 0303 	bic.w	r3, r3, #3
 80061c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061d2:	f023 0302 	bic.w	r3, r3, #2
 80061d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b085      	sub	sp, #20
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006200:	f023 0303 	bic.w	r3, r3, #3
 8006204:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006214:	f043 0302 	orr.w	r3, r3, #2
 8006218:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3714      	adds	r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	4013      	ands	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006240:	68fb      	ldr	r3, [r7, #12]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800624e:	b480      	push	{r7}
 8006250:	b085      	sub	sp, #20
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	4013      	ands	r3, r2
 8006270:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	0c1b      	lsrs	r3, r3, #16
}
 8006276:	4618      	mov	r0, r3
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006282:	b480      	push	{r7}
 8006284:	b085      	sub	sp, #20
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800629e:	69db      	ldr	r3, [r3, #28]
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	4013      	ands	r3, r2
 80062a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	b29b      	uxth	r3, r3
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b085      	sub	sp, #20
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
 80062be:	460b      	mov	r3, r1
 80062c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80062c6:	78fb      	ldrb	r3, [r7, #3]
 80062c8:	015a      	lsls	r2, r3, #5
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	4413      	add	r3, r2
 80062ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	4013      	ands	r3, r2
 80062e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80062e4:	68bb      	ldr	r3, [r7, #8]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b087      	sub	sp, #28
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	460b      	mov	r3, r1
 80062fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006314:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006316:	78fb      	ldrb	r3, [r7, #3]
 8006318:	f003 030f 	and.w	r3, r3, #15
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	fa22 f303 	lsr.w	r3, r2, r3
 8006322:	01db      	lsls	r3, r3, #7
 8006324:	b2db      	uxtb	r3, r3
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	4313      	orrs	r3, r2
 800632a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800632c:	78fb      	ldrb	r3, [r7, #3]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	4413      	add	r3, r2
 8006334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	4013      	ands	r3, r2
 800633e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006340:	68bb      	ldr	r3, [r7, #8]
}
 8006342:	4618      	mov	r0, r3
 8006344:	371c      	adds	r7, #28
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	f003 0301 	and.w	r3, r3, #1
}
 800635e:	4618      	mov	r0, r3
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800636a:	b480      	push	{r7}
 800636c:	b085      	sub	sp, #20
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006384:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006388:	f023 0307 	bic.w	r3, r3, #7
 800638c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800639c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b087      	sub	sp, #28
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	460b      	mov	r3, r1
 80063ba:	607a      	str	r2, [r7, #4]
 80063bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	333c      	adds	r3, #60	; 0x3c
 80063c6:	3304      	adds	r3, #4
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	4a26      	ldr	r2, [pc, #152]	; (8006468 <USB_EP0_OutStart+0xb8>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d90a      	bls.n	80063ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063e4:	d101      	bne.n	80063ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	e037      	b.n	800645a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f0:	461a      	mov	r2, r3
 80063f2:	2300      	movs	r3, #0
 80063f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006404:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006408:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006418:	f043 0318 	orr.w	r3, r3, #24
 800641c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800642c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006430:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006432:	7afb      	ldrb	r3, [r7, #11]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d10f      	bne.n	8006458 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643e:	461a      	mov	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006452:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006456:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	371c      	adds	r7, #28
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	4f54300a 	.word	0x4f54300a

0800646c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006474:	2300      	movs	r3, #0
 8006476:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	3301      	adds	r3, #1
 800647c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4a13      	ldr	r2, [pc, #76]	; (80064d0 <USB_CoreReset+0x64>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d901      	bls.n	800648a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e01b      	b.n	80064c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	daf2      	bge.n	8006478 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f043 0201 	orr.w	r2, r3, #1
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	3301      	adds	r3, #1
 80064a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	4a09      	ldr	r2, [pc, #36]	; (80064d0 <USB_CoreReset+0x64>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d901      	bls.n	80064b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e006      	b.n	80064c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d0f0      	beq.n	80064a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3714      	adds	r7, #20
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	00030d40 	.word	0x00030d40

080064d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	460b      	mov	r3, r1
 80064de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80064e0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80064e4:	f002 fcf4 	bl	8008ed0 <USBD_static_malloc>
 80064e8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d109      	bne.n	8006504 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	32b0      	adds	r2, #176	; 0xb0
 80064fa:	2100      	movs	r1, #0
 80064fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006500:	2302      	movs	r3, #2
 8006502:	e0d4      	b.n	80066ae <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006504:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006508:	2100      	movs	r1, #0
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f002 fd24 	bl	8008f58 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	32b0      	adds	r2, #176	; 0xb0
 800651a:	68f9      	ldr	r1, [r7, #12]
 800651c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	32b0      	adds	r2, #176	; 0xb0
 800652a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	7c1b      	ldrb	r3, [r3, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d138      	bne.n	80065ae <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800653c:	4b5e      	ldr	r3, [pc, #376]	; (80066b8 <USBD_CDC_Init+0x1e4>)
 800653e:	7819      	ldrb	r1, [r3, #0]
 8006540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006544:	2202      	movs	r2, #2
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f002 fb9f 	bl	8008c8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800654c:	4b5a      	ldr	r3, [pc, #360]	; (80066b8 <USBD_CDC_Init+0x1e4>)
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	f003 020f 	and.w	r2, r3, #15
 8006554:	6879      	ldr	r1, [r7, #4]
 8006556:	4613      	mov	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4413      	add	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	440b      	add	r3, r1
 8006560:	3324      	adds	r3, #36	; 0x24
 8006562:	2201      	movs	r2, #1
 8006564:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006566:	4b55      	ldr	r3, [pc, #340]	; (80066bc <USBD_CDC_Init+0x1e8>)
 8006568:	7819      	ldrb	r1, [r3, #0]
 800656a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800656e:	2202      	movs	r2, #2
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f002 fb8a 	bl	8008c8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006576:	4b51      	ldr	r3, [pc, #324]	; (80066bc <USBD_CDC_Init+0x1e8>)
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	f003 020f 	and.w	r2, r3, #15
 800657e:	6879      	ldr	r1, [r7, #4]
 8006580:	4613      	mov	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	440b      	add	r3, r1
 800658a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800658e:	2201      	movs	r2, #1
 8006590:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006592:	4b4b      	ldr	r3, [pc, #300]	; (80066c0 <USBD_CDC_Init+0x1ec>)
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	f003 020f 	and.w	r2, r3, #15
 800659a:	6879      	ldr	r1, [r7, #4]
 800659c:	4613      	mov	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	440b      	add	r3, r1
 80065a6:	3326      	adds	r3, #38	; 0x26
 80065a8:	2210      	movs	r2, #16
 80065aa:	801a      	strh	r2, [r3, #0]
 80065ac:	e035      	b.n	800661a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80065ae:	4b42      	ldr	r3, [pc, #264]	; (80066b8 <USBD_CDC_Init+0x1e4>)
 80065b0:	7819      	ldrb	r1, [r3, #0]
 80065b2:	2340      	movs	r3, #64	; 0x40
 80065b4:	2202      	movs	r2, #2
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f002 fb67 	bl	8008c8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80065bc:	4b3e      	ldr	r3, [pc, #248]	; (80066b8 <USBD_CDC_Init+0x1e4>)
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	f003 020f 	and.w	r2, r3, #15
 80065c4:	6879      	ldr	r1, [r7, #4]
 80065c6:	4613      	mov	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	440b      	add	r3, r1
 80065d0:	3324      	adds	r3, #36	; 0x24
 80065d2:	2201      	movs	r2, #1
 80065d4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80065d6:	4b39      	ldr	r3, [pc, #228]	; (80066bc <USBD_CDC_Init+0x1e8>)
 80065d8:	7819      	ldrb	r1, [r3, #0]
 80065da:	2340      	movs	r3, #64	; 0x40
 80065dc:	2202      	movs	r2, #2
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f002 fb53 	bl	8008c8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80065e4:	4b35      	ldr	r3, [pc, #212]	; (80066bc <USBD_CDC_Init+0x1e8>)
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	f003 020f 	and.w	r2, r3, #15
 80065ec:	6879      	ldr	r1, [r7, #4]
 80065ee:	4613      	mov	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	440b      	add	r3, r1
 80065f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065fc:	2201      	movs	r2, #1
 80065fe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006600:	4b2f      	ldr	r3, [pc, #188]	; (80066c0 <USBD_CDC_Init+0x1ec>)
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	f003 020f 	and.w	r2, r3, #15
 8006608:	6879      	ldr	r1, [r7, #4]
 800660a:	4613      	mov	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	440b      	add	r3, r1
 8006614:	3326      	adds	r3, #38	; 0x26
 8006616:	2210      	movs	r2, #16
 8006618:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800661a:	4b29      	ldr	r3, [pc, #164]	; (80066c0 <USBD_CDC_Init+0x1ec>)
 800661c:	7819      	ldrb	r1, [r3, #0]
 800661e:	2308      	movs	r3, #8
 8006620:	2203      	movs	r2, #3
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f002 fb31 	bl	8008c8a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006628:	4b25      	ldr	r3, [pc, #148]	; (80066c0 <USBD_CDC_Init+0x1ec>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	f003 020f 	and.w	r2, r3, #15
 8006630:	6879      	ldr	r1, [r7, #4]
 8006632:	4613      	mov	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	440b      	add	r3, r1
 800663c:	3324      	adds	r3, #36	; 0x24
 800663e:	2201      	movs	r2, #1
 8006640:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	33b0      	adds	r3, #176	; 0xb0
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006674:	2b00      	cmp	r3, #0
 8006676:	d101      	bne.n	800667c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006678:	2302      	movs	r3, #2
 800667a:	e018      	b.n	80066ae <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	7c1b      	ldrb	r3, [r3, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10a      	bne.n	800669a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006684:	4b0d      	ldr	r3, [pc, #52]	; (80066bc <USBD_CDC_Init+0x1e8>)
 8006686:	7819      	ldrb	r1, [r3, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800668e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f002 fbe8 	bl	8008e68 <USBD_LL_PrepareReceive>
 8006698:	e008      	b.n	80066ac <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800669a:	4b08      	ldr	r3, [pc, #32]	; (80066bc <USBD_CDC_Init+0x1e8>)
 800669c:	7819      	ldrb	r1, [r3, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066a4:	2340      	movs	r3, #64	; 0x40
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f002 fbde 	bl	8008e68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	20000097 	.word	0x20000097
 80066bc:	20000098 	.word	0x20000098
 80066c0:	20000099 	.word	0x20000099

080066c4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	460b      	mov	r3, r1
 80066ce:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80066d0:	4b3a      	ldr	r3, [pc, #232]	; (80067bc <USBD_CDC_DeInit+0xf8>)
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	4619      	mov	r1, r3
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f002 fafd 	bl	8008cd6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80066dc:	4b37      	ldr	r3, [pc, #220]	; (80067bc <USBD_CDC_DeInit+0xf8>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	f003 020f 	and.w	r2, r3, #15
 80066e4:	6879      	ldr	r1, [r7, #4]
 80066e6:	4613      	mov	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4413      	add	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	440b      	add	r3, r1
 80066f0:	3324      	adds	r3, #36	; 0x24
 80066f2:	2200      	movs	r2, #0
 80066f4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80066f6:	4b32      	ldr	r3, [pc, #200]	; (80067c0 <USBD_CDC_DeInit+0xfc>)
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	4619      	mov	r1, r3
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f002 faea 	bl	8008cd6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006702:	4b2f      	ldr	r3, [pc, #188]	; (80067c0 <USBD_CDC_DeInit+0xfc>)
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	f003 020f 	and.w	r2, r3, #15
 800670a:	6879      	ldr	r1, [r7, #4]
 800670c:	4613      	mov	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	440b      	add	r3, r1
 8006716:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800671a:	2200      	movs	r2, #0
 800671c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800671e:	4b29      	ldr	r3, [pc, #164]	; (80067c4 <USBD_CDC_DeInit+0x100>)
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f002 fad6 	bl	8008cd6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800672a:	4b26      	ldr	r3, [pc, #152]	; (80067c4 <USBD_CDC_DeInit+0x100>)
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	f003 020f 	and.w	r2, r3, #15
 8006732:	6879      	ldr	r1, [r7, #4]
 8006734:	4613      	mov	r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	4413      	add	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	440b      	add	r3, r1
 800673e:	3324      	adds	r3, #36	; 0x24
 8006740:	2200      	movs	r2, #0
 8006742:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006744:	4b1f      	ldr	r3, [pc, #124]	; (80067c4 <USBD_CDC_DeInit+0x100>)
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	f003 020f 	and.w	r2, r3, #15
 800674c:	6879      	ldr	r1, [r7, #4]
 800674e:	4613      	mov	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	440b      	add	r3, r1
 8006758:	3326      	adds	r3, #38	; 0x26
 800675a:	2200      	movs	r2, #0
 800675c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	32b0      	adds	r2, #176	; 0xb0
 8006768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d01f      	beq.n	80067b0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	33b0      	adds	r3, #176	; 0xb0
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	32b0      	adds	r2, #176	; 0xb0
 800678e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006792:	4618      	mov	r0, r3
 8006794:	f002 fbaa 	bl	8008eec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	32b0      	adds	r2, #176	; 0xb0
 80067a2:	2100      	movs	r1, #0
 80067a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	20000097 	.word	0x20000097
 80067c0:	20000098 	.word	0x20000098
 80067c4:	20000099 	.word	0x20000099

080067c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	32b0      	adds	r2, #176	; 0xb0
 80067dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80067e2:	2300      	movs	r3, #0
 80067e4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80067e6:	2300      	movs	r3, #0
 80067e8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e0bf      	b.n	8006978 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006800:	2b00      	cmp	r3, #0
 8006802:	d050      	beq.n	80068a6 <USBD_CDC_Setup+0xde>
 8006804:	2b20      	cmp	r3, #32
 8006806:	f040 80af 	bne.w	8006968 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	88db      	ldrh	r3, [r3, #6]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d03a      	beq.n	8006888 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	b25b      	sxtb	r3, r3
 8006818:	2b00      	cmp	r3, #0
 800681a:	da1b      	bge.n	8006854 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	33b0      	adds	r3, #176	; 0xb0
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006832:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	88d2      	ldrh	r2, [r2, #6]
 8006838:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	88db      	ldrh	r3, [r3, #6]
 800683e:	2b07      	cmp	r3, #7
 8006840:	bf28      	it	cs
 8006842:	2307      	movcs	r3, #7
 8006844:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	89fa      	ldrh	r2, [r7, #14]
 800684a:	4619      	mov	r1, r3
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f001 fd89 	bl	8008364 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006852:	e090      	b.n	8006976 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	785a      	ldrb	r2, [r3, #1]
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	88db      	ldrh	r3, [r3, #6]
 8006862:	2b3f      	cmp	r3, #63	; 0x3f
 8006864:	d803      	bhi.n	800686e <USBD_CDC_Setup+0xa6>
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	88db      	ldrh	r3, [r3, #6]
 800686a:	b2da      	uxtb	r2, r3
 800686c:	e000      	b.n	8006870 <USBD_CDC_Setup+0xa8>
 800686e:	2240      	movs	r2, #64	; 0x40
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006876:	6939      	ldr	r1, [r7, #16]
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800687e:	461a      	mov	r2, r3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f001 fd9b 	bl	80083bc <USBD_CtlPrepareRx>
      break;
 8006886:	e076      	b.n	8006976 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	33b0      	adds	r3, #176	; 0xb0
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	7850      	ldrb	r0, [r2, #1]
 800689e:	2200      	movs	r2, #0
 80068a0:	6839      	ldr	r1, [r7, #0]
 80068a2:	4798      	blx	r3
      break;
 80068a4:	e067      	b.n	8006976 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	785b      	ldrb	r3, [r3, #1]
 80068aa:	2b0b      	cmp	r3, #11
 80068ac:	d851      	bhi.n	8006952 <USBD_CDC_Setup+0x18a>
 80068ae:	a201      	add	r2, pc, #4	; (adr r2, 80068b4 <USBD_CDC_Setup+0xec>)
 80068b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b4:	080068e5 	.word	0x080068e5
 80068b8:	08006961 	.word	0x08006961
 80068bc:	08006953 	.word	0x08006953
 80068c0:	08006953 	.word	0x08006953
 80068c4:	08006953 	.word	0x08006953
 80068c8:	08006953 	.word	0x08006953
 80068cc:	08006953 	.word	0x08006953
 80068d0:	08006953 	.word	0x08006953
 80068d4:	08006953 	.word	0x08006953
 80068d8:	08006953 	.word	0x08006953
 80068dc:	0800690f 	.word	0x0800690f
 80068e0:	08006939 	.word	0x08006939
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	d107      	bne.n	8006900 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80068f0:	f107 030a 	add.w	r3, r7, #10
 80068f4:	2202      	movs	r2, #2
 80068f6:	4619      	mov	r1, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f001 fd33 	bl	8008364 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068fe:	e032      	b.n	8006966 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f001 fcbd 	bl	8008282 <USBD_CtlError>
            ret = USBD_FAIL;
 8006908:	2303      	movs	r3, #3
 800690a:	75fb      	strb	r3, [r7, #23]
          break;
 800690c:	e02b      	b.n	8006966 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b03      	cmp	r3, #3
 8006918:	d107      	bne.n	800692a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800691a:	f107 030d 	add.w	r3, r7, #13
 800691e:	2201      	movs	r2, #1
 8006920:	4619      	mov	r1, r3
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f001 fd1e 	bl	8008364 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006928:	e01d      	b.n	8006966 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f001 fca8 	bl	8008282 <USBD_CtlError>
            ret = USBD_FAIL;
 8006932:	2303      	movs	r3, #3
 8006934:	75fb      	strb	r3, [r7, #23]
          break;
 8006936:	e016      	b.n	8006966 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b03      	cmp	r3, #3
 8006942:	d00f      	beq.n	8006964 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f001 fc9b 	bl	8008282 <USBD_CtlError>
            ret = USBD_FAIL;
 800694c:	2303      	movs	r3, #3
 800694e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006950:	e008      	b.n	8006964 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f001 fc94 	bl	8008282 <USBD_CtlError>
          ret = USBD_FAIL;
 800695a:	2303      	movs	r3, #3
 800695c:	75fb      	strb	r3, [r7, #23]
          break;
 800695e:	e002      	b.n	8006966 <USBD_CDC_Setup+0x19e>
          break;
 8006960:	bf00      	nop
 8006962:	e008      	b.n	8006976 <USBD_CDC_Setup+0x1ae>
          break;
 8006964:	bf00      	nop
      }
      break;
 8006966:	e006      	b.n	8006976 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006968:	6839      	ldr	r1, [r7, #0]
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f001 fc89 	bl	8008282 <USBD_CtlError>
      ret = USBD_FAIL;
 8006970:	2303      	movs	r3, #3
 8006972:	75fb      	strb	r3, [r7, #23]
      break;
 8006974:	bf00      	nop
  }

  return (uint8_t)ret;
 8006976:	7dfb      	ldrb	r3, [r7, #23]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3718      	adds	r7, #24
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	460b      	mov	r3, r1
 800698a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006992:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	32b0      	adds	r2, #176	; 0xb0
 800699e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e065      	b.n	8006a76 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	32b0      	adds	r2, #176	; 0xb0
 80069b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80069ba:	78fb      	ldrb	r3, [r7, #3]
 80069bc:	f003 020f 	and.w	r2, r3, #15
 80069c0:	6879      	ldr	r1, [r7, #4]
 80069c2:	4613      	mov	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	440b      	add	r3, r1
 80069cc:	3318      	adds	r3, #24
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d02f      	beq.n	8006a34 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80069d4:	78fb      	ldrb	r3, [r7, #3]
 80069d6:	f003 020f 	and.w	r2, r3, #15
 80069da:	6879      	ldr	r1, [r7, #4]
 80069dc:	4613      	mov	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	440b      	add	r3, r1
 80069e6:	3318      	adds	r3, #24
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	78fb      	ldrb	r3, [r7, #3]
 80069ec:	f003 010f 	and.w	r1, r3, #15
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	460b      	mov	r3, r1
 80069f4:	00db      	lsls	r3, r3, #3
 80069f6:	440b      	add	r3, r1
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4403      	add	r3, r0
 80069fc:	3348      	adds	r3, #72	; 0x48
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a04:	fb01 f303 	mul.w	r3, r1, r3
 8006a08:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d112      	bne.n	8006a34 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006a0e:	78fb      	ldrb	r3, [r7, #3]
 8006a10:	f003 020f 	and.w	r2, r3, #15
 8006a14:	6879      	ldr	r1, [r7, #4]
 8006a16:	4613      	mov	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	440b      	add	r3, r1
 8006a20:	3318      	adds	r3, #24
 8006a22:	2200      	movs	r2, #0
 8006a24:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006a26:	78f9      	ldrb	r1, [r7, #3]
 8006a28:	2300      	movs	r3, #0
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f002 f9fa 	bl	8008e26 <USBD_LL_Transmit>
 8006a32:	e01f      	b.n	8006a74 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	33b0      	adds	r3, #176	; 0xb0
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d010      	beq.n	8006a74 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	33b0      	adds	r3, #176	; 0xb0
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006a70:	78fa      	ldrb	r2, [r7, #3]
 8006a72:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b084      	sub	sp, #16
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	460b      	mov	r3, r1
 8006a88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	32b0      	adds	r2, #176	; 0xb0
 8006a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a98:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	32b0      	adds	r2, #176	; 0xb0
 8006aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e01a      	b.n	8006ae6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ab0:	78fb      	ldrb	r3, [r7, #3]
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f002 f9f8 	bl	8008eaa <USBD_LL_GetRxDataSize>
 8006aba:	4602      	mov	r2, r0
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	33b0      	adds	r3, #176	; 0xb0
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	4413      	add	r3, r2
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006ae0:	4611      	mov	r1, r2
 8006ae2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b084      	sub	sp, #16
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	32b0      	adds	r2, #176	; 0xb0
 8006b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b04:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d101      	bne.n	8006b10 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e025      	b.n	8006b5c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	33b0      	adds	r3, #176	; 0xb0
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4413      	add	r3, r2
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d01a      	beq.n	8006b5a <USBD_CDC_EP0_RxReady+0x6c>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006b2a:	2bff      	cmp	r3, #255	; 0xff
 8006b2c:	d015      	beq.n	8006b5a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	33b0      	adds	r3, #176	; 0xb0
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006b46:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006b4e:	b292      	uxth	r2, r2
 8006b50:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	22ff      	movs	r2, #255	; 0xff
 8006b56:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b6c:	2182      	movs	r1, #130	; 0x82
 8006b6e:	4818      	ldr	r0, [pc, #96]	; (8006bd0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b70:	f000 fd4f 	bl	8007612 <USBD_GetEpDesc>
 8006b74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b76:	2101      	movs	r1, #1
 8006b78:	4815      	ldr	r0, [pc, #84]	; (8006bd0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b7a:	f000 fd4a 	bl	8007612 <USBD_GetEpDesc>
 8006b7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b80:	2181      	movs	r1, #129	; 0x81
 8006b82:	4813      	ldr	r0, [pc, #76]	; (8006bd0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b84:	f000 fd45 	bl	8007612 <USBD_GetEpDesc>
 8006b88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d002      	beq.n	8006b96 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	2210      	movs	r2, #16
 8006b94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d006      	beq.n	8006baa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ba4:	711a      	strb	r2, [r3, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d006      	beq.n	8006bbe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bb8:	711a      	strb	r2, [r3, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2243      	movs	r2, #67	; 0x43
 8006bc2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006bc4:	4b02      	ldr	r3, [pc, #8]	; (8006bd0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3718      	adds	r7, #24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	20000054 	.word	0x20000054

08006bd4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006bdc:	2182      	movs	r1, #130	; 0x82
 8006bde:	4818      	ldr	r0, [pc, #96]	; (8006c40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006be0:	f000 fd17 	bl	8007612 <USBD_GetEpDesc>
 8006be4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006be6:	2101      	movs	r1, #1
 8006be8:	4815      	ldr	r0, [pc, #84]	; (8006c40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006bea:	f000 fd12 	bl	8007612 <USBD_GetEpDesc>
 8006bee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006bf0:	2181      	movs	r1, #129	; 0x81
 8006bf2:	4813      	ldr	r0, [pc, #76]	; (8006c40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006bf4:	f000 fd0d 	bl	8007612 <USBD_GetEpDesc>
 8006bf8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	2210      	movs	r2, #16
 8006c04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d006      	beq.n	8006c1a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	711a      	strb	r2, [r3, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f042 0202 	orr.w	r2, r2, #2
 8006c18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d006      	beq.n	8006c2e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	711a      	strb	r2, [r3, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f042 0202 	orr.w	r2, r2, #2
 8006c2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2243      	movs	r2, #67	; 0x43
 8006c32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c34:	4b02      	ldr	r3, [pc, #8]	; (8006c40 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3718      	adds	r7, #24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	20000054 	.word	0x20000054

08006c44 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c4c:	2182      	movs	r1, #130	; 0x82
 8006c4e:	4818      	ldr	r0, [pc, #96]	; (8006cb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c50:	f000 fcdf 	bl	8007612 <USBD_GetEpDesc>
 8006c54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c56:	2101      	movs	r1, #1
 8006c58:	4815      	ldr	r0, [pc, #84]	; (8006cb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c5a:	f000 fcda 	bl	8007612 <USBD_GetEpDesc>
 8006c5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c60:	2181      	movs	r1, #129	; 0x81
 8006c62:	4813      	ldr	r0, [pc, #76]	; (8006cb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c64:	f000 fcd5 	bl	8007612 <USBD_GetEpDesc>
 8006c68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d002      	beq.n	8006c76 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	2210      	movs	r2, #16
 8006c74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d006      	beq.n	8006c8a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c84:	711a      	strb	r2, [r3, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d006      	beq.n	8006c9e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c98:	711a      	strb	r2, [r3, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2243      	movs	r2, #67	; 0x43
 8006ca2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006ca4:	4b02      	ldr	r3, [pc, #8]	; (8006cb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3718      	adds	r7, #24
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	20000054 	.word	0x20000054

08006cb4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	220a      	movs	r2, #10
 8006cc0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006cc2:	4b03      	ldr	r3, [pc, #12]	; (8006cd0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	20000010 	.word	0x20000010

08006cd4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d101      	bne.n	8006ce8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e009      	b.n	8006cfc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	33b0      	adds	r3, #176	; 0xb0
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b087      	sub	sp, #28
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	32b0      	adds	r2, #176	; 0xb0
 8006d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d22:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e008      	b.n	8006d40 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	371c      	adds	r7, #28
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	32b0      	adds	r2, #176	; 0xb0
 8006d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d64:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e004      	b.n	8006d7a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3714      	adds	r7, #20
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
	...

08006d88 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	32b0      	adds	r2, #176	; 0xb0
 8006d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d9e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006da0:	2301      	movs	r3, #1
 8006da2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	32b0      	adds	r2, #176	; 0xb0
 8006dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d101      	bne.n	8006dba <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e025      	b.n	8006e06 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d11f      	bne.n	8006e04 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006dcc:	4b10      	ldr	r3, [pc, #64]	; (8006e10 <USBD_CDC_TransmitPacket+0x88>)
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	f003 020f 	and.w	r2, r3, #15
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4403      	add	r3, r0
 8006de6:	3318      	adds	r3, #24
 8006de8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006dea:	4b09      	ldr	r3, [pc, #36]	; (8006e10 <USBD_CDC_TransmitPacket+0x88>)
 8006dec:	7819      	ldrb	r1, [r3, #0]
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f002 f813 	bl	8008e26 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	20000097 	.word	0x20000097

08006e14 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	32b0      	adds	r2, #176	; 0xb0
 8006e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e2a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	32b0      	adds	r2, #176	; 0xb0
 8006e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e018      	b.n	8006e74 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	7c1b      	ldrb	r3, [r3, #16]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10a      	bne.n	8006e60 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e4a:	4b0c      	ldr	r3, [pc, #48]	; (8006e7c <USBD_CDC_ReceivePacket+0x68>)
 8006e4c:	7819      	ldrb	r1, [r3, #0]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f002 f805 	bl	8008e68 <USBD_LL_PrepareReceive>
 8006e5e:	e008      	b.n	8006e72 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e60:	4b06      	ldr	r3, [pc, #24]	; (8006e7c <USBD_CDC_ReceivePacket+0x68>)
 8006e62:	7819      	ldrb	r1, [r3, #0]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e6a:	2340      	movs	r3, #64	; 0x40
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f001 fffb 	bl	8008e68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	20000098 	.word	0x20000098

08006e80 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e01f      	b.n	8006ed8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	79fa      	ldrb	r2, [r7, #7]
 8006eca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f001 fe75 	bl	8008bbc <USBD_LL_Init>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3718      	adds	r7, #24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006eea:	2300      	movs	r3, #0
 8006eec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e025      	b.n	8006f44 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	32ae      	adds	r2, #174	; 0xae
 8006f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00f      	beq.n	8006f34 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	32ae      	adds	r2, #174	; 0xae
 8006f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f24:	f107 020e 	add.w	r2, r7, #14
 8006f28:	4610      	mov	r0, r2
 8006f2a:	4798      	blx	r3
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006f3a:	1c5a      	adds	r2, r3, #1
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 fe7d 	bl	8008c54 <USBD_LL_Start>
 8006f5a:	4603      	mov	r3, r0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f6c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	460b      	mov	r3, r1
 8006f84:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d009      	beq.n	8006fa8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	78fa      	ldrb	r2, [r7, #3]
 8006f9e:	4611      	mov	r1, r2
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	4798      	blx	r3
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b084      	sub	sp, #16
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
 8006fba:	460b      	mov	r3, r1
 8006fbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	78fa      	ldrb	r2, [r7, #3]
 8006fcc:	4611      	mov	r1, r2
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	4798      	blx	r3
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d001      	beq.n	8006fdc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ff6:	6839      	ldr	r1, [r7, #0]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f001 f908 	bl	800820e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800700c:	461a      	mov	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800701a:	f003 031f 	and.w	r3, r3, #31
 800701e:	2b02      	cmp	r3, #2
 8007020:	d01a      	beq.n	8007058 <USBD_LL_SetupStage+0x72>
 8007022:	2b02      	cmp	r3, #2
 8007024:	d822      	bhi.n	800706c <USBD_LL_SetupStage+0x86>
 8007026:	2b00      	cmp	r3, #0
 8007028:	d002      	beq.n	8007030 <USBD_LL_SetupStage+0x4a>
 800702a:	2b01      	cmp	r3, #1
 800702c:	d00a      	beq.n	8007044 <USBD_LL_SetupStage+0x5e>
 800702e:	e01d      	b.n	800706c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007036:	4619      	mov	r1, r3
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fb5f 	bl	80076fc <USBD_StdDevReq>
 800703e:	4603      	mov	r3, r0
 8007040:	73fb      	strb	r3, [r7, #15]
      break;
 8007042:	e020      	b.n	8007086 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800704a:	4619      	mov	r1, r3
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fbc7 	bl	80077e0 <USBD_StdItfReq>
 8007052:	4603      	mov	r3, r0
 8007054:	73fb      	strb	r3, [r7, #15]
      break;
 8007056:	e016      	b.n	8007086 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800705e:	4619      	mov	r1, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fc29 	bl	80078b8 <USBD_StdEPReq>
 8007066:	4603      	mov	r3, r0
 8007068:	73fb      	strb	r3, [r7, #15]
      break;
 800706a:	e00c      	b.n	8007086 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007072:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007076:	b2db      	uxtb	r3, r3
 8007078:	4619      	mov	r1, r3
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f001 fe4a 	bl	8008d14 <USBD_LL_StallEP>
 8007080:	4603      	mov	r3, r0
 8007082:	73fb      	strb	r3, [r7, #15]
      break;
 8007084:	bf00      	nop
  }

  return ret;
 8007086:	7bfb      	ldrb	r3, [r7, #15]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	460b      	mov	r3, r1
 800709a:	607a      	str	r2, [r7, #4]
 800709c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80070a2:	7afb      	ldrb	r3, [r7, #11]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d16e      	bne.n	8007186 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80070ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070b6:	2b03      	cmp	r3, #3
 80070b8:	f040 8098 	bne.w	80071ec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	689a      	ldr	r2, [r3, #8]
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d913      	bls.n	80070f0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	689a      	ldr	r2, [r3, #8]
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	1ad2      	subs	r2, r2, r3
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	68da      	ldr	r2, [r3, #12]
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	4293      	cmp	r3, r2
 80070e0:	bf28      	it	cs
 80070e2:	4613      	movcs	r3, r2
 80070e4:	461a      	mov	r2, r3
 80070e6:	6879      	ldr	r1, [r7, #4]
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f001 f984 	bl	80083f6 <USBD_CtlContinueRx>
 80070ee:	e07d      	b.n	80071ec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80070f6:	f003 031f 	and.w	r3, r3, #31
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d014      	beq.n	8007128 <USBD_LL_DataOutStage+0x98>
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d81d      	bhi.n	800713e <USBD_LL_DataOutStage+0xae>
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <USBD_LL_DataOutStage+0x7c>
 8007106:	2b01      	cmp	r3, #1
 8007108:	d003      	beq.n	8007112 <USBD_LL_DataOutStage+0x82>
 800710a:	e018      	b.n	800713e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800710c:	2300      	movs	r3, #0
 800710e:	75bb      	strb	r3, [r7, #22]
            break;
 8007110:	e018      	b.n	8007144 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007118:	b2db      	uxtb	r3, r3
 800711a:	4619      	mov	r1, r3
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 fa5e 	bl	80075de <USBD_CoreFindIF>
 8007122:	4603      	mov	r3, r0
 8007124:	75bb      	strb	r3, [r7, #22]
            break;
 8007126:	e00d      	b.n	8007144 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800712e:	b2db      	uxtb	r3, r3
 8007130:	4619      	mov	r1, r3
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f000 fa60 	bl	80075f8 <USBD_CoreFindEP>
 8007138:	4603      	mov	r3, r0
 800713a:	75bb      	strb	r3, [r7, #22]
            break;
 800713c:	e002      	b.n	8007144 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800713e:	2300      	movs	r3, #0
 8007140:	75bb      	strb	r3, [r7, #22]
            break;
 8007142:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007144:	7dbb      	ldrb	r3, [r7, #22]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d119      	bne.n	800717e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b03      	cmp	r3, #3
 8007154:	d113      	bne.n	800717e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007156:	7dba      	ldrb	r2, [r7, #22]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	32ae      	adds	r2, #174	; 0xae
 800715c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00b      	beq.n	800717e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007166:	7dba      	ldrb	r2, [r7, #22]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800716e:	7dba      	ldrb	r2, [r7, #22]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	32ae      	adds	r2, #174	; 0xae
 8007174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f001 f94a 	bl	8008418 <USBD_CtlSendStatus>
 8007184:	e032      	b.n	80071ec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007186:	7afb      	ldrb	r3, [r7, #11]
 8007188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800718c:	b2db      	uxtb	r3, r3
 800718e:	4619      	mov	r1, r3
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 fa31 	bl	80075f8 <USBD_CoreFindEP>
 8007196:	4603      	mov	r3, r0
 8007198:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800719a:	7dbb      	ldrb	r3, [r7, #22]
 800719c:	2bff      	cmp	r3, #255	; 0xff
 800719e:	d025      	beq.n	80071ec <USBD_LL_DataOutStage+0x15c>
 80071a0:	7dbb      	ldrb	r3, [r7, #22]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d122      	bne.n	80071ec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d117      	bne.n	80071e2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80071b2:	7dba      	ldrb	r2, [r7, #22]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	32ae      	adds	r2, #174	; 0xae
 80071b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00f      	beq.n	80071e2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80071c2:	7dba      	ldrb	r2, [r7, #22]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80071ca:	7dba      	ldrb	r2, [r7, #22]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	32ae      	adds	r2, #174	; 0xae
 80071d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	7afa      	ldrb	r2, [r7, #11]
 80071d8:	4611      	mov	r1, r2
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	4798      	blx	r3
 80071de:	4603      	mov	r3, r0
 80071e0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80071e2:	7dfb      	ldrb	r3, [r7, #23]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d001      	beq.n	80071ec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80071e8:	7dfb      	ldrb	r3, [r7, #23]
 80071ea:	e000      	b.n	80071ee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3718      	adds	r7, #24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b086      	sub	sp, #24
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	60f8      	str	r0, [r7, #12]
 80071fe:	460b      	mov	r3, r1
 8007200:	607a      	str	r2, [r7, #4]
 8007202:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007204:	7afb      	ldrb	r3, [r7, #11]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d16f      	bne.n	80072ea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	3314      	adds	r3, #20
 800720e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007216:	2b02      	cmp	r3, #2
 8007218:	d15a      	bne.n	80072d0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	689a      	ldr	r2, [r3, #8]
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	429a      	cmp	r2, r3
 8007224:	d914      	bls.n	8007250 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	689a      	ldr	r2, [r3, #8]
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	1ad2      	subs	r2, r2, r3
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	461a      	mov	r2, r3
 800723a:	6879      	ldr	r1, [r7, #4]
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f001 f8ac 	bl	800839a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007242:	2300      	movs	r3, #0
 8007244:	2200      	movs	r2, #0
 8007246:	2100      	movs	r1, #0
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f001 fe0d 	bl	8008e68 <USBD_LL_PrepareReceive>
 800724e:	e03f      	b.n	80072d0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	68da      	ldr	r2, [r3, #12]
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	429a      	cmp	r2, r3
 800725a:	d11c      	bne.n	8007296 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007264:	429a      	cmp	r2, r3
 8007266:	d316      	bcc.n	8007296 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007272:	429a      	cmp	r2, r3
 8007274:	d20f      	bcs.n	8007296 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007276:	2200      	movs	r2, #0
 8007278:	2100      	movs	r1, #0
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f001 f88d 	bl	800839a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007288:	2300      	movs	r3, #0
 800728a:	2200      	movs	r2, #0
 800728c:	2100      	movs	r1, #0
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f001 fdea 	bl	8008e68 <USBD_LL_PrepareReceive>
 8007294:	e01c      	b.n	80072d0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d10f      	bne.n	80072c2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d009      	beq.n	80072c2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80072c2:	2180      	movs	r1, #128	; 0x80
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f001 fd25 	bl	8008d14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f001 f8b7 	bl	800843e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d03a      	beq.n	8007350 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f7ff fe42 	bl	8006f64 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80072e8:	e032      	b.n	8007350 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80072ea:	7afb      	ldrb	r3, [r7, #11]
 80072ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	4619      	mov	r1, r3
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 f97f 	bl	80075f8 <USBD_CoreFindEP>
 80072fa:	4603      	mov	r3, r0
 80072fc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
 8007300:	2bff      	cmp	r3, #255	; 0xff
 8007302:	d025      	beq.n	8007350 <USBD_LL_DataInStage+0x15a>
 8007304:	7dfb      	ldrb	r3, [r7, #23]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d122      	bne.n	8007350 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b03      	cmp	r3, #3
 8007314:	d11c      	bne.n	8007350 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007316:	7dfa      	ldrb	r2, [r7, #23]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	32ae      	adds	r2, #174	; 0xae
 800731c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d014      	beq.n	8007350 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007326:	7dfa      	ldrb	r2, [r7, #23]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800732e:	7dfa      	ldrb	r2, [r7, #23]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	32ae      	adds	r2, #174	; 0xae
 8007334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	7afa      	ldrb	r2, [r7, #11]
 800733c:	4611      	mov	r1, r2
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	4798      	blx	r3
 8007342:	4603      	mov	r3, r0
 8007344:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007346:	7dbb      	ldrb	r3, [r7, #22]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800734c:	7dbb      	ldrb	r3, [r7, #22]
 800734e:	e000      	b.n	8007352 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3718      	adds	r7, #24
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b084      	sub	sp, #16
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007362:	2300      	movs	r3, #0
 8007364:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007392:	2b00      	cmp	r3, #0
 8007394:	d014      	beq.n	80073c0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00e      	beq.n	80073c0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	6852      	ldr	r2, [r2, #4]
 80073ae:	b2d2      	uxtb	r2, r2
 80073b0:	4611      	mov	r1, r2
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	4798      	blx	r3
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80073bc:	2303      	movs	r3, #3
 80073be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073c0:	2340      	movs	r3, #64	; 0x40
 80073c2:	2200      	movs	r2, #0
 80073c4:	2100      	movs	r1, #0
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f001 fc5f 	bl	8008c8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2240      	movs	r2, #64	; 0x40
 80073d8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073dc:	2340      	movs	r3, #64	; 0x40
 80073de:	2200      	movs	r2, #0
 80073e0:	2180      	movs	r1, #128	; 0x80
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f001 fc51 	bl	8008c8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2240      	movs	r2, #64	; 0x40
 80073f2:	621a      	str	r2, [r3, #32]

  return ret;
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80073fe:	b480      	push	{r7}
 8007400:	b083      	sub	sp, #12
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	460b      	mov	r3, r1
 8007408:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	78fa      	ldrb	r2, [r7, #3]
 800740e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800741e:	b480      	push	{r7}
 8007420:	b083      	sub	sp, #12
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800742c:	b2da      	uxtb	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2204      	movs	r2, #4
 8007438:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800744a:	b480      	push	{r7}
 800744c:	b083      	sub	sp, #12
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b04      	cmp	r3, #4
 800745c:	d106      	bne.n	800746c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007464:	b2da      	uxtb	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	370c      	adds	r7, #12
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b082      	sub	sp, #8
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b03      	cmp	r3, #3
 800748c:	d110      	bne.n	80074b0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00b      	beq.n	80074b0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800749e:	69db      	ldr	r3, [r3, #28]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d005      	beq.n	80074b0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074aa:	69db      	ldr	r3, [r3, #28]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b082      	sub	sp, #8
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	460b      	mov	r3, r1
 80074c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	32ae      	adds	r2, #174	; 0xae
 80074d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d101      	bne.n	80074dc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80074d8:	2303      	movs	r3, #3
 80074da:	e01c      	b.n	8007516 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	2b03      	cmp	r3, #3
 80074e6:	d115      	bne.n	8007514 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	32ae      	adds	r2, #174	; 0xae
 80074f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00b      	beq.n	8007514 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	32ae      	adds	r2, #174	; 0xae
 8007506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800750a:	6a1b      	ldr	r3, [r3, #32]
 800750c:	78fa      	ldrb	r2, [r7, #3]
 800750e:	4611      	mov	r1, r2
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b082      	sub	sp, #8
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	460b      	mov	r3, r1
 8007528:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	32ae      	adds	r2, #174	; 0xae
 8007534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d101      	bne.n	8007540 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800753c:	2303      	movs	r3, #3
 800753e:	e01c      	b.n	800757a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b03      	cmp	r3, #3
 800754a:	d115      	bne.n	8007578 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	32ae      	adds	r2, #174	; 0xae
 8007556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00b      	beq.n	8007578 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	32ae      	adds	r2, #174	; 0xae
 800756a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800756e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007570:	78fa      	ldrb	r2, [r7, #3]
 8007572:	4611      	mov	r1, r2
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007582:	b480      	push	{r7}
 8007584:	b083      	sub	sp, #12
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00e      	beq.n	80075d4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	6852      	ldr	r2, [r2, #4]
 80075c2:	b2d2      	uxtb	r2, r2
 80075c4:	4611      	mov	r1, r2
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	4798      	blx	r3
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d001      	beq.n	80075d4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80075d0:	2303      	movs	r3, #3
 80075d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80075de:	b480      	push	{r7}
 80075e0:	b083      	sub	sp, #12
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	460b      	mov	r3, r1
 80075e8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80075ea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	460b      	mov	r3, r1
 8007602:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007604:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007606:	4618      	mov	r0, r3
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b086      	sub	sp, #24
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	460b      	mov	r3, r1
 800761c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007626:	2300      	movs	r3, #0
 8007628:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	885b      	ldrh	r3, [r3, #2]
 800762e:	b29a      	uxth	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	b29b      	uxth	r3, r3
 8007636:	429a      	cmp	r2, r3
 8007638:	d920      	bls.n	800767c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	b29b      	uxth	r3, r3
 8007640:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007642:	e013      	b.n	800766c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007644:	f107 030a 	add.w	r3, r7, #10
 8007648:	4619      	mov	r1, r3
 800764a:	6978      	ldr	r0, [r7, #20]
 800764c:	f000 f81b 	bl	8007686 <USBD_GetNextDesc>
 8007650:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	785b      	ldrb	r3, [r3, #1]
 8007656:	2b05      	cmp	r3, #5
 8007658:	d108      	bne.n	800766c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	789b      	ldrb	r3, [r3, #2]
 8007662:	78fa      	ldrb	r2, [r7, #3]
 8007664:	429a      	cmp	r2, r3
 8007666:	d008      	beq.n	800767a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007668:	2300      	movs	r3, #0
 800766a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	885b      	ldrh	r3, [r3, #2]
 8007670:	b29a      	uxth	r2, r3
 8007672:	897b      	ldrh	r3, [r7, #10]
 8007674:	429a      	cmp	r2, r3
 8007676:	d8e5      	bhi.n	8007644 <USBD_GetEpDesc+0x32>
 8007678:	e000      	b.n	800767c <USBD_GetEpDesc+0x6a>
          break;
 800767a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800767c:	693b      	ldr	r3, [r7, #16]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3718      	adds	r7, #24
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007686:	b480      	push	{r7}
 8007688:	b085      	sub	sp, #20
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	881a      	ldrh	r2, [r3, #0]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	b29b      	uxth	r3, r3
 800769e:	4413      	add	r3, r2
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4413      	add	r3, r2
 80076b0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80076b2:	68fb      	ldr	r3, [r7, #12]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b087      	sub	sp, #28
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	3301      	adds	r3, #1
 80076d6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80076de:	8a3b      	ldrh	r3, [r7, #16]
 80076e0:	021b      	lsls	r3, r3, #8
 80076e2:	b21a      	sxth	r2, r3
 80076e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	b21b      	sxth	r3, r3
 80076ec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80076ee:	89fb      	ldrh	r3, [r7, #14]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	371c      	adds	r7, #28
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007712:	2b40      	cmp	r3, #64	; 0x40
 8007714:	d005      	beq.n	8007722 <USBD_StdDevReq+0x26>
 8007716:	2b40      	cmp	r3, #64	; 0x40
 8007718:	d857      	bhi.n	80077ca <USBD_StdDevReq+0xce>
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00f      	beq.n	800773e <USBD_StdDevReq+0x42>
 800771e:	2b20      	cmp	r3, #32
 8007720:	d153      	bne.n	80077ca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	32ae      	adds	r2, #174	; 0xae
 800772c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	6839      	ldr	r1, [r7, #0]
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	4798      	blx	r3
 8007738:	4603      	mov	r3, r0
 800773a:	73fb      	strb	r3, [r7, #15]
      break;
 800773c:	e04a      	b.n	80077d4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	785b      	ldrb	r3, [r3, #1]
 8007742:	2b09      	cmp	r3, #9
 8007744:	d83b      	bhi.n	80077be <USBD_StdDevReq+0xc2>
 8007746:	a201      	add	r2, pc, #4	; (adr r2, 800774c <USBD_StdDevReq+0x50>)
 8007748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774c:	080077a1 	.word	0x080077a1
 8007750:	080077b5 	.word	0x080077b5
 8007754:	080077bf 	.word	0x080077bf
 8007758:	080077ab 	.word	0x080077ab
 800775c:	080077bf 	.word	0x080077bf
 8007760:	0800777f 	.word	0x0800777f
 8007764:	08007775 	.word	0x08007775
 8007768:	080077bf 	.word	0x080077bf
 800776c:	08007797 	.word	0x08007797
 8007770:	08007789 	.word	0x08007789
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007774:	6839      	ldr	r1, [r7, #0]
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fa3c 	bl	8007bf4 <USBD_GetDescriptor>
          break;
 800777c:	e024      	b.n	80077c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fba1 	bl	8007ec8 <USBD_SetAddress>
          break;
 8007786:	e01f      	b.n	80077c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fbe0 	bl	8007f50 <USBD_SetConfig>
 8007790:	4603      	mov	r3, r0
 8007792:	73fb      	strb	r3, [r7, #15]
          break;
 8007794:	e018      	b.n	80077c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fc83 	bl	80080a4 <USBD_GetConfig>
          break;
 800779e:	e013      	b.n	80077c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fcb4 	bl	8008110 <USBD_GetStatus>
          break;
 80077a8:	e00e      	b.n	80077c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80077aa:	6839      	ldr	r1, [r7, #0]
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fce3 	bl	8008178 <USBD_SetFeature>
          break;
 80077b2:	e009      	b.n	80077c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fd07 	bl	80081ca <USBD_ClrFeature>
          break;
 80077bc:	e004      	b.n	80077c8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80077be:	6839      	ldr	r1, [r7, #0]
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 fd5e 	bl	8008282 <USBD_CtlError>
          break;
 80077c6:	bf00      	nop
      }
      break;
 80077c8:	e004      	b.n	80077d4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80077ca:	6839      	ldr	r1, [r7, #0]
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fd58 	bl	8008282 <USBD_CtlError>
      break;
 80077d2:	bf00      	nop
  }

  return ret;
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop

080077e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077ea:	2300      	movs	r3, #0
 80077ec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077f6:	2b40      	cmp	r3, #64	; 0x40
 80077f8:	d005      	beq.n	8007806 <USBD_StdItfReq+0x26>
 80077fa:	2b40      	cmp	r3, #64	; 0x40
 80077fc:	d852      	bhi.n	80078a4 <USBD_StdItfReq+0xc4>
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <USBD_StdItfReq+0x26>
 8007802:	2b20      	cmp	r3, #32
 8007804:	d14e      	bne.n	80078a4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800780c:	b2db      	uxtb	r3, r3
 800780e:	3b01      	subs	r3, #1
 8007810:	2b02      	cmp	r3, #2
 8007812:	d840      	bhi.n	8007896 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	889b      	ldrh	r3, [r3, #4]
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b01      	cmp	r3, #1
 800781c:	d836      	bhi.n	800788c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	889b      	ldrh	r3, [r3, #4]
 8007822:	b2db      	uxtb	r3, r3
 8007824:	4619      	mov	r1, r3
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f7ff fed9 	bl	80075de <USBD_CoreFindIF>
 800782c:	4603      	mov	r3, r0
 800782e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007830:	7bbb      	ldrb	r3, [r7, #14]
 8007832:	2bff      	cmp	r3, #255	; 0xff
 8007834:	d01d      	beq.n	8007872 <USBD_StdItfReq+0x92>
 8007836:	7bbb      	ldrb	r3, [r7, #14]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d11a      	bne.n	8007872 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800783c:	7bba      	ldrb	r2, [r7, #14]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	32ae      	adds	r2, #174	; 0xae
 8007842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00f      	beq.n	800786c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800784c:	7bba      	ldrb	r2, [r7, #14]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007854:	7bba      	ldrb	r2, [r7, #14]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	32ae      	adds	r2, #174	; 0xae
 800785a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	4798      	blx	r3
 8007866:	4603      	mov	r3, r0
 8007868:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800786a:	e004      	b.n	8007876 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800786c:	2303      	movs	r3, #3
 800786e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007870:	e001      	b.n	8007876 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007872:	2303      	movs	r3, #3
 8007874:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	88db      	ldrh	r3, [r3, #6]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d110      	bne.n	80078a0 <USBD_StdItfReq+0xc0>
 800787e:	7bfb      	ldrb	r3, [r7, #15]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10d      	bne.n	80078a0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fdc7 	bl	8008418 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800788a:	e009      	b.n	80078a0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800788c:	6839      	ldr	r1, [r7, #0]
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 fcf7 	bl	8008282 <USBD_CtlError>
          break;
 8007894:	e004      	b.n	80078a0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007896:	6839      	ldr	r1, [r7, #0]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fcf2 	bl	8008282 <USBD_CtlError>
          break;
 800789e:	e000      	b.n	80078a2 <USBD_StdItfReq+0xc2>
          break;
 80078a0:	bf00      	nop
      }
      break;
 80078a2:	e004      	b.n	80078ae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fceb 	bl	8008282 <USBD_CtlError>
      break;
 80078ac:	bf00      	nop
  }

  return ret;
 80078ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	889b      	ldrh	r3, [r3, #4]
 80078ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078d4:	2b40      	cmp	r3, #64	; 0x40
 80078d6:	d007      	beq.n	80078e8 <USBD_StdEPReq+0x30>
 80078d8:	2b40      	cmp	r3, #64	; 0x40
 80078da:	f200 817f 	bhi.w	8007bdc <USBD_StdEPReq+0x324>
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d02a      	beq.n	8007938 <USBD_StdEPReq+0x80>
 80078e2:	2b20      	cmp	r3, #32
 80078e4:	f040 817a 	bne.w	8007bdc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80078e8:	7bbb      	ldrb	r3, [r7, #14]
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f7ff fe83 	bl	80075f8 <USBD_CoreFindEP>
 80078f2:	4603      	mov	r3, r0
 80078f4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078f6:	7b7b      	ldrb	r3, [r7, #13]
 80078f8:	2bff      	cmp	r3, #255	; 0xff
 80078fa:	f000 8174 	beq.w	8007be6 <USBD_StdEPReq+0x32e>
 80078fe:	7b7b      	ldrb	r3, [r7, #13]
 8007900:	2b00      	cmp	r3, #0
 8007902:	f040 8170 	bne.w	8007be6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007906:	7b7a      	ldrb	r2, [r7, #13]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800790e:	7b7a      	ldrb	r2, [r7, #13]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	32ae      	adds	r2, #174	; 0xae
 8007914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 8163 	beq.w	8007be6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007920:	7b7a      	ldrb	r2, [r7, #13]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	32ae      	adds	r2, #174	; 0xae
 8007926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	4798      	blx	r3
 8007932:	4603      	mov	r3, r0
 8007934:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007936:	e156      	b.n	8007be6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	785b      	ldrb	r3, [r3, #1]
 800793c:	2b03      	cmp	r3, #3
 800793e:	d008      	beq.n	8007952 <USBD_StdEPReq+0x9a>
 8007940:	2b03      	cmp	r3, #3
 8007942:	f300 8145 	bgt.w	8007bd0 <USBD_StdEPReq+0x318>
 8007946:	2b00      	cmp	r3, #0
 8007948:	f000 809b 	beq.w	8007a82 <USBD_StdEPReq+0x1ca>
 800794c:	2b01      	cmp	r3, #1
 800794e:	d03c      	beq.n	80079ca <USBD_StdEPReq+0x112>
 8007950:	e13e      	b.n	8007bd0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b02      	cmp	r3, #2
 800795c:	d002      	beq.n	8007964 <USBD_StdEPReq+0xac>
 800795e:	2b03      	cmp	r3, #3
 8007960:	d016      	beq.n	8007990 <USBD_StdEPReq+0xd8>
 8007962:	e02c      	b.n	80079be <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007964:	7bbb      	ldrb	r3, [r7, #14]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00d      	beq.n	8007986 <USBD_StdEPReq+0xce>
 800796a:	7bbb      	ldrb	r3, [r7, #14]
 800796c:	2b80      	cmp	r3, #128	; 0x80
 800796e:	d00a      	beq.n	8007986 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007970:	7bbb      	ldrb	r3, [r7, #14]
 8007972:	4619      	mov	r1, r3
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f001 f9cd 	bl	8008d14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800797a:	2180      	movs	r1, #128	; 0x80
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f001 f9c9 	bl	8008d14 <USBD_LL_StallEP>
 8007982:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007984:	e020      	b.n	80079c8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fc7a 	bl	8008282 <USBD_CtlError>
              break;
 800798e:	e01b      	b.n	80079c8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	885b      	ldrh	r3, [r3, #2]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10e      	bne.n	80079b6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007998:	7bbb      	ldrb	r3, [r7, #14]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00b      	beq.n	80079b6 <USBD_StdEPReq+0xfe>
 800799e:	7bbb      	ldrb	r3, [r7, #14]
 80079a0:	2b80      	cmp	r3, #128	; 0x80
 80079a2:	d008      	beq.n	80079b6 <USBD_StdEPReq+0xfe>
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	88db      	ldrh	r3, [r3, #6]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d104      	bne.n	80079b6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	4619      	mov	r1, r3
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f001 f9af 	bl	8008d14 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 fd2e 	bl	8008418 <USBD_CtlSendStatus>

              break;
 80079bc:	e004      	b.n	80079c8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80079be:	6839      	ldr	r1, [r7, #0]
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 fc5e 	bl	8008282 <USBD_CtlError>
              break;
 80079c6:	bf00      	nop
          }
          break;
 80079c8:	e107      	b.n	8007bda <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d002      	beq.n	80079dc <USBD_StdEPReq+0x124>
 80079d6:	2b03      	cmp	r3, #3
 80079d8:	d016      	beq.n	8007a08 <USBD_StdEPReq+0x150>
 80079da:	e04b      	b.n	8007a74 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079dc:	7bbb      	ldrb	r3, [r7, #14]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00d      	beq.n	80079fe <USBD_StdEPReq+0x146>
 80079e2:	7bbb      	ldrb	r3, [r7, #14]
 80079e4:	2b80      	cmp	r3, #128	; 0x80
 80079e6:	d00a      	beq.n	80079fe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80079e8:	7bbb      	ldrb	r3, [r7, #14]
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f001 f991 	bl	8008d14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80079f2:	2180      	movs	r1, #128	; 0x80
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f001 f98d 	bl	8008d14 <USBD_LL_StallEP>
 80079fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079fc:	e040      	b.n	8007a80 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 fc3e 	bl	8008282 <USBD_CtlError>
              break;
 8007a06:	e03b      	b.n	8007a80 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	885b      	ldrh	r3, [r3, #2]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d136      	bne.n	8007a7e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
 8007a12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d004      	beq.n	8007a24 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a1a:	7bbb      	ldrb	r3, [r7, #14]
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f001 f997 	bl	8008d52 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fcf7 	bl	8008418 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7ff fde2 	bl	80075f8 <USBD_CoreFindEP>
 8007a34:	4603      	mov	r3, r0
 8007a36:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a38:	7b7b      	ldrb	r3, [r7, #13]
 8007a3a:	2bff      	cmp	r3, #255	; 0xff
 8007a3c:	d01f      	beq.n	8007a7e <USBD_StdEPReq+0x1c6>
 8007a3e:	7b7b      	ldrb	r3, [r7, #13]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d11c      	bne.n	8007a7e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007a44:	7b7a      	ldrb	r2, [r7, #13]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007a4c:	7b7a      	ldrb	r2, [r7, #13]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	32ae      	adds	r2, #174	; 0xae
 8007a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d010      	beq.n	8007a7e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007a5c:	7b7a      	ldrb	r2, [r7, #13]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	32ae      	adds	r2, #174	; 0xae
 8007a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	6839      	ldr	r1, [r7, #0]
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	4798      	blx	r3
 8007a6e:	4603      	mov	r3, r0
 8007a70:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007a72:	e004      	b.n	8007a7e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007a74:	6839      	ldr	r1, [r7, #0]
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fc03 	bl	8008282 <USBD_CtlError>
              break;
 8007a7c:	e000      	b.n	8007a80 <USBD_StdEPReq+0x1c8>
              break;
 8007a7e:	bf00      	nop
          }
          break;
 8007a80:	e0ab      	b.n	8007bda <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d002      	beq.n	8007a94 <USBD_StdEPReq+0x1dc>
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	d032      	beq.n	8007af8 <USBD_StdEPReq+0x240>
 8007a92:	e097      	b.n	8007bc4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d007      	beq.n	8007aaa <USBD_StdEPReq+0x1f2>
 8007a9a:	7bbb      	ldrb	r3, [r7, #14]
 8007a9c:	2b80      	cmp	r3, #128	; 0x80
 8007a9e:	d004      	beq.n	8007aaa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fbed 	bl	8008282 <USBD_CtlError>
                break;
 8007aa8:	e091      	b.n	8007bce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007aaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	da0b      	bge.n	8007aca <USBD_StdEPReq+0x212>
 8007ab2:	7bbb      	ldrb	r3, [r7, #14]
 8007ab4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ab8:	4613      	mov	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	3310      	adds	r3, #16
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	3304      	adds	r3, #4
 8007ac8:	e00b      	b.n	8007ae2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007aca:	7bbb      	ldrb	r3, [r7, #14]
 8007acc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4413      	add	r3, r2
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	4413      	add	r3, r2
 8007ae0:	3304      	adds	r3, #4
 8007ae2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	2202      	movs	r2, #2
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fc37 	bl	8008364 <USBD_CtlSendData>
              break;
 8007af6:	e06a      	b.n	8007bce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007af8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	da11      	bge.n	8007b24 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b00:	7bbb      	ldrb	r3, [r7, #14]
 8007b02:	f003 020f 	and.w	r2, r3, #15
 8007b06:	6879      	ldr	r1, [r7, #4]
 8007b08:	4613      	mov	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4413      	add	r3, r2
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	440b      	add	r3, r1
 8007b12:	3324      	adds	r3, #36	; 0x24
 8007b14:	881b      	ldrh	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d117      	bne.n	8007b4a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 fbb0 	bl	8008282 <USBD_CtlError>
                  break;
 8007b22:	e054      	b.n	8007bce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
 8007b26:	f003 020f 	and.w	r2, r3, #15
 8007b2a:	6879      	ldr	r1, [r7, #4]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	440b      	add	r3, r1
 8007b36:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b3a:	881b      	ldrh	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d104      	bne.n	8007b4a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007b40:	6839      	ldr	r1, [r7, #0]
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fb9d 	bl	8008282 <USBD_CtlError>
                  break;
 8007b48:	e041      	b.n	8007bce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	da0b      	bge.n	8007b6a <USBD_StdEPReq+0x2b2>
 8007b52:	7bbb      	ldrb	r3, [r7, #14]
 8007b54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b58:	4613      	mov	r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	4413      	add	r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	3310      	adds	r3, #16
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	4413      	add	r3, r2
 8007b66:	3304      	adds	r3, #4
 8007b68:	e00b      	b.n	8007b82 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b6a:	7bbb      	ldrb	r3, [r7, #14]
 8007b6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b70:	4613      	mov	r3, r2
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	4413      	add	r3, r2
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	4413      	add	r3, r2
 8007b80:	3304      	adds	r3, #4
 8007b82:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b84:	7bbb      	ldrb	r3, [r7, #14]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d002      	beq.n	8007b90 <USBD_StdEPReq+0x2d8>
 8007b8a:	7bbb      	ldrb	r3, [r7, #14]
 8007b8c:	2b80      	cmp	r3, #128	; 0x80
 8007b8e:	d103      	bne.n	8007b98 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	2200      	movs	r2, #0
 8007b94:	601a      	str	r2, [r3, #0]
 8007b96:	e00e      	b.n	8007bb6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007b98:	7bbb      	ldrb	r3, [r7, #14]
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f001 f8f7 	bl	8008d90 <USBD_LL_IsStallEP>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d003      	beq.n	8007bb0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	2201      	movs	r2, #1
 8007bac:	601a      	str	r2, [r3, #0]
 8007bae:	e002      	b.n	8007bb6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	2202      	movs	r2, #2
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fbd1 	bl	8008364 <USBD_CtlSendData>
              break;
 8007bc2:	e004      	b.n	8007bce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fb5b 	bl	8008282 <USBD_CtlError>
              break;
 8007bcc:	bf00      	nop
          }
          break;
 8007bce:	e004      	b.n	8007bda <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007bd0:	6839      	ldr	r1, [r7, #0]
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fb55 	bl	8008282 <USBD_CtlError>
          break;
 8007bd8:	bf00      	nop
      }
      break;
 8007bda:	e005      	b.n	8007be8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007bdc:	6839      	ldr	r1, [r7, #0]
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fb4f 	bl	8008282 <USBD_CtlError>
      break;
 8007be4:	e000      	b.n	8007be8 <USBD_StdEPReq+0x330>
      break;
 8007be6:	bf00      	nop
  }

  return ret;
 8007be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
	...

08007bf4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c02:	2300      	movs	r3, #0
 8007c04:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c06:	2300      	movs	r3, #0
 8007c08:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	885b      	ldrh	r3, [r3, #2]
 8007c0e:	0a1b      	lsrs	r3, r3, #8
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	3b01      	subs	r3, #1
 8007c14:	2b06      	cmp	r3, #6
 8007c16:	f200 8128 	bhi.w	8007e6a <USBD_GetDescriptor+0x276>
 8007c1a:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <USBD_GetDescriptor+0x2c>)
 8007c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c20:	08007c3d 	.word	0x08007c3d
 8007c24:	08007c55 	.word	0x08007c55
 8007c28:	08007c95 	.word	0x08007c95
 8007c2c:	08007e6b 	.word	0x08007e6b
 8007c30:	08007e6b 	.word	0x08007e6b
 8007c34:	08007e0b 	.word	0x08007e0b
 8007c38:	08007e37 	.word	0x08007e37
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	7c12      	ldrb	r2, [r2, #16]
 8007c48:	f107 0108 	add.w	r1, r7, #8
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	4798      	blx	r3
 8007c50:	60f8      	str	r0, [r7, #12]
      break;
 8007c52:	e112      	b.n	8007e7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	7c1b      	ldrb	r3, [r3, #16]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10d      	bne.n	8007c78 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c64:	f107 0208 	add.w	r2, r7, #8
 8007c68:	4610      	mov	r0, r2
 8007c6a:	4798      	blx	r3
 8007c6c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	3301      	adds	r3, #1
 8007c72:	2202      	movs	r2, #2
 8007c74:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c76:	e100      	b.n	8007e7a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c80:	f107 0208 	add.w	r2, r7, #8
 8007c84:	4610      	mov	r0, r2
 8007c86:	4798      	blx	r3
 8007c88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	2202      	movs	r2, #2
 8007c90:	701a      	strb	r2, [r3, #0]
      break;
 8007c92:	e0f2      	b.n	8007e7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	885b      	ldrh	r3, [r3, #2]
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b05      	cmp	r3, #5
 8007c9c:	f200 80ac 	bhi.w	8007df8 <USBD_GetDescriptor+0x204>
 8007ca0:	a201      	add	r2, pc, #4	; (adr r2, 8007ca8 <USBD_GetDescriptor+0xb4>)
 8007ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca6:	bf00      	nop
 8007ca8:	08007cc1 	.word	0x08007cc1
 8007cac:	08007cf5 	.word	0x08007cf5
 8007cb0:	08007d29 	.word	0x08007d29
 8007cb4:	08007d5d 	.word	0x08007d5d
 8007cb8:	08007d91 	.word	0x08007d91
 8007cbc:	08007dc5 	.word	0x08007dc5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00b      	beq.n	8007ce4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	7c12      	ldrb	r2, [r2, #16]
 8007cd8:	f107 0108 	add.w	r1, r7, #8
 8007cdc:	4610      	mov	r0, r2
 8007cde:	4798      	blx	r3
 8007ce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ce2:	e091      	b.n	8007e08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 facb 	bl	8008282 <USBD_CtlError>
            err++;
 8007cec:	7afb      	ldrb	r3, [r7, #11]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	72fb      	strb	r3, [r7, #11]
          break;
 8007cf2:	e089      	b.n	8007e08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00b      	beq.n	8007d18 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	7c12      	ldrb	r2, [r2, #16]
 8007d0c:	f107 0108 	add.w	r1, r7, #8
 8007d10:	4610      	mov	r0, r2
 8007d12:	4798      	blx	r3
 8007d14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d16:	e077      	b.n	8007e08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fab1 	bl	8008282 <USBD_CtlError>
            err++;
 8007d20:	7afb      	ldrb	r3, [r7, #11]
 8007d22:	3301      	adds	r3, #1
 8007d24:	72fb      	strb	r3, [r7, #11]
          break;
 8007d26:	e06f      	b.n	8007e08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00b      	beq.n	8007d4c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	7c12      	ldrb	r2, [r2, #16]
 8007d40:	f107 0108 	add.w	r1, r7, #8
 8007d44:	4610      	mov	r0, r2
 8007d46:	4798      	blx	r3
 8007d48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d4a:	e05d      	b.n	8007e08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fa97 	bl	8008282 <USBD_CtlError>
            err++;
 8007d54:	7afb      	ldrb	r3, [r7, #11]
 8007d56:	3301      	adds	r3, #1
 8007d58:	72fb      	strb	r3, [r7, #11]
          break;
 8007d5a:	e055      	b.n	8007e08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00b      	beq.n	8007d80 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	7c12      	ldrb	r2, [r2, #16]
 8007d74:	f107 0108 	add.w	r1, r7, #8
 8007d78:	4610      	mov	r0, r2
 8007d7a:	4798      	blx	r3
 8007d7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d7e:	e043      	b.n	8007e08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fa7d 	bl	8008282 <USBD_CtlError>
            err++;
 8007d88:	7afb      	ldrb	r3, [r7, #11]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d8e:	e03b      	b.n	8007e08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d96:	695b      	ldr	r3, [r3, #20]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00b      	beq.n	8007db4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007da2:	695b      	ldr	r3, [r3, #20]
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	7c12      	ldrb	r2, [r2, #16]
 8007da8:	f107 0108 	add.w	r1, r7, #8
 8007dac:	4610      	mov	r0, r2
 8007dae:	4798      	blx	r3
 8007db0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007db2:	e029      	b.n	8007e08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007db4:	6839      	ldr	r1, [r7, #0]
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fa63 	bl	8008282 <USBD_CtlError>
            err++;
 8007dbc:	7afb      	ldrb	r3, [r7, #11]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	72fb      	strb	r3, [r7, #11]
          break;
 8007dc2:	e021      	b.n	8007e08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00b      	beq.n	8007de8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd6:	699b      	ldr	r3, [r3, #24]
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	7c12      	ldrb	r2, [r2, #16]
 8007ddc:	f107 0108 	add.w	r1, r7, #8
 8007de0:	4610      	mov	r0, r2
 8007de2:	4798      	blx	r3
 8007de4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007de6:	e00f      	b.n	8007e08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007de8:	6839      	ldr	r1, [r7, #0]
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fa49 	bl	8008282 <USBD_CtlError>
            err++;
 8007df0:	7afb      	ldrb	r3, [r7, #11]
 8007df2:	3301      	adds	r3, #1
 8007df4:	72fb      	strb	r3, [r7, #11]
          break;
 8007df6:	e007      	b.n	8007e08 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fa41 	bl	8008282 <USBD_CtlError>
          err++;
 8007e00:	7afb      	ldrb	r3, [r7, #11]
 8007e02:	3301      	adds	r3, #1
 8007e04:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007e06:	bf00      	nop
      }
      break;
 8007e08:	e037      	b.n	8007e7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	7c1b      	ldrb	r3, [r3, #16]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d109      	bne.n	8007e26 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e1a:	f107 0208 	add.w	r2, r7, #8
 8007e1e:	4610      	mov	r0, r2
 8007e20:	4798      	blx	r3
 8007e22:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e24:	e029      	b.n	8007e7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e26:	6839      	ldr	r1, [r7, #0]
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fa2a 	bl	8008282 <USBD_CtlError>
        err++;
 8007e2e:	7afb      	ldrb	r3, [r7, #11]
 8007e30:	3301      	adds	r3, #1
 8007e32:	72fb      	strb	r3, [r7, #11]
      break;
 8007e34:	e021      	b.n	8007e7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	7c1b      	ldrb	r3, [r3, #16]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10d      	bne.n	8007e5a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e46:	f107 0208 	add.w	r2, r7, #8
 8007e4a:	4610      	mov	r0, r2
 8007e4c:	4798      	blx	r3
 8007e4e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	3301      	adds	r3, #1
 8007e54:	2207      	movs	r2, #7
 8007e56:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e58:	e00f      	b.n	8007e7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e5a:	6839      	ldr	r1, [r7, #0]
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fa10 	bl	8008282 <USBD_CtlError>
        err++;
 8007e62:	7afb      	ldrb	r3, [r7, #11]
 8007e64:	3301      	adds	r3, #1
 8007e66:	72fb      	strb	r3, [r7, #11]
      break;
 8007e68:	e007      	b.n	8007e7a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007e6a:	6839      	ldr	r1, [r7, #0]
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fa08 	bl	8008282 <USBD_CtlError>
      err++;
 8007e72:	7afb      	ldrb	r3, [r7, #11]
 8007e74:	3301      	adds	r3, #1
 8007e76:	72fb      	strb	r3, [r7, #11]
      break;
 8007e78:	bf00      	nop
  }

  if (err != 0U)
 8007e7a:	7afb      	ldrb	r3, [r7, #11]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d11e      	bne.n	8007ebe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	88db      	ldrh	r3, [r3, #6]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d016      	beq.n	8007eb6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007e88:	893b      	ldrh	r3, [r7, #8]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00e      	beq.n	8007eac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	88da      	ldrh	r2, [r3, #6]
 8007e92:	893b      	ldrh	r3, [r7, #8]
 8007e94:	4293      	cmp	r3, r2
 8007e96:	bf28      	it	cs
 8007e98:	4613      	movcs	r3, r2
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e9e:	893b      	ldrh	r3, [r7, #8]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	68f9      	ldr	r1, [r7, #12]
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fa5d 	bl	8008364 <USBD_CtlSendData>
 8007eaa:	e009      	b.n	8007ec0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f9e7 	bl	8008282 <USBD_CtlError>
 8007eb4:	e004      	b.n	8007ec0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 faae 	bl	8008418 <USBD_CtlSendStatus>
 8007ebc:	e000      	b.n	8007ec0 <USBD_GetDescriptor+0x2cc>
    return;
 8007ebe:	bf00      	nop
  }
}
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop

08007ec8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	889b      	ldrh	r3, [r3, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d131      	bne.n	8007f3e <USBD_SetAddress+0x76>
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	88db      	ldrh	r3, [r3, #6]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d12d      	bne.n	8007f3e <USBD_SetAddress+0x76>
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	885b      	ldrh	r3, [r3, #2]
 8007ee6:	2b7f      	cmp	r3, #127	; 0x7f
 8007ee8:	d829      	bhi.n	8007f3e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	885b      	ldrh	r3, [r3, #2]
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ef4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b03      	cmp	r3, #3
 8007f00:	d104      	bne.n	8007f0c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f9bc 	bl	8008282 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f0a:	e01d      	b.n	8007f48 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	7bfa      	ldrb	r2, [r7, #15]
 8007f10:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f14:	7bfb      	ldrb	r3, [r7, #15]
 8007f16:	4619      	mov	r1, r3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 ff65 	bl	8008de8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fa7a 	bl	8008418 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d004      	beq.n	8007f34 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2202      	movs	r2, #2
 8007f2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f32:	e009      	b.n	8007f48 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f3c:	e004      	b.n	8007f48 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f3e:	6839      	ldr	r1, [r7, #0]
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f99e 	bl	8008282 <USBD_CtlError>
  }
}
 8007f46:	bf00      	nop
 8007f48:	bf00      	nop
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	885b      	ldrh	r3, [r3, #2]
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	4b4e      	ldr	r3, [pc, #312]	; (80080a0 <USBD_SetConfig+0x150>)
 8007f66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f68:	4b4d      	ldr	r3, [pc, #308]	; (80080a0 <USBD_SetConfig+0x150>)
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d905      	bls.n	8007f7c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007f70:	6839      	ldr	r1, [r7, #0]
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f985 	bl	8008282 <USBD_CtlError>
    return USBD_FAIL;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e08c      	b.n	8008096 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d002      	beq.n	8007f8e <USBD_SetConfig+0x3e>
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	d029      	beq.n	8007fe0 <USBD_SetConfig+0x90>
 8007f8c:	e075      	b.n	800807a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007f8e:	4b44      	ldr	r3, [pc, #272]	; (80080a0 <USBD_SetConfig+0x150>)
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d020      	beq.n	8007fd8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007f96:	4b42      	ldr	r3, [pc, #264]	; (80080a0 <USBD_SetConfig+0x150>)
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fa0:	4b3f      	ldr	r3, [pc, #252]	; (80080a0 <USBD_SetConfig+0x150>)
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f7fe ffe7 	bl	8006f7a <USBD_SetClassConfig>
 8007fac:	4603      	mov	r3, r0
 8007fae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d008      	beq.n	8007fc8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007fb6:	6839      	ldr	r1, [r7, #0]
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 f962 	bl	8008282 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2202      	movs	r2, #2
 8007fc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007fc6:	e065      	b.n	8008094 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fa25 	bl	8008418 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2203      	movs	r2, #3
 8007fd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007fd6:	e05d      	b.n	8008094 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 fa1d 	bl	8008418 <USBD_CtlSendStatus>
      break;
 8007fde:	e059      	b.n	8008094 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007fe0:	4b2f      	ldr	r3, [pc, #188]	; (80080a0 <USBD_SetConfig+0x150>)
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d112      	bne.n	800800e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2202      	movs	r2, #2
 8007fec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007ff0:	4b2b      	ldr	r3, [pc, #172]	; (80080a0 <USBD_SetConfig+0x150>)
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ffa:	4b29      	ldr	r3, [pc, #164]	; (80080a0 <USBD_SetConfig+0x150>)
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	4619      	mov	r1, r3
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f7fe ffd6 	bl	8006fb2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 fa06 	bl	8008418 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800800c:	e042      	b.n	8008094 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800800e:	4b24      	ldr	r3, [pc, #144]	; (80080a0 <USBD_SetConfig+0x150>)
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	461a      	mov	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	429a      	cmp	r2, r3
 800801a:	d02a      	beq.n	8008072 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	b2db      	uxtb	r3, r3
 8008022:	4619      	mov	r1, r3
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f7fe ffc4 	bl	8006fb2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800802a:	4b1d      	ldr	r3, [pc, #116]	; (80080a0 <USBD_SetConfig+0x150>)
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	461a      	mov	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008034:	4b1a      	ldr	r3, [pc, #104]	; (80080a0 <USBD_SetConfig+0x150>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7fe ff9d 	bl	8006f7a <USBD_SetClassConfig>
 8008040:	4603      	mov	r3, r0
 8008042:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008044:	7bfb      	ldrb	r3, [r7, #15]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00f      	beq.n	800806a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800804a:	6839      	ldr	r1, [r7, #0]
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 f918 	bl	8008282 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	b2db      	uxtb	r3, r3
 8008058:	4619      	mov	r1, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7fe ffa9 	bl	8006fb2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2202      	movs	r2, #2
 8008064:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008068:	e014      	b.n	8008094 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f9d4 	bl	8008418 <USBD_CtlSendStatus>
      break;
 8008070:	e010      	b.n	8008094 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f9d0 	bl	8008418 <USBD_CtlSendStatus>
      break;
 8008078:	e00c      	b.n	8008094 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800807a:	6839      	ldr	r1, [r7, #0]
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f900 	bl	8008282 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008082:	4b07      	ldr	r3, [pc, #28]	; (80080a0 <USBD_SetConfig+0x150>)
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	4619      	mov	r1, r3
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f7fe ff92 	bl	8006fb2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800808e:	2303      	movs	r3, #3
 8008090:	73fb      	strb	r3, [r7, #15]
      break;
 8008092:	bf00      	nop
  }

  return ret;
 8008094:	7bfb      	ldrb	r3, [r7, #15]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	20000274 	.word	0x20000274

080080a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	88db      	ldrh	r3, [r3, #6]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d004      	beq.n	80080c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80080b6:	6839      	ldr	r1, [r7, #0]
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f8e2 	bl	8008282 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80080be:	e023      	b.n	8008108 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	dc02      	bgt.n	80080d2 <USBD_GetConfig+0x2e>
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	dc03      	bgt.n	80080d8 <USBD_GetConfig+0x34>
 80080d0:	e015      	b.n	80080fe <USBD_GetConfig+0x5a>
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	d00b      	beq.n	80080ee <USBD_GetConfig+0x4a>
 80080d6:	e012      	b.n	80080fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	3308      	adds	r3, #8
 80080e2:	2201      	movs	r2, #1
 80080e4:	4619      	mov	r1, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f93c 	bl	8008364 <USBD_CtlSendData>
        break;
 80080ec:	e00c      	b.n	8008108 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	3304      	adds	r3, #4
 80080f2:	2201      	movs	r2, #1
 80080f4:	4619      	mov	r1, r3
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f934 	bl	8008364 <USBD_CtlSendData>
        break;
 80080fc:	e004      	b.n	8008108 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f8be 	bl	8008282 <USBD_CtlError>
        break;
 8008106:	bf00      	nop
}
 8008108:	bf00      	nop
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008120:	b2db      	uxtb	r3, r3
 8008122:	3b01      	subs	r3, #1
 8008124:	2b02      	cmp	r3, #2
 8008126:	d81e      	bhi.n	8008166 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	88db      	ldrh	r3, [r3, #6]
 800812c:	2b02      	cmp	r3, #2
 800812e:	d004      	beq.n	800813a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008130:	6839      	ldr	r1, [r7, #0]
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f8a5 	bl	8008282 <USBD_CtlError>
        break;
 8008138:	e01a      	b.n	8008170 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008146:	2b00      	cmp	r3, #0
 8008148:	d005      	beq.n	8008156 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	f043 0202 	orr.w	r2, r3, #2
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	330c      	adds	r3, #12
 800815a:	2202      	movs	r2, #2
 800815c:	4619      	mov	r1, r3
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f900 	bl	8008364 <USBD_CtlSendData>
      break;
 8008164:	e004      	b.n	8008170 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f88a 	bl	8008282 <USBD_CtlError>
      break;
 800816e:	bf00      	nop
  }
}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	885b      	ldrh	r3, [r3, #2]
 8008186:	2b01      	cmp	r3, #1
 8008188:	d107      	bne.n	800819a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2201      	movs	r2, #1
 800818e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f940 	bl	8008418 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008198:	e013      	b.n	80081c2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	885b      	ldrh	r3, [r3, #2]
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d10b      	bne.n	80081ba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	889b      	ldrh	r3, [r3, #4]
 80081a6:	0a1b      	lsrs	r3, r3, #8
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	b2da      	uxtb	r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f930 	bl	8008418 <USBD_CtlSendStatus>
}
 80081b8:	e003      	b.n	80081c2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 f860 	bl	8008282 <USBD_CtlError>
}
 80081c2:	bf00      	nop
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b082      	sub	sp, #8
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	3b01      	subs	r3, #1
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d80b      	bhi.n	80081fa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	885b      	ldrh	r3, [r3, #2]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d10c      	bne.n	8008204 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f910 	bl	8008418 <USBD_CtlSendStatus>
      }
      break;
 80081f8:	e004      	b.n	8008204 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80081fa:	6839      	ldr	r1, [r7, #0]
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f840 	bl	8008282 <USBD_CtlError>
      break;
 8008202:	e000      	b.n	8008206 <USBD_ClrFeature+0x3c>
      break;
 8008204:	bf00      	nop
  }
}
 8008206:	bf00      	nop
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b084      	sub	sp, #16
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	781a      	ldrb	r2, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	3301      	adds	r3, #1
 8008228:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	781a      	ldrb	r2, [r3, #0]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	3301      	adds	r3, #1
 8008236:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f7ff fa41 	bl	80076c0 <SWAPBYTE>
 800823e:	4603      	mov	r3, r0
 8008240:	461a      	mov	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	3301      	adds	r3, #1
 800824a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	3301      	adds	r3, #1
 8008250:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f7ff fa34 	bl	80076c0 <SWAPBYTE>
 8008258:	4603      	mov	r3, r0
 800825a:	461a      	mov	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	3301      	adds	r3, #1
 8008264:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	3301      	adds	r3, #1
 800826a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f7ff fa27 	bl	80076c0 <SWAPBYTE>
 8008272:	4603      	mov	r3, r0
 8008274:	461a      	mov	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	80da      	strh	r2, [r3, #6]
}
 800827a:	bf00      	nop
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b082      	sub	sp, #8
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800828c:	2180      	movs	r1, #128	; 0x80
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fd40 	bl	8008d14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008294:	2100      	movs	r1, #0
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fd3c 	bl	8008d14 <USBD_LL_StallEP>
}
 800829c:	bf00      	nop
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80082b0:	2300      	movs	r3, #0
 80082b2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d036      	beq.n	8008328 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80082be:	6938      	ldr	r0, [r7, #16]
 80082c0:	f000 f836 	bl	8008330 <USBD_GetLen>
 80082c4:	4603      	mov	r3, r0
 80082c6:	3301      	adds	r3, #1
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	005b      	lsls	r3, r3, #1
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80082d2:	7dfb      	ldrb	r3, [r7, #23]
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	4413      	add	r3, r2
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	7812      	ldrb	r2, [r2, #0]
 80082dc:	701a      	strb	r2, [r3, #0]
  idx++;
 80082de:	7dfb      	ldrb	r3, [r7, #23]
 80082e0:	3301      	adds	r3, #1
 80082e2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80082e4:	7dfb      	ldrb	r3, [r7, #23]
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	4413      	add	r3, r2
 80082ea:	2203      	movs	r2, #3
 80082ec:	701a      	strb	r2, [r3, #0]
  idx++;
 80082ee:	7dfb      	ldrb	r3, [r7, #23]
 80082f0:	3301      	adds	r3, #1
 80082f2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80082f4:	e013      	b.n	800831e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80082f6:	7dfb      	ldrb	r3, [r7, #23]
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	4413      	add	r3, r2
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	7812      	ldrb	r2, [r2, #0]
 8008300:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	3301      	adds	r3, #1
 8008306:	613b      	str	r3, [r7, #16]
    idx++;
 8008308:	7dfb      	ldrb	r3, [r7, #23]
 800830a:	3301      	adds	r3, #1
 800830c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800830e:	7dfb      	ldrb	r3, [r7, #23]
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	4413      	add	r3, r2
 8008314:	2200      	movs	r2, #0
 8008316:	701a      	strb	r2, [r3, #0]
    idx++;
 8008318:	7dfb      	ldrb	r3, [r7, #23]
 800831a:	3301      	adds	r3, #1
 800831c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1e7      	bne.n	80082f6 <USBD_GetString+0x52>
 8008326:	e000      	b.n	800832a <USBD_GetString+0x86>
    return;
 8008328:	bf00      	nop
  }
}
 800832a:	3718      	adds	r7, #24
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008338:	2300      	movs	r3, #0
 800833a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008340:	e005      	b.n	800834e <USBD_GetLen+0x1e>
  {
    len++;
 8008342:	7bfb      	ldrb	r3, [r7, #15]
 8008344:	3301      	adds	r3, #1
 8008346:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	3301      	adds	r3, #1
 800834c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1f5      	bne.n	8008342 <USBD_GetLen+0x12>
  }

  return len;
 8008356:	7bfb      	ldrb	r3, [r7, #15]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3714      	adds	r7, #20
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2202      	movs	r2, #2
 8008374:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	2100      	movs	r1, #0
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f000 fd4b 	bl	8008e26 <USBD_LL_Transmit>

  return USBD_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b084      	sub	sp, #16
 800839e:	af00      	add	r7, sp, #0
 80083a0:	60f8      	str	r0, [r7, #12]
 80083a2:	60b9      	str	r1, [r7, #8]
 80083a4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	68ba      	ldr	r2, [r7, #8]
 80083aa:	2100      	movs	r1, #0
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f000 fd3a 	bl	8008e26 <USBD_LL_Transmit>

  return USBD_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3710      	adds	r7, #16
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2203      	movs	r2, #3
 80083cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	2100      	movs	r1, #0
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f000 fd3e 	bl	8008e68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b084      	sub	sp, #16
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	60f8      	str	r0, [r7, #12]
 80083fe:	60b9      	str	r1, [r7, #8]
 8008400:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68ba      	ldr	r2, [r7, #8]
 8008406:	2100      	movs	r1, #0
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f000 fd2d 	bl	8008e68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2204      	movs	r2, #4
 8008424:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008428:	2300      	movs	r3, #0
 800842a:	2200      	movs	r2, #0
 800842c:	2100      	movs	r1, #0
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fcf9 	bl	8008e26 <USBD_LL_Transmit>

  return USBD_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b082      	sub	sp, #8
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2205      	movs	r2, #5
 800844a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800844e:	2300      	movs	r3, #0
 8008450:	2200      	movs	r2, #0
 8008452:	2100      	movs	r1, #0
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 fd07 	bl	8008e68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008468:	2200      	movs	r2, #0
 800846a:	4912      	ldr	r1, [pc, #72]	; (80084b4 <MX_USB_DEVICE_Init+0x50>)
 800846c:	4812      	ldr	r0, [pc, #72]	; (80084b8 <MX_USB_DEVICE_Init+0x54>)
 800846e:	f7fe fd07 	bl	8006e80 <USBD_Init>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d001      	beq.n	800847c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008478:	f7f8 fd56 	bl	8000f28 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800847c:	490f      	ldr	r1, [pc, #60]	; (80084bc <MX_USB_DEVICE_Init+0x58>)
 800847e:	480e      	ldr	r0, [pc, #56]	; (80084b8 <MX_USB_DEVICE_Init+0x54>)
 8008480:	f7fe fd2e 	bl	8006ee0 <USBD_RegisterClass>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d001      	beq.n	800848e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800848a:	f7f8 fd4d 	bl	8000f28 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800848e:	490c      	ldr	r1, [pc, #48]	; (80084c0 <MX_USB_DEVICE_Init+0x5c>)
 8008490:	4809      	ldr	r0, [pc, #36]	; (80084b8 <MX_USB_DEVICE_Init+0x54>)
 8008492:	f7fe fc1f 	bl	8006cd4 <USBD_CDC_RegisterInterface>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d001      	beq.n	80084a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800849c:	f7f8 fd44 	bl	8000f28 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80084a0:	4805      	ldr	r0, [pc, #20]	; (80084b8 <MX_USB_DEVICE_Init+0x54>)
 80084a2:	f7fe fd53 	bl	8006f4c <USBD_Start>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d001      	beq.n	80084b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80084ac:	f7f8 fd3c 	bl	8000f28 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80084b0:	bf00      	nop
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	200000b0 	.word	0x200000b0
 80084b8:	20000278 	.word	0x20000278
 80084bc:	2000001c 	.word	0x2000001c
 80084c0:	2000009c 	.word	0x2000009c

080084c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80084c8:	2200      	movs	r2, #0
 80084ca:	4905      	ldr	r1, [pc, #20]	; (80084e0 <CDC_Init_FS+0x1c>)
 80084cc:	4805      	ldr	r0, [pc, #20]	; (80084e4 <CDC_Init_FS+0x20>)
 80084ce:	f7fe fc1b 	bl	8006d08 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80084d2:	4905      	ldr	r1, [pc, #20]	; (80084e8 <CDC_Init_FS+0x24>)
 80084d4:	4803      	ldr	r0, [pc, #12]	; (80084e4 <CDC_Init_FS+0x20>)
 80084d6:	f7fe fc39 	bl	8006d4c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80084da:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80084dc:	4618      	mov	r0, r3
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	20000d54 	.word	0x20000d54
 80084e4:	20000278 	.word	0x20000278
 80084e8:	20000554 	.word	0x20000554

080084ec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80084ec:	b480      	push	{r7}
 80084ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80084f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	4603      	mov	r3, r0
 8008504:	6039      	str	r1, [r7, #0]
 8008506:	71fb      	strb	r3, [r7, #7]
 8008508:	4613      	mov	r3, r2
 800850a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800850c:	79fb      	ldrb	r3, [r7, #7]
 800850e:	2b23      	cmp	r3, #35	; 0x23
 8008510:	d84a      	bhi.n	80085a8 <CDC_Control_FS+0xac>
 8008512:	a201      	add	r2, pc, #4	; (adr r2, 8008518 <CDC_Control_FS+0x1c>)
 8008514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008518:	080085a9 	.word	0x080085a9
 800851c:	080085a9 	.word	0x080085a9
 8008520:	080085a9 	.word	0x080085a9
 8008524:	080085a9 	.word	0x080085a9
 8008528:	080085a9 	.word	0x080085a9
 800852c:	080085a9 	.word	0x080085a9
 8008530:	080085a9 	.word	0x080085a9
 8008534:	080085a9 	.word	0x080085a9
 8008538:	080085a9 	.word	0x080085a9
 800853c:	080085a9 	.word	0x080085a9
 8008540:	080085a9 	.word	0x080085a9
 8008544:	080085a9 	.word	0x080085a9
 8008548:	080085a9 	.word	0x080085a9
 800854c:	080085a9 	.word	0x080085a9
 8008550:	080085a9 	.word	0x080085a9
 8008554:	080085a9 	.word	0x080085a9
 8008558:	080085a9 	.word	0x080085a9
 800855c:	080085a9 	.word	0x080085a9
 8008560:	080085a9 	.word	0x080085a9
 8008564:	080085a9 	.word	0x080085a9
 8008568:	080085a9 	.word	0x080085a9
 800856c:	080085a9 	.word	0x080085a9
 8008570:	080085a9 	.word	0x080085a9
 8008574:	080085a9 	.word	0x080085a9
 8008578:	080085a9 	.word	0x080085a9
 800857c:	080085a9 	.word	0x080085a9
 8008580:	080085a9 	.word	0x080085a9
 8008584:	080085a9 	.word	0x080085a9
 8008588:	080085a9 	.word	0x080085a9
 800858c:	080085a9 	.word	0x080085a9
 8008590:	080085a9 	.word	0x080085a9
 8008594:	080085a9 	.word	0x080085a9
 8008598:	080085a9 	.word	0x080085a9
 800859c:	080085a9 	.word	0x080085a9
 80085a0:	080085a9 	.word	0x080085a9
 80085a4:	080085a9 	.word	0x080085a9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80085a8:	bf00      	nop
  }

  return (USBD_OK);
 80085aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
//  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
//  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
//  return (USBD_OK);

	rx_cmd_buf.IsCommandDataReceived = 1;
 80085c2:	4b1a      	ldr	r3, [pc, #104]	; (800862c <CDC_Receive_FS+0x74>)
 80085c4:	2201      	movs	r2, #1
 80085c6:	721a      	strb	r2, [r3, #8]
	rx_cmd_buf.CMDLens[rx_cmd_buf.pos_receive] = (*Len);
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	4b17      	ldr	r3, [pc, #92]	; (800862c <CDC_Receive_FS+0x74>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	b2d1      	uxtb	r1, r2
 80085d2:	4a16      	ldr	r2, [pc, #88]	; (800862c <CDC_Receive_FS+0x74>)
 80085d4:	4413      	add	r3, r2
 80085d6:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 80085da:	3309      	adds	r3, #9
 80085dc:	460a      	mov	r2, r1
 80085de:	701a      	strb	r2, [r3, #0]
	memcpy(rx_cmd_buf.RxBufferFS[rx_cmd_buf.pos_receive], Buf, (*Len));
 80085e0:	4b12      	ldr	r3, [pc, #72]	; (800862c <CDC_Receive_FS+0x74>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	02db      	lsls	r3, r3, #11
 80085e6:	3308      	adds	r3, #8
 80085e8:	4a10      	ldr	r2, [pc, #64]	; (800862c <CDC_Receive_FS+0x74>)
 80085ea:	4413      	add	r3, r2
 80085ec:	1c58      	adds	r0, r3, #1
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	461a      	mov	r2, r3
 80085f4:	6879      	ldr	r1, [r7, #4]
 80085f6:	f000 fcdb 	bl	8008fb0 <memcpy>
	rx_cmd_buf.pos_receive++;
 80085fa:	4b0c      	ldr	r3, [pc, #48]	; (800862c <CDC_Receive_FS+0x74>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	3301      	adds	r3, #1
 8008600:	4a0a      	ldr	r2, [pc, #40]	; (800862c <CDC_Receive_FS+0x74>)
 8008602:	6013      	str	r3, [r2, #0]

	if (rx_cmd_buf.pos_receive >= RX_CMND_BUF_LEN)
 8008604:	4b09      	ldr	r3, [pc, #36]	; (800862c <CDC_Receive_FS+0x74>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2b1d      	cmp	r3, #29
 800860a:	dd02      	ble.n	8008612 <CDC_Receive_FS+0x5a>
	{
		rx_cmd_buf.pos_receive = 0;
 800860c:	4b07      	ldr	r3, [pc, #28]	; (800862c <CDC_Receive_FS+0x74>)
 800860e:	2200      	movs	r2, #0
 8008610:	601a      	str	r2, [r3, #0]
	}

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008612:	6879      	ldr	r1, [r7, #4]
 8008614:	4806      	ldr	r0, [pc, #24]	; (8008630 <CDC_Receive_FS+0x78>)
 8008616:	f7fe fb99 	bl	8006d4c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800861a:	4805      	ldr	r0, [pc, #20]	; (8008630 <CDC_Receive_FS+0x78>)
 800861c:	f7fe fbfa 	bl	8006e14 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8008620:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008622:	4618      	mov	r0, r3
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	20001554 	.word	0x20001554
 8008630:	20000278 	.word	0x20000278

08008634 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	460b      	mov	r3, r1
 800863e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008640:	2300      	movs	r3, #0
 8008642:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008644:	4b0d      	ldr	r3, [pc, #52]	; (800867c <CDC_Transmit_FS+0x48>)
 8008646:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800864a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008652:	2b00      	cmp	r3, #0
 8008654:	d001      	beq.n	800865a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008656:	2301      	movs	r3, #1
 8008658:	e00b      	b.n	8008672 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800865a:	887b      	ldrh	r3, [r7, #2]
 800865c:	461a      	mov	r2, r3
 800865e:	6879      	ldr	r1, [r7, #4]
 8008660:	4806      	ldr	r0, [pc, #24]	; (800867c <CDC_Transmit_FS+0x48>)
 8008662:	f7fe fb51 	bl	8006d08 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008666:	4805      	ldr	r0, [pc, #20]	; (800867c <CDC_Transmit_FS+0x48>)
 8008668:	f7fe fb8e 	bl	8006d88 <USBD_CDC_TransmitPacket>
 800866c:	4603      	mov	r3, r0
 800866e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008670:	7bfb      	ldrb	r3, [r7, #15]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	20000278 	.word	0x20000278

08008680 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008680:	b480      	push	{r7}
 8008682:	b087      	sub	sp, #28
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	4613      	mov	r3, r2
 800868c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800868e:	2300      	movs	r3, #0
 8008690:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008692:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008696:	4618      	mov	r0, r3
 8008698:	371c      	adds	r7, #28
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
	...

080086a4 <USB_retrieveCMD>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t USB_retrieveCMD(uint8_t *Buf, uint32_t *Len)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
	if (rx_cmd_buf.IsCommandDataReceived == 0)
 80086ae:	4b1c      	ldr	r3, [pc, #112]	; (8008720 <USB_retrieveCMD+0x7c>)
 80086b0:	7a1b      	ldrb	r3, [r3, #8]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d101      	bne.n	80086ba <USB_retrieveCMD+0x16>
	{
		return 0;
 80086b6:	2300      	movs	r3, #0
 80086b8:	e02e      	b.n	8008718 <USB_retrieveCMD+0x74>
	}

	int index = rx_cmd_buf.pos_process;
 80086ba:	4b19      	ldr	r3, [pc, #100]	; (8008720 <USB_retrieveCMD+0x7c>)
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	60fb      	str	r3, [r7, #12]
	*Len = rx_cmd_buf.CMDLens[index];
 80086c0:	4a17      	ldr	r2, [pc, #92]	; (8008720 <USB_retrieveCMD+0x7c>)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	4413      	add	r3, r2
 80086c6:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 80086ca:	3309      	adds	r3, #9
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	461a      	mov	r2, r3
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	601a      	str	r2, [r3, #0]

	memcpy(Buf, rx_cmd_buf.RxBufferFS[index], (*Len));
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	02db      	lsls	r3, r3, #11
 80086d8:	3308      	adds	r3, #8
 80086da:	4a11      	ldr	r2, [pc, #68]	; (8008720 <USB_retrieveCMD+0x7c>)
 80086dc:	4413      	add	r3, r2
 80086de:	1c59      	adds	r1, r3, #1
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	461a      	mov	r2, r3
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fc62 	bl	8008fb0 <memcpy>
	//testing only. make sure there is ending char in the returned command string
	//check if all data were processed.
	rx_cmd_buf.pos_process++;
 80086ec:	4b0c      	ldr	r3, [pc, #48]	; (8008720 <USB_retrieveCMD+0x7c>)
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	3301      	adds	r3, #1
 80086f2:	4a0b      	ldr	r2, [pc, #44]	; (8008720 <USB_retrieveCMD+0x7c>)
 80086f4:	6053      	str	r3, [r2, #4]
	if (rx_cmd_buf.pos_process >= RX_CMND_BUF_LEN)
 80086f6:	4b0a      	ldr	r3, [pc, #40]	; (8008720 <USB_retrieveCMD+0x7c>)
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	2b1d      	cmp	r3, #29
 80086fc:	dd02      	ble.n	8008704 <USB_retrieveCMD+0x60>
	{
		rx_cmd_buf.pos_process = 0;
 80086fe:	4b08      	ldr	r3, [pc, #32]	; (8008720 <USB_retrieveCMD+0x7c>)
 8008700:	2200      	movs	r2, #0
 8008702:	605a      	str	r2, [r3, #4]
	}

	if (rx_cmd_buf.pos_process == rx_cmd_buf.pos_receive)
 8008704:	4b06      	ldr	r3, [pc, #24]	; (8008720 <USB_retrieveCMD+0x7c>)
 8008706:	685a      	ldr	r2, [r3, #4]
 8008708:	4b05      	ldr	r3, [pc, #20]	; (8008720 <USB_retrieveCMD+0x7c>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	429a      	cmp	r2, r3
 800870e:	d102      	bne.n	8008716 <USB_retrieveCMD+0x72>
	{
		rx_cmd_buf.IsCommandDataReceived = 0;
 8008710:	4b03      	ldr	r3, [pc, #12]	; (8008720 <USB_retrieveCMD+0x7c>)
 8008712:	2200      	movs	r2, #0
 8008714:	721a      	strb	r2, [r3, #8]
	}

	//check if all data were processed
	return 1;
 8008716:	2301      	movs	r3, #1

}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	20001554 	.word	0x20001554

08008724 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	4603      	mov	r3, r0
 800872c:	6039      	str	r1, [r7, #0]
 800872e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	2212      	movs	r2, #18
 8008734:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008736:	4b03      	ldr	r3, [pc, #12]	; (8008744 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008738:	4618      	mov	r0, r3
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr
 8008744:	200000cc 	.word	0x200000cc

08008748 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	4603      	mov	r3, r0
 8008750:	6039      	str	r1, [r7, #0]
 8008752:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	2204      	movs	r2, #4
 8008758:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800875a:	4b03      	ldr	r3, [pc, #12]	; (8008768 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800875c:	4618      	mov	r0, r3
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr
 8008768:	200000e0 	.word	0x200000e0

0800876c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	4603      	mov	r3, r0
 8008774:	6039      	str	r1, [r7, #0]
 8008776:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008778:	79fb      	ldrb	r3, [r7, #7]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d105      	bne.n	800878a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800877e:	683a      	ldr	r2, [r7, #0]
 8008780:	4907      	ldr	r1, [pc, #28]	; (80087a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008782:	4808      	ldr	r0, [pc, #32]	; (80087a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008784:	f7ff fd8e 	bl	80082a4 <USBD_GetString>
 8008788:	e004      	b.n	8008794 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800878a:	683a      	ldr	r2, [r7, #0]
 800878c:	4904      	ldr	r1, [pc, #16]	; (80087a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800878e:	4805      	ldr	r0, [pc, #20]	; (80087a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008790:	f7ff fd88 	bl	80082a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008794:	4b02      	ldr	r3, [pc, #8]	; (80087a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008796:	4618      	mov	r0, r3
 8008798:	3708      	adds	r7, #8
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	2001057c 	.word	0x2001057c
 80087a4:	08008ff0 	.word	0x08008ff0

080087a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	4603      	mov	r3, r0
 80087b0:	6039      	str	r1, [r7, #0]
 80087b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	4904      	ldr	r1, [pc, #16]	; (80087c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80087b8:	4804      	ldr	r0, [pc, #16]	; (80087cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80087ba:	f7ff fd73 	bl	80082a4 <USBD_GetString>
  return USBD_StrDesc;
 80087be:	4b02      	ldr	r3, [pc, #8]	; (80087c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	2001057c 	.word	0x2001057c
 80087cc:	08008ffc 	.word	0x08008ffc

080087d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	4603      	mov	r3, r0
 80087d8:	6039      	str	r1, [r7, #0]
 80087da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	221a      	movs	r2, #26
 80087e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80087e2:	f000 f843 	bl	800886c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80087e6:	4b02      	ldr	r3, [pc, #8]	; (80087f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	200000e4 	.word	0x200000e4

080087f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	4603      	mov	r3, r0
 80087fc:	6039      	str	r1, [r7, #0]
 80087fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008800:	79fb      	ldrb	r3, [r7, #7]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d105      	bne.n	8008812 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	4907      	ldr	r1, [pc, #28]	; (8008828 <USBD_FS_ConfigStrDescriptor+0x34>)
 800880a:	4808      	ldr	r0, [pc, #32]	; (800882c <USBD_FS_ConfigStrDescriptor+0x38>)
 800880c:	f7ff fd4a 	bl	80082a4 <USBD_GetString>
 8008810:	e004      	b.n	800881c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008812:	683a      	ldr	r2, [r7, #0]
 8008814:	4904      	ldr	r1, [pc, #16]	; (8008828 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008816:	4805      	ldr	r0, [pc, #20]	; (800882c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008818:	f7ff fd44 	bl	80082a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800881c:	4b02      	ldr	r3, [pc, #8]	; (8008828 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800881e:	4618      	mov	r0, r3
 8008820:	3708      	adds	r7, #8
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	2001057c 	.word	0x2001057c
 800882c:	08009004 	.word	0x08009004

08008830 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	4603      	mov	r3, r0
 8008838:	6039      	str	r1, [r7, #0]
 800883a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800883c:	79fb      	ldrb	r3, [r7, #7]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d105      	bne.n	800884e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	4907      	ldr	r1, [pc, #28]	; (8008864 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008846:	4808      	ldr	r0, [pc, #32]	; (8008868 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008848:	f7ff fd2c 	bl	80082a4 <USBD_GetString>
 800884c:	e004      	b.n	8008858 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	4904      	ldr	r1, [pc, #16]	; (8008864 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008852:	4805      	ldr	r0, [pc, #20]	; (8008868 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008854:	f7ff fd26 	bl	80082a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008858:	4b02      	ldr	r3, [pc, #8]	; (8008864 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800885a:	4618      	mov	r0, r3
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	2001057c 	.word	0x2001057c
 8008868:	08009010 	.word	0x08009010

0800886c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008872:	4b0f      	ldr	r3, [pc, #60]	; (80088b0 <Get_SerialNum+0x44>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008878:	4b0e      	ldr	r3, [pc, #56]	; (80088b4 <Get_SerialNum+0x48>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800887e:	4b0e      	ldr	r3, [pc, #56]	; (80088b8 <Get_SerialNum+0x4c>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4413      	add	r3, r2
 800888a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d009      	beq.n	80088a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008892:	2208      	movs	r2, #8
 8008894:	4909      	ldr	r1, [pc, #36]	; (80088bc <Get_SerialNum+0x50>)
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f000 f814 	bl	80088c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800889c:	2204      	movs	r2, #4
 800889e:	4908      	ldr	r1, [pc, #32]	; (80088c0 <Get_SerialNum+0x54>)
 80088a0:	68b8      	ldr	r0, [r7, #8]
 80088a2:	f000 f80f 	bl	80088c4 <IntToUnicode>
  }
}
 80088a6:	bf00      	nop
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	1fff7a10 	.word	0x1fff7a10
 80088b4:	1fff7a14 	.word	0x1fff7a14
 80088b8:	1fff7a18 	.word	0x1fff7a18
 80088bc:	200000e6 	.word	0x200000e6
 80088c0:	200000f6 	.word	0x200000f6

080088c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b087      	sub	sp, #28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	4613      	mov	r3, r2
 80088d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80088d2:	2300      	movs	r3, #0
 80088d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80088d6:	2300      	movs	r3, #0
 80088d8:	75fb      	strb	r3, [r7, #23]
 80088da:	e027      	b.n	800892c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	0f1b      	lsrs	r3, r3, #28
 80088e0:	2b09      	cmp	r3, #9
 80088e2:	d80b      	bhi.n	80088fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	0f1b      	lsrs	r3, r3, #28
 80088e8:	b2da      	uxtb	r2, r3
 80088ea:	7dfb      	ldrb	r3, [r7, #23]
 80088ec:	005b      	lsls	r3, r3, #1
 80088ee:	4619      	mov	r1, r3
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	440b      	add	r3, r1
 80088f4:	3230      	adds	r2, #48	; 0x30
 80088f6:	b2d2      	uxtb	r2, r2
 80088f8:	701a      	strb	r2, [r3, #0]
 80088fa:	e00a      	b.n	8008912 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	0f1b      	lsrs	r3, r3, #28
 8008900:	b2da      	uxtb	r2, r3
 8008902:	7dfb      	ldrb	r3, [r7, #23]
 8008904:	005b      	lsls	r3, r3, #1
 8008906:	4619      	mov	r1, r3
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	440b      	add	r3, r1
 800890c:	3237      	adds	r2, #55	; 0x37
 800890e:	b2d2      	uxtb	r2, r2
 8008910:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	011b      	lsls	r3, r3, #4
 8008916:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008918:	7dfb      	ldrb	r3, [r7, #23]
 800891a:	005b      	lsls	r3, r3, #1
 800891c:	3301      	adds	r3, #1
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	4413      	add	r3, r2
 8008922:	2200      	movs	r2, #0
 8008924:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008926:	7dfb      	ldrb	r3, [r7, #23]
 8008928:	3301      	adds	r3, #1
 800892a:	75fb      	strb	r3, [r7, #23]
 800892c:	7dfa      	ldrb	r2, [r7, #23]
 800892e:	79fb      	ldrb	r3, [r7, #7]
 8008930:	429a      	cmp	r2, r3
 8008932:	d3d3      	bcc.n	80088dc <IntToUnicode+0x18>
  }
}
 8008934:	bf00      	nop
 8008936:	bf00      	nop
 8008938:	371c      	adds	r7, #28
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
	...

08008944 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b08a      	sub	sp, #40	; 0x28
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800894c:	f107 0314 	add.w	r3, r7, #20
 8008950:	2200      	movs	r2, #0
 8008952:	601a      	str	r2, [r3, #0]
 8008954:	605a      	str	r2, [r3, #4]
 8008956:	609a      	str	r2, [r3, #8]
 8008958:	60da      	str	r2, [r3, #12]
 800895a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008964:	d13a      	bne.n	80089dc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008966:	2300      	movs	r3, #0
 8008968:	613b      	str	r3, [r7, #16]
 800896a:	4b1e      	ldr	r3, [pc, #120]	; (80089e4 <HAL_PCD_MspInit+0xa0>)
 800896c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896e:	4a1d      	ldr	r2, [pc, #116]	; (80089e4 <HAL_PCD_MspInit+0xa0>)
 8008970:	f043 0301 	orr.w	r3, r3, #1
 8008974:	6313      	str	r3, [r2, #48]	; 0x30
 8008976:	4b1b      	ldr	r3, [pc, #108]	; (80089e4 <HAL_PCD_MspInit+0xa0>)
 8008978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	613b      	str	r3, [r7, #16]
 8008980:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008982:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008988:	2302      	movs	r3, #2
 800898a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800898c:	2300      	movs	r3, #0
 800898e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008990:	2303      	movs	r3, #3
 8008992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008994:	230a      	movs	r3, #10
 8008996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008998:	f107 0314 	add.w	r3, r7, #20
 800899c:	4619      	mov	r1, r3
 800899e:	4812      	ldr	r0, [pc, #72]	; (80089e8 <HAL_PCD_MspInit+0xa4>)
 80089a0:	f7f9 fcd2 	bl	8002348 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80089a4:	4b0f      	ldr	r3, [pc, #60]	; (80089e4 <HAL_PCD_MspInit+0xa0>)
 80089a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a8:	4a0e      	ldr	r2, [pc, #56]	; (80089e4 <HAL_PCD_MspInit+0xa0>)
 80089aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089ae:	6353      	str	r3, [r2, #52]	; 0x34
 80089b0:	2300      	movs	r3, #0
 80089b2:	60fb      	str	r3, [r7, #12]
 80089b4:	4b0b      	ldr	r3, [pc, #44]	; (80089e4 <HAL_PCD_MspInit+0xa0>)
 80089b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b8:	4a0a      	ldr	r2, [pc, #40]	; (80089e4 <HAL_PCD_MspInit+0xa0>)
 80089ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089be:	6453      	str	r3, [r2, #68]	; 0x44
 80089c0:	4b08      	ldr	r3, [pc, #32]	; (80089e4 <HAL_PCD_MspInit+0xa0>)
 80089c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089c8:	60fb      	str	r3, [r7, #12]
 80089ca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80089cc:	2200      	movs	r2, #0
 80089ce:	2100      	movs	r1, #0
 80089d0:	2043      	movs	r0, #67	; 0x43
 80089d2:	f7f9 f976 	bl	8001cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80089d6:	2043      	movs	r0, #67	; 0x43
 80089d8:	f7f9 f98f 	bl	8001cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80089dc:	bf00      	nop
 80089de:	3728      	adds	r7, #40	; 0x28
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	40023800 	.word	0x40023800
 80089e8:	40020000 	.word	0x40020000

080089ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a00:	4619      	mov	r1, r3
 8008a02:	4610      	mov	r0, r2
 8008a04:	f7fe faef 	bl	8006fe6 <USBD_LL_SetupStage>
}
 8008a08:	bf00      	nop
 8008a0a:	3708      	adds	r7, #8
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008a22:	78fa      	ldrb	r2, [r7, #3]
 8008a24:	6879      	ldr	r1, [r7, #4]
 8008a26:	4613      	mov	r3, r2
 8008a28:	00db      	lsls	r3, r3, #3
 8008a2a:	4413      	add	r3, r2
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	440b      	add	r3, r1
 8008a30:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	78fb      	ldrb	r3, [r7, #3]
 8008a38:	4619      	mov	r1, r3
 8008a3a:	f7fe fb29 	bl	8007090 <USBD_LL_DataOutStage>
}
 8008a3e:	bf00      	nop
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b082      	sub	sp, #8
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
 8008a4e:	460b      	mov	r3, r1
 8008a50:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008a58:	78fa      	ldrb	r2, [r7, #3]
 8008a5a:	6879      	ldr	r1, [r7, #4]
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	00db      	lsls	r3, r3, #3
 8008a60:	4413      	add	r3, r2
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	440b      	add	r3, r1
 8008a66:	334c      	adds	r3, #76	; 0x4c
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	78fb      	ldrb	r3, [r7, #3]
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	f7fe fbc2 	bl	80071f6 <USBD_LL_DataInStage>
}
 8008a72:	bf00      	nop
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b082      	sub	sp, #8
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7fe fcf6 	bl	800747a <USBD_LL_SOF>
}
 8008a8e:	bf00      	nop
 8008a90:	3708      	adds	r7, #8
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b084      	sub	sp, #16
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d001      	beq.n	8008aae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008aaa:	f7f8 fa3d 	bl	8000f28 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ab4:	7bfa      	ldrb	r2, [r7, #15]
 8008ab6:	4611      	mov	r1, r2
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7fe fca0 	bl	80073fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7fe fc48 	bl	800735a <USBD_LL_Reset>
}
 8008aca:	bf00      	nop
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
	...

08008ad4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7fe fc9b 	bl	800741e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	6812      	ldr	r2, [r2, #0]
 8008af6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008afa:	f043 0301 	orr.w	r3, r3, #1
 8008afe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a1b      	ldr	r3, [r3, #32]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d005      	beq.n	8008b14 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b08:	4b04      	ldr	r3, [pc, #16]	; (8008b1c <HAL_PCD_SuspendCallback+0x48>)
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	4a03      	ldr	r2, [pc, #12]	; (8008b1c <HAL_PCD_SuspendCallback+0x48>)
 8008b0e:	f043 0306 	orr.w	r3, r3, #6
 8008b12:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b14:	bf00      	nop
 8008b16:	3708      	adds	r7, #8
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	e000ed00 	.word	0xe000ed00

08008b20 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fe fc8b 	bl	800744a <USBD_LL_Resume>
}
 8008b34:	bf00      	nop
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	460b      	mov	r3, r1
 8008b46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b4e:	78fa      	ldrb	r2, [r7, #3]
 8008b50:	4611      	mov	r1, r2
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fe fce3 	bl	800751e <USBD_LL_IsoOUTIncomplete>
}
 8008b58:	bf00      	nop
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b72:	78fa      	ldrb	r2, [r7, #3]
 8008b74:	4611      	mov	r1, r2
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7fe fc9f 	bl	80074ba <USBD_LL_IsoINIncomplete>
}
 8008b7c:	bf00      	nop
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fe fcf5 	bl	8007582 <USBD_LL_DevConnected>
}
 8008b98:	bf00      	nop
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7fe fcf2 	bl	8007598 <USBD_LL_DevDisconnected>
}
 8008bb4:	bf00      	nop
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d13c      	bne.n	8008c46 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008bcc:	4a20      	ldr	r2, [pc, #128]	; (8008c50 <USBD_LL_Init+0x94>)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a1e      	ldr	r2, [pc, #120]	; (8008c50 <USBD_LL_Init+0x94>)
 8008bd8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008bdc:	4b1c      	ldr	r3, [pc, #112]	; (8008c50 <USBD_LL_Init+0x94>)
 8008bde:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008be2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008be4:	4b1a      	ldr	r3, [pc, #104]	; (8008c50 <USBD_LL_Init+0x94>)
 8008be6:	2204      	movs	r2, #4
 8008be8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008bea:	4b19      	ldr	r3, [pc, #100]	; (8008c50 <USBD_LL_Init+0x94>)
 8008bec:	2202      	movs	r2, #2
 8008bee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008bf0:	4b17      	ldr	r3, [pc, #92]	; (8008c50 <USBD_LL_Init+0x94>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008bf6:	4b16      	ldr	r3, [pc, #88]	; (8008c50 <USBD_LL_Init+0x94>)
 8008bf8:	2202      	movs	r2, #2
 8008bfa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008bfc:	4b14      	ldr	r3, [pc, #80]	; (8008c50 <USBD_LL_Init+0x94>)
 8008bfe:	2200      	movs	r2, #0
 8008c00:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008c02:	4b13      	ldr	r3, [pc, #76]	; (8008c50 <USBD_LL_Init+0x94>)
 8008c04:	2200      	movs	r2, #0
 8008c06:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008c08:	4b11      	ldr	r3, [pc, #68]	; (8008c50 <USBD_LL_Init+0x94>)
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008c0e:	4b10      	ldr	r3, [pc, #64]	; (8008c50 <USBD_LL_Init+0x94>)
 8008c10:	2200      	movs	r2, #0
 8008c12:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008c14:	4b0e      	ldr	r3, [pc, #56]	; (8008c50 <USBD_LL_Init+0x94>)
 8008c16:	2200      	movs	r2, #0
 8008c18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008c1a:	480d      	ldr	r0, [pc, #52]	; (8008c50 <USBD_LL_Init+0x94>)
 8008c1c:	f7f9 fd31 	bl	8002682 <HAL_PCD_Init>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008c26:	f7f8 f97f 	bl	8000f28 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008c2a:	2180      	movs	r1, #128	; 0x80
 8008c2c:	4808      	ldr	r0, [pc, #32]	; (8008c50 <USBD_LL_Init+0x94>)
 8008c2e:	f7fa ff88 	bl	8003b42 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008c32:	2240      	movs	r2, #64	; 0x40
 8008c34:	2100      	movs	r1, #0
 8008c36:	4806      	ldr	r0, [pc, #24]	; (8008c50 <USBD_LL_Init+0x94>)
 8008c38:	f7fa ff3c 	bl	8003ab4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008c3c:	2280      	movs	r2, #128	; 0x80
 8008c3e:	2101      	movs	r1, #1
 8008c40:	4803      	ldr	r0, [pc, #12]	; (8008c50 <USBD_LL_Init+0x94>)
 8008c42:	f7fa ff37 	bl	8003ab4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3708      	adds	r7, #8
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	2001077c 	.word	0x2001077c

08008c54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7f9 fe26 	bl	80028bc <HAL_PCD_Start>
 8008c70:	4603      	mov	r3, r0
 8008c72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c74:	7bfb      	ldrb	r3, [r7, #15]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f000 f942 	bl	8008f00 <USBD_Get_USB_Status>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b084      	sub	sp, #16
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
 8008c92:	4608      	mov	r0, r1
 8008c94:	4611      	mov	r1, r2
 8008c96:	461a      	mov	r2, r3
 8008c98:	4603      	mov	r3, r0
 8008c9a:	70fb      	strb	r3, [r7, #3]
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	70bb      	strb	r3, [r7, #2]
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008cb2:	78bb      	ldrb	r3, [r7, #2]
 8008cb4:	883a      	ldrh	r2, [r7, #0]
 8008cb6:	78f9      	ldrb	r1, [r7, #3]
 8008cb8:	f7fa faf7 	bl	80032aa <HAL_PCD_EP_Open>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cc0:	7bfb      	ldrb	r3, [r7, #15]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f000 f91c 	bl	8008f00 <USBD_Get_USB_Status>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ccc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b084      	sub	sp, #16
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
 8008cde:	460b      	mov	r3, r1
 8008ce0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cf0:	78fa      	ldrb	r2, [r7, #3]
 8008cf2:	4611      	mov	r1, r2
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7fa fb40 	bl	800337a <HAL_PCD_EP_Close>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cfe:	7bfb      	ldrb	r3, [r7, #15]
 8008d00:	4618      	mov	r0, r3
 8008d02:	f000 f8fd 	bl	8008f00 <USBD_Get_USB_Status>
 8008d06:	4603      	mov	r3, r0
 8008d08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d20:	2300      	movs	r3, #0
 8008d22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d2e:	78fa      	ldrb	r2, [r7, #3]
 8008d30:	4611      	mov	r1, r2
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7fa fc18 	bl	8003568 <HAL_PCD_EP_SetStall>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d3c:	7bfb      	ldrb	r3, [r7, #15]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 f8de 	bl	8008f00 <USBD_Get_USB_Status>
 8008d44:	4603      	mov	r3, r0
 8008d46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d48:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b084      	sub	sp, #16
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d62:	2300      	movs	r3, #0
 8008d64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d6c:	78fa      	ldrb	r2, [r7, #3]
 8008d6e:	4611      	mov	r1, r2
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7fa fc5d 	bl	8003630 <HAL_PCD_EP_ClrStall>
 8008d76:	4603      	mov	r3, r0
 8008d78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f000 f8bf 	bl	8008f00 <USBD_Get_USB_Status>
 8008d82:	4603      	mov	r3, r0
 8008d84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d86:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3710      	adds	r7, #16
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b085      	sub	sp, #20
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	460b      	mov	r3, r1
 8008d9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008da2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008da4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	da0b      	bge.n	8008dc4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008dac:	78fb      	ldrb	r3, [r7, #3]
 8008dae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008db2:	68f9      	ldr	r1, [r7, #12]
 8008db4:	4613      	mov	r3, r2
 8008db6:	00db      	lsls	r3, r3, #3
 8008db8:	4413      	add	r3, r2
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	440b      	add	r3, r1
 8008dbe:	333e      	adds	r3, #62	; 0x3e
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	e00b      	b.n	8008ddc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008dc4:	78fb      	ldrb	r3, [r7, #3]
 8008dc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dca:	68f9      	ldr	r1, [r7, #12]
 8008dcc:	4613      	mov	r3, r2
 8008dce:	00db      	lsls	r3, r3, #3
 8008dd0:	4413      	add	r3, r2
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	440b      	add	r3, r1
 8008dd6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008dda:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3714      	adds	r7, #20
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	460b      	mov	r3, r1
 8008df2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008df4:	2300      	movs	r3, #0
 8008df6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e02:	78fa      	ldrb	r2, [r7, #3]
 8008e04:	4611      	mov	r1, r2
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fa fa2a 	bl	8003260 <HAL_PCD_SetAddress>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e10:	7bfb      	ldrb	r3, [r7, #15]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 f874 	bl	8008f00 <USBD_Get_USB_Status>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b086      	sub	sp, #24
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	60f8      	str	r0, [r7, #12]
 8008e2e:	607a      	str	r2, [r7, #4]
 8008e30:	603b      	str	r3, [r7, #0]
 8008e32:	460b      	mov	r3, r1
 8008e34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e36:	2300      	movs	r3, #0
 8008e38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e44:	7af9      	ldrb	r1, [r7, #11]
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	f7fa fb43 	bl	80034d4 <HAL_PCD_EP_Transmit>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e52:	7dfb      	ldrb	r3, [r7, #23]
 8008e54:	4618      	mov	r0, r3
 8008e56:	f000 f853 	bl	8008f00 <USBD_Get_USB_Status>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3718      	adds	r7, #24
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b086      	sub	sp, #24
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	607a      	str	r2, [r7, #4]
 8008e72:	603b      	str	r3, [r7, #0]
 8008e74:	460b      	mov	r3, r1
 8008e76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e86:	7af9      	ldrb	r1, [r7, #11]
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	f7fa fabf 	bl	800340e <HAL_PCD_EP_Receive>
 8008e90:	4603      	mov	r3, r0
 8008e92:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e94:	7dfb      	ldrb	r3, [r7, #23]
 8008e96:	4618      	mov	r0, r3
 8008e98:	f000 f832 	bl	8008f00 <USBD_Get_USB_Status>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ea0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3718      	adds	r7, #24
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b082      	sub	sp, #8
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ebc:	78fa      	ldrb	r2, [r7, #3]
 8008ebe:	4611      	mov	r1, r2
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7fa faef 	bl	80034a4 <HAL_PCD_EP_GetRxCount>
 8008ec6:	4603      	mov	r3, r0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008ed8:	4b03      	ldr	r3, [pc, #12]	; (8008ee8 <USBD_static_malloc+0x18>)
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	370c      	adds	r7, #12
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	20010c88 	.word	0x20010c88

08008eec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]

}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	4603      	mov	r3, r0
 8008f08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008f0e:	79fb      	ldrb	r3, [r7, #7]
 8008f10:	2b03      	cmp	r3, #3
 8008f12:	d817      	bhi.n	8008f44 <USBD_Get_USB_Status+0x44>
 8008f14:	a201      	add	r2, pc, #4	; (adr r2, 8008f1c <USBD_Get_USB_Status+0x1c>)
 8008f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f1a:	bf00      	nop
 8008f1c:	08008f2d 	.word	0x08008f2d
 8008f20:	08008f33 	.word	0x08008f33
 8008f24:	08008f39 	.word	0x08008f39
 8008f28:	08008f3f 	.word	0x08008f3f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f30:	e00b      	b.n	8008f4a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f32:	2303      	movs	r3, #3
 8008f34:	73fb      	strb	r3, [r7, #15]
    break;
 8008f36:	e008      	b.n	8008f4a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f3c:	e005      	b.n	8008f4a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	73fb      	strb	r3, [r7, #15]
    break;
 8008f42:	e002      	b.n	8008f4a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008f44:	2303      	movs	r3, #3
 8008f46:	73fb      	strb	r3, [r7, #15]
    break;
 8008f48:	bf00      	nop
  }
  return usb_status;
 8008f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3714      	adds	r7, #20
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <memset>:
 8008f58:	4402      	add	r2, r0
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d100      	bne.n	8008f62 <memset+0xa>
 8008f60:	4770      	bx	lr
 8008f62:	f803 1b01 	strb.w	r1, [r3], #1
 8008f66:	e7f9      	b.n	8008f5c <memset+0x4>

08008f68 <__libc_init_array>:
 8008f68:	b570      	push	{r4, r5, r6, lr}
 8008f6a:	4d0d      	ldr	r5, [pc, #52]	; (8008fa0 <__libc_init_array+0x38>)
 8008f6c:	4c0d      	ldr	r4, [pc, #52]	; (8008fa4 <__libc_init_array+0x3c>)
 8008f6e:	1b64      	subs	r4, r4, r5
 8008f70:	10a4      	asrs	r4, r4, #2
 8008f72:	2600      	movs	r6, #0
 8008f74:	42a6      	cmp	r6, r4
 8008f76:	d109      	bne.n	8008f8c <__libc_init_array+0x24>
 8008f78:	4d0b      	ldr	r5, [pc, #44]	; (8008fa8 <__libc_init_array+0x40>)
 8008f7a:	4c0c      	ldr	r4, [pc, #48]	; (8008fac <__libc_init_array+0x44>)
 8008f7c:	f000 f826 	bl	8008fcc <_init>
 8008f80:	1b64      	subs	r4, r4, r5
 8008f82:	10a4      	asrs	r4, r4, #2
 8008f84:	2600      	movs	r6, #0
 8008f86:	42a6      	cmp	r6, r4
 8008f88:	d105      	bne.n	8008f96 <__libc_init_array+0x2e>
 8008f8a:	bd70      	pop	{r4, r5, r6, pc}
 8008f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f90:	4798      	blx	r3
 8008f92:	3601      	adds	r6, #1
 8008f94:	e7ee      	b.n	8008f74 <__libc_init_array+0xc>
 8008f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f9a:	4798      	blx	r3
 8008f9c:	3601      	adds	r6, #1
 8008f9e:	e7f2      	b.n	8008f86 <__libc_init_array+0x1e>
 8008fa0:	08009040 	.word	0x08009040
 8008fa4:	08009040 	.word	0x08009040
 8008fa8:	08009040 	.word	0x08009040
 8008fac:	08009044 	.word	0x08009044

08008fb0 <memcpy>:
 8008fb0:	440a      	add	r2, r1
 8008fb2:	4291      	cmp	r1, r2
 8008fb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fb8:	d100      	bne.n	8008fbc <memcpy+0xc>
 8008fba:	4770      	bx	lr
 8008fbc:	b510      	push	{r4, lr}
 8008fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fc6:	4291      	cmp	r1, r2
 8008fc8:	d1f9      	bne.n	8008fbe <memcpy+0xe>
 8008fca:	bd10      	pop	{r4, pc}

08008fcc <_init>:
 8008fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fce:	bf00      	nop
 8008fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fd2:	bc08      	pop	{r3}
 8008fd4:	469e      	mov	lr, r3
 8008fd6:	4770      	bx	lr

08008fd8 <_fini>:
 8008fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fda:	bf00      	nop
 8008fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fde:	bc08      	pop	{r3}
 8008fe0:	469e      	mov	lr, r3
 8008fe2:	4770      	bx	lr
